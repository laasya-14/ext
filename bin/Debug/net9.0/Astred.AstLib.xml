<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Astred.AstLib</name>
    </assembly>
    <members>
        <member name="T:Astred.AstLib.XAst">
            <summary>
            The XAst class provides static methods for creating and manipulating the AST as a graph.
            It includes methods for parsing source code into an AST, finding declarations, binding symbols,
            and formatting the AST into a string representation. It also provides utilities for working with
            text regions, including preprocessing and handling inserted or skipped text.
            </summary>
        </member>
        <member name="F:Astred.AstLib.XAst.languages">
            <summary>
            List of known langauges.
            </summary>
        </member>
        <member name="M:Astred.AstLib.XAst.Format(Astred.AstLib.AstNodeBase,System.Boolean,System.Boolean)">
            <summary>
            Formats the abstract syntax tree (AST) represented by the given root node into a string representation.
            </summary>
            <param name="root">The root node of the AST to format.</param>
            <param name="comments">A boolean flag indicating whether comments should be included in the formatted output. Default is true.</param>
            <param name="number">A boolean flag indicating whether lines should be numbered in the formatted output. Default is true.</param>
            <returns>A string representation of the formatted AST.</returns>
        </member>
        <member name="M:Astred.AstLib.XAst.PrintScopes(Astred.AstLib.AstNodeBase)">
            <summary>
            Prints the scopes of the AST starting from the given root node.
            </summary>
            <param name="root">The root node of the AST from which to start printing scopes.</param>
        </member>
        <member name="M:Astred.AstLib.XAst.FormatScopes(Astred.AstLib.AstNodeBase,System.Text.StringBuilder)">
            <summary>
            Formats the scopes of the AST into a string representation starting from the given root node.
            </summary>
            <param name="root">The root node of the AST from which to start formatting scopes.</param>
            <param name="sb">The StringBuilder to which the formatted scopes are appended.</param>
        </member>
        <member name="M:Astred.AstLib.XAst.GetGraphLanguageForFile(System.String)">
            <summary>
            Gets the graph language for the given file path.
            </summary>
            <param name="path">The path to the file with the preferred extension.</param>
        </member>
        <member name="M:Astred.AstLib.XAst.GetGraphLanguageByName(System.String)">
            <summary>
            Gets the <set cref="T:Astred.GraphLib.GraphLanguage"/> value from the language's name as a string.
            </summary>
            <param name="name">String containing the name of a language.</param>
        </member>
        <member name="M:Astred.AstLib.XAst.GetAstLanguage(Astred.GraphLib.GraphLanguage)">
            <summary>
            Gets the <set cref="T:Astred.AstLib.AstLanguage"/> value from the <set cref="T:Astred.GraphLib.GraphLanguage"/> value.
            </summary>
            <param name="language"></param>
            <returns><set cref="T:Astred.AstLib.AstLanguage"/> for the <set cref="T:Astred.GraphLib.GraphLanguage"/>.</returns>
        </member>
        <member name="M:Astred.AstLib.XAst.CreatePreferredContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <summary>
            Creates a context for parsing source code with the preferred file extension.
            </summary>
            <param name="file">The file to parse.</param>
            <param name="unit">The graph unit for the file.</param>
            <returns>The created context for parsing the file.</returns>
        </member>
        <member name="M:Astred.AstLib.XAst.CreatePreferredContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext,Astred.GraphLib.GraphLanguage)">
            <summary>
            Creates a context for parsing source code with the preferred file extension.
            </summary>
            <param name="file">The file to parse.</param>
            <param name="unit">The graph unit for the file.</param>
            <param name="language">The preferred language for parsing the file.</param>
            <returns>The created context for parsing the file.</returns>
            <remarks>
            If not language is set, GraphLanguage.None, will switch to GraphLanguage.Text.
            </remarks>
        </member>
        <member name="M:Astred.AstLib.XAst.ParseToAst(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <summary>
            Parses the source code into an abstract syntax tree (AST) using the given context.
            </summary>
            <param name="root">The root node of the AST to which to add this context.</param>
            <param name="context">The context for parsing the source code.</param>
            <param name="raw">Optional. A boolean flag indicating whether to parse the source code in raw mode. Default is false.</param>
            <param name="digest">Optional. A boolean flag indicating whether to parse just enough source code to create a digest. Default is false.</param>
            <returns>The base node of the parsed AST tree.</returns>
            <remarks>Note that this function adds the tree to the root. Other nodes might be added to the root as well, such as #include files.</remarks>
        </member>
        <member name="M:Astred.AstLib.XAst.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNodeRoot)">
            <summary>
            Finds declarations in the AST starting from the given root node.
            </summary>
            <param name="globals">The global scope containing symbols.</param>
            <param name="root">The root node of the AST.</param>
        </member>
        <member name="M:Astred.AstLib.XAst.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNodeRoot)">
            <summary>
            Binds symbols in the AST starting from the given root node.
            </summary>
            <param name="globals">The global scope containing symbols.</param>
            <param name="root">The root node of the AST.</param>
        </member>
        <member name="M:Astred.AstLib.XAst.ResetAllIds">
            <summary>
            Resets all static counters.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstEditStatus">
            <summary>
            Enum representing the edit status of a node. If the node was inserted or deleted from another tree,
            if the node's children (at any level) has changed but the node itself has not changed, it will be marked as Update
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstEditStatus.None">
            <summary>
            The node was not changed.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstEditStatus.Insert">
            <summary>
            The node was inserted into the tree.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstEditStatus.Delete">
            <summary>
            The node was deleted from the tree.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstEditStatus.Update">
            <summary>
            The node was updated because it's children were updated.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstEditRange">
            <summary>
            Represents a range of edits in an abstract syntax tree (AST) with support for copy, delete, and insert operations.
            This class tracks the beginning and end positions of the range before and after the edit, as well as the final positions.
            It provides properties to determine the type of edit (copy, delete, insert) and the counts of deleted and inserted lines.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstEditRange.ToString">
            <summary>
            Returns a string representation of the edit range for debugging.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstEditRangeApply.AdjustPointEndToAfter(Astred.AstLib.AstPoint,System.Int32)">
            <summary>
            Adjusts the given AstPoint to its position after a range transformation based on the current range (rng) mappings.
            This method considers whether the point is at the start of a column and adjusts the row and column accordingly.
            It logs detailed information if the verbose level is set to 3 or higher.
            </summary>
            <param name="rc">The AstPoint to be adjusted.</param>
            <param name="depth">The depth level for logging purposes, default is 0.</param>
            <returns>The adjusted AstPoint representing its position after the range transformation.</returns>
        </member>
        <member name="M:Astred.AstLib.AstEditRangeApply.AdjustPointEndToFinal(Astred.AstLib.AstPoint,System.Int32)">
            <summary>
            Adjusts the given AstPoint to its final position based on the current range (rng) mappings.
            This method considers whether the point is at the start of a column and adjusts the row and column accordingly.
            It also logs detailed information if the verbose level is set to 3 or higher.
            </summary>
            <param name="rc">The AstPoint to be adjusted.</param>
            <param name="depth">The depth level of the node for logging purposes, default is 0.</param>
            <returns>The adjusted AstPoint representing its final position.</returns>
        </member>
        <member name="T:Astred.AstLib.AstFileEdit">
            <summary>
            JSON-compatible representation of an edit to a text file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileEdit.Description">
            <summary>
            Brief description of what the edit is for.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileEdit.Start">
            <summary>
            The line at which to start the edit.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileEdit.DeleteCount">
            <summary>
            The number of lines to delete for the edit.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileEdit.DeleteLines">
            <summary>
            Lines of text to be deleted.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileEdit.InsertCount">
            <summary>
            The number of lines to insert.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileEdit.InsertLines">
            <summary>
            The lines of text to insert for the edit.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileEdit.#ctor">
            <summary>
            Initializes a new instance of the AstFileEdit class with empty insert and delete lines.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileEdit.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the AstFileEdit class with the specified start line and insert lines.
            </summary>
            <param name="start">The line at which to start the edit.</param>
            <param name="insertLines">The lines of text to insert.</param>
        </member>
        <member name="M:Astred.AstLib.AstFileEdit.#ctor(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes a new instance of the AstFileEdit class with the specified start line and delete lines.
            </summary>
            <param name="start">The line at which to start the edit.</param>
            <param name="deletes">The list of line numbers to delete.</param>
        </member>
        <member name="M:Astred.AstLib.AstFileEdit.#ctor(System.Int32,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes a new instance of the AstFileEdit class with the specified start line, insert lines, and delete lines.
            </summary>
            <param name="start">The line at which to start the edit.</param>
            <param name="insertLines">The lines of text to insert.</param>
            <param name="deletes">The list of line numbers to delete.</param>
        </member>
        <member name="M:Astred.AstLib.AstFileEdit.ToString">
            <summary>
            Returns a string representation of the edit formatted for debugging.
            </summary>
            <returns>A string representation of the edit.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileEdit.CompareTo(Astred.AstLib.AstFileEdit)">
            <summary>
            Compares the current edit with another <see cref="T:Astred.AstLib.AstFileEdit"/> and returns an integer that indicates
            whether the current edit precedes, follows, or occurs in the same position in the sort order as the other <see cref="T:Astred.AstLib.AstFileEdit"/>.
            </summary>
            <param name="other">An <see cref="T:Astred.AstLib.AstFileEdit"/> to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileEdit.Build(System.Int32,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Builds a new instance of the AstFileEdit class with the specified start line, insert lines, and delete lines.
            </summary>
            <param name="start">The line at which to start the edit.</param>
            <param name="insertLines">The lines of text to insert.</param>
            <param name="deletes">The list of line numbers to delete.</param>
            <returns>A new instance of the AstFileEdit class.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileEdit.Build(System.Int32,System.String)">
            <summary>
            Builds a new instance of the AstFileEdit class with the specified start line and insert lines.
            </summary>
            <param name="start">The line at which to start the edit.</param>
            <param name="insertLines">The lines of text to insert.</param>
            <returns>A new instance of the AstFileEdit class.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileEdit.Build(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Builds a new instance of the AstFileEdit class with the specified start line and delete lines.
            </summary>
            <param name="start">The line at which to start the edit.</param>
            <param name="deletes">The list of line numbers to delete.</param>
            <returns>A new instance of the AstFileEdit class.</returns>
        </member>
        <member name="T:Astred.AstLib.AstFileEdits">
            <summary>
            JSON-compatible representation of a set of edits to a text file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileEdits.Path">
            <summary>
            The path of the BlockFile to apply edits to.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileEdits.BlockFile">
            <summary>
            The BlockFile associated with the edits.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileEdits.Edits">
            <summary>
            The list of file edits.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileEdits.Instructions">
            <summary>
            Provide this text to an LLM to instruct it to output JSON compatible with <see cref="T:Astred.AstLib.AstFileEdits"/>.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileEdits.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFileEdits"/> class.
            Used for serialization and deserialization.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileEdits.#ctor(Astred.GraphLib.BlockFile,System.Collections.Generic.List{Astred.AstLib.AstFileEdit})">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFileEdits"/> class with the specified block file.
            </summary>
            <param name="blockFile">The block file associated with the edits.</param>
            <param name="edits">The list of <see cref="T:Astred.AstLib.AstFileEdit"/> to be applied to the specified blockfile.</param>
        </member>
        <member name="M:Astred.AstLib.AstFileEdits.Invert">
            <summary>
            Inverts the edit group by swapping the delete and insert lines.
            </summary>
            <returns>A new AstFileEdits representing the inverted edits.</returns>
        </member>
        <member name="T:Astred.AstLib.AstFileEdits.MicroEdit">
            <summary>
            Internal class that represents a micro edit to a file,
            either a single line delete or a single line insert.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileEdits.GetMicroEdits">
            <summary>
            Returnn the list of microedits, in sorted order, for
            this AstFileEdits.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileEdits.Invert(Astred.AstLib.AstFileEdit,System.String[])">
            <summary>
            Inverts the specified edit by swapping the delete and insert lines.
            </summary>
            <param name="edit">AstFileEdit</param>
            <param name="lines">The lines of the file being edited.</param>
            <returns>A new AstFileEdit representing the inverted edit.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileEdits.Compose(Astred.AstLib.AstFileEdits)">
            <summary>
            Composes the current set of file edits with the next group of file edits.
            </summary>
            <param name="nextGroup">The next group of file edits to be composed.</param>
            <returns>A new AstFileEdits object representing the composed edits.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileEdits.Build(System.String,System.Collections.Generic.List{Astred.AstLib.AstFileEdit})">
            <summary>
            Builds a new instance of AstFileEdits with the specified path and edits.
            </summary>
            <param name="path">The path of the file to apply edits to.</param>
            <param name="edits">The list of edits to apply.</param>
            <returns>A new instance of AstFileEdits.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileEdits.Build(Astred.GraphLib.BlockFile,System.Collections.Generic.List{Astred.AstLib.AstFileEdit})">
            <summary>
            Builds a new instance of AstFileEdits with the specified BlockFile and edits.
            </summary>
            <param name="blockFile">The BlockFile associated with the edits.</param>
            <param name="edits">The list of edits to apply.</param>
            <returns>A new instance of AstFileEdits.</returns>
        </member>
        <member name="T:Astred.AstLib.AstPoint">
            <summary>
            Represents a point in the source code, defined by a row and column number.
            For easier presentation to users and AIs, the Row and Column are both 1-based,
            and the maximum row and column values are defined by MaxRow and MaxColumn.
            The first row of a file is 1.
            The first column of a row is 1.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstPoint.Row">
            <summary>
            Access the row number of the point.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstPoint.Column">
            <summary>
            Access the column number of the point.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstPoint"/> struct.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstPoint"/> struct with the specified row and column numbers.
            </summary>
            <param name="row">The row number. This value is 1-based, in other words, the first row of a file is 1.</param>
            <param name="column">The column number. This value is 1-based, in other words, the first column of a row is 1.</param>
        </member>
        <member name="M:Astred.AstLib.AstPoint.#ctor(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstPoint"/> by widening the origin to wider.
            The origin can later be extract from the wider.
            </summary>
            <param name="origin">The original point to widen.</param>
            <param name="wider">The wider point to use.</param>
            <remarks>
            The wider must be within +/- 127 rows and columns of the origin or else the origin is lost.
            </remarks>
        </member>
        <member name="M:Astred.AstLib.AstPoint.#ctor(Astred.AstLib.AstPoint,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstPoint"/> by widening the origin to wider.
            The origin can later be extract from the wider.
            </summary>
            <param name="origin">The original point to widen.</param>
            <param name="row">The row number to which widen.</param>
            <param name="column">The column number to which widen.</param>
            <remarks>
            The row and column must be within +/- 127 rows and columns of the origin or else the origin is lost.
            </remarks>
        </member>
        <member name="M:Astred.AstLib.AstPoint.#ctor(GitHub.TreeSitter.TSPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstPoint"/> struct from a TreeSitter point.
            </summary>
            <param name="point">The TreeSitter point to convert.</param>
        </member>
        <member name="M:Astred.AstLib.AstPoint.CompareTo(Astred.AstLib.AstPoint)">
            <summary>
            Compares the current instance with another <see cref="T:Astred.AstLib.AstPoint"/> and returns an integer that indicates
            whether the current instance precedes, follows, or is the same as the other <see cref="T:Astred.AstLib.AstPoint"/>.
            </summary>
            <param name="other">An <see cref="T:Astred.AstLib.AstPoint"/> to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.Equals(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Indicates whether the specified <see cref="T:Astred.AstLib.AstPoint"/> instances are equal.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <returns>true if the specified <see cref="T:Astred.AstLib.AstPoint"/> instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.Equals(System.Object)">
            <summary>
            Indicates whether the specified <see cref="T:Astred.AstLib.AstPoint"/> instances is equal to the argument.
            </summary>
            <param name="obj">object to compare.</param>
            <returns>true if the specified object is an <see cref="T:Astred.AstLib.AstPoint"/> of equal value; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.GetHashCode(Astred.AstLib.AstPoint)">
            <summary>
            Returns a hash code for the specified <see cref="T:Astred.AstLib.AstPoint"/>.
            </summary>
            <param name="x">The <see cref="T:Astred.AstLib.AstPoint"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified <see cref="T:Astred.AstLib.AstPoint"/>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.GetHashCode">
            <summary>
            Returns a hash code for the instance of <see cref="T:Astred.AstLib.AstPoint"/>.
            </summary>
            <returns>A hash code for the specified <see cref="T:Astred.AstLib.AstPoint"/>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.Min(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Returns the smaller of two AstPoints.
            </summary>
            <param name="x">The first of two AstPoints to compare.</param>
            <param name="y">The second of two AstPoints to compare.</param>
            <returns>The smaller of the two AstPoints.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.Max(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Returns the larger of two AstPoints.
            </summary>
            <param name="x">The first of two AstPoints to compare.</param>
            <param name="y">The second of two AstPoints to compare.</param>
            <returns>The larger of the two AstPoints.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.op_Equality(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Indicates whether two specified <see cref="T:Astred.AstLib.AstPoint"/> instances have the same value.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is the same as the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.op_Inequality(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Indicates whether two specified <see cref="T:Astred.AstLib.AstPoint"/> instances have different values.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is different from the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.op_LessThan(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Indicates whether the first specified <see cref="T:Astred.AstLib.AstPoint"/> instances is an less than or equal the value of the second.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is less than the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.op_LessThanOrEqual(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Indicates whether the first specified <see cref="T:Astred.AstLib.AstPoint"/> instances is less than the value of second.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is less than or equal to the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.op_GreaterThan(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Indicates whether the first specified <see cref="T:Astred.AstLib.AstPoint"/> instances is an greater than or equal the value of the second.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is greater than the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.op_GreaterThanOrEqual(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Indicates whether the first specified <see cref="T:Astred.AstLib.AstPoint"/> instances is greater than the value of second.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstPoint"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is greater than or equal to the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.ToPoint">
            <summary>
            Converts the <see cref="T:Astred.AstLib.AstPoint"/> to a TreeSitter point.
            </summary>
            <returns>A TreeSitter point representing the same location as this <see cref="T:Astred.AstLib.AstPoint"/>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Astred.AstLib.AstPoint"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Astred.AstLib.AstPoint"/>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstPoint.ToStringDebug">
            <summary>
            Returns a string that represents the current <see cref="T:Astred.AstLib.AstPoint"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Astred.AstLib.AstPoint"/>.</returns>
        </member>
        <member name="P:Astred.AstLib.AstPoint.Origin">
            <summary>
            Returns the origin point of a widened point.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstPoint.BOF">
            <summary>
            Represents the beginning of a file (row 1, column 1).
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstPoint.Zero">
            <summary>
            Represents an unknown <see cref="T:Astred.AstLib.AstPoint"/>.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstLocation">
            <summary>
            Represents an immutable specific <see cref="T:Astred.AstLib.AstPoint"/> in a specific <see cref="T:Astred.AstLib.AstFile"/>.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstLocation.Identifier">
            <summary>
            Access the <see cref="T:Astred.AstLib.AstFileIdentifier"/> of the location.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstLocation.Path">
            <summary>
            Access the path of the file of the location.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstLocation.Point">
            <summary>
            Access the <see cref="T:Astred.AstLib.AstPoint"/> of the Location.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstPoint"/> struct.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLocation.#ctor(Astred.AstLib.AstFileIdentifier,Astred.AstLib.AstPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstLocation"/> struct with the specified file and point.
            </summary>
            <param name="fid">The <see cref="T:Astred.AstLib.AstFileIdentifier"/>.</param>
            <param name="point">The <see cref="T:Astred.AstLib.AstPoint"/>.</param>
        </member>
        <member name="M:Astred.AstLib.AstLocation.#ctor(Astred.AstLib.AstFileIdentifier,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstLocation"/> struct with the specified file, and row and column numbers.
            </summary>
            <param name="fid">The <see cref="T:Astred.AstLib.AstFileIdentifier"/>.</param>
            <param name="row">The row number. This value is 1-based, in other words, the first row of a file is 1.</param>
            <param name="col">The column number. This value is 1-based, in other words, the first column of a row is 1.</param>
        </member>
        <member name="P:Astred.AstLib.AstLocation.Zero">
            <summary>
            Represents an unknown <see cref="T:Astred.AstLib.AstPoint"/>.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLocation.IsZero">
            <summary>
            Indicates whether the <see cref="T:Astred.AstLib.AstLocation"/> is AstLocation.Zero.
            </summary>
            <returns>Returns true if is AstLocation.Zero, otherwise false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.CompareTo(Astred.AstLib.AstLocation)">
            <summary>
            Compares the current instance with another <see cref="T:Astred.AstLib.AstLocation"/> and returns an integer that indicates
            whether the current instance precedes, follows, or is the same as the other <see cref="T:Astred.AstLib.AstPoint"/>.
            </summary>
            <param name="other">An <see cref="T:Astred.AstLib.AstLocation"/> to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.Equals(Astred.AstLib.AstLocation,Astred.AstLib.AstLocation)">
            <summary>
            Indicates whether the specified <see cref="T:Astred.AstLib.AstLocation"/> instances are equal.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <returns>true if the specified <see cref="T:Astred.AstLib.AstLocation"/> instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.Equals(System.Object)">
            <summary>
            Indicates whether the specified <see cref="T:Astred.AstLib.AstLocation"/> instances is equal to the argument.
            </summary>
            <param name="obj">object to compare.</param>
            <returns>true if the specified object is an <see cref="T:Astred.AstLib.AstLocation"/> of equal value; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.GetHashCode(Astred.AstLib.AstLocation)">
            <summary>
            Returns a hash code for the specified <see cref="T:Astred.AstLib.AstLocation"/>.
            </summary>
            <param name="x">The <see cref="T:Astred.AstLib.AstLocation"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified <see cref="T:Astred.AstLib.AstLocation"/>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.GetHashCode">
            <summary>
            Returns a hash code for the instance of <see cref="T:Astred.AstLib.AstLocation"/>.
            </summary>
            <returns>A hash code for the specified <see cref="T:Astred.AstLib.AstLocation"/>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.Min(Astred.AstLib.AstLocation,Astred.AstLib.AstLocation)">
            <summary>
            Returns the smaller of two AstLocations.
            </summary>
            <param name="x">The first of two AstLocations to compare.</param>
            <param name="y">The second of two AstLocations to compare.</param>
            <returns>The smaller of the two AstLocations.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.Max(Astred.AstLib.AstLocation,Astred.AstLib.AstLocation)">
            <summary>
            Returns the larger of two AstLocations.
            </summary>
            <param name="x">The first of two AstLocations to compare.</param>
            <param name="y">The second of two AstLocations to compare.</param>
            <returns>The larger of the two AstLocations.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.op_Equality(Astred.AstLib.AstLocation,Astred.AstLib.AstLocation)">
            <summary>
            Indicates whether two specified <see cref="T:Astred.AstLib.AstLocation"/> instances have the same value.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is the same as the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.op_Inequality(Astred.AstLib.AstLocation,Astred.AstLib.AstLocation)">
            <summary>
            Indicates whether two specified <see cref="T:Astred.AstLib.AstLocation"/> instances have different values.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is different from the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.op_LessThan(Astred.AstLib.AstLocation,Astred.AstLib.AstLocation)">
            <summary>
            Indicates whether the first specified <see cref="T:Astred.AstLib.AstPoint"/> instances is an less than or equal the value of the second.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is less than the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.op_LessThanOrEqual(Astred.AstLib.AstLocation,Astred.AstLib.AstLocation)">
            <summary>
            Indicates whether the first specified <see cref="T:Astred.AstLib.AstPoint"/> instances is less than the value of second.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is less than or equal to the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.op_GreaterThan(Astred.AstLib.AstLocation,Astred.AstLib.AstLocation)">
            <summary>
            Indicates whether the first specified <see cref="T:Astred.AstLib.AstLocation"/> instances is an greater than or equal the value of the second.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is greater than the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.op_GreaterThanOrEqual(Astred.AstLib.AstLocation,Astred.AstLib.AstLocation)">
            <summary>
            Indicates whether the first specified <see cref="T:Astred.AstLib.AstLocation"/> instances is greater than the value of second.
            </summary>
            <param name="x">The first <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <param name="y">The second <see cref="T:Astred.AstLib.AstLocation"/> to compare.</param>
            <returns>true if the value of <paramref name="x"/> is greater than or equal to the value of <paramref name="y"/>; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLocation.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Astred.AstLib.AstLocation"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Astred.AstLib.AstLocation"/>.</returns>
        </member>
        <member name="T:Astred.AstLib.AstFileIdentifier">
            <summary>
            Represents a file used in parsing.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileIdentifier.Path">
            <summary>
            The full local path of the file.
            </summary>
            <remarks>Full path, case preserving.</remarks>
        </member>
        <member name="P:Astred.AstLib.AstFileIdentifier.Hash">
            <summary>
            The hash of the file's content.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileIdentifier.#ctor(System.String,Astred.AstLib.AstFileHash)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFileIdentifier"/> class with the specified path and hash.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileIdentifier.GetAsIdentifierPath(System.String)">
            <summary>
            Convert a path to an identifier path--a full path with case preserved.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>The identifier path.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileIdentifier.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Astred.AstLib.AstFileIdentifier"/> primarily for debugging.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileIdentifier.IsTemporary">
            <summary>
            Indicates whether the file is temporary (and should not be cached).
            </summary>
            <returns>true if the file is temporary; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileIdentifier.CompareTo(Astred.AstLib.AstFileIdentifier)">
            <summary>
            Compares the current instance with another <see cref="T:Astred.AstLib.AstFileIdentifier"/> and returns an integer that indicates
            whether the current instance precedes, follows, or is equal to the other <see cref="T:Astred.AstLib.AstFileIdentifier"/>.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileIdentifier.Equals(Astred.AstLib.AstFileIdentifier,Astred.AstLib.AstFileIdentifier)">
            <summary>
            Indicates whether the specified <see cref="T:Astred.AstLib.AstFileIdentifier"/> instances are equal.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileIdentifier.GetHashCode(Astred.AstLib.AstFileIdentifier)">
            <summary>
            Returns a hash code for the specified <see cref="T:Astred.AstLib.AstFileIdentifier"/>.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstFileHash">
            <summary>
            Represents a hash of a file's content.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileHash.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFileHash"/> class from a SHA-256 hash and its last write time.
            </summary>
            <param name="sha256">The SHA-256 hash of the file's content.</param>
            <param name="written">The last write time of the file.</param>
        </member>
        <member name="M:Astred.AstLib.AstFileHash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFileHash"/> class.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileHash.FromFile(System.String)">
            <summary>
            Gets the SHA-256 hash of the file's content.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The SHA-256 hash of the file's content.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileHash.CompareTo(Astred.AstLib.AstFileHash)">
            <summary>
            Compares the current instance with another <see cref="T:Astred.AstLib.AstFileHash"/> and returns an integer that indicates
            whether the current instance precedes, follows, or is equal to the other <see cref="T:Astred.AstLib.AstFileHash"/>.
            </summary>
            <param name="other">An <see cref="T:Astred.AstLib.AstFileHash"/> to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileHash.CompareTo(System.DateTime)">
            <summary>
            Compares the write time of the instance with a <see cref="T:System.DateTime"/> and returns an integer that indicates
            whether the write time of the current instance precedes, follows, or occurs at the same time as the <see cref="T:System.DateTime"/>.
            </summary>
            <param name="other">An <see cref="T:Astred.AstLib.AstFileHash"/> to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileHash.Equals(Astred.AstLib.AstFileHash,Astred.AstLib.AstFileHash)">
            <summary>
            Indicates whether the specified <see cref="T:Astred.AstLib.AstFileHash"/> instances are equal.
            </summary>
            <param name="x">First instance.</param>
            <param name="y">Second instance.</param>
            <returns></returns>
        </member>
        <member name="M:Astred.AstLib.AstFileHash.GetHashCode(Astred.AstLib.AstFileHash)">
            <summary>
            Returns a hash code for the specified <see cref="T:Astred.AstLib.AstFileHash"/>.
            </summary>
            <param name="x">The AstFileHash</param>
            <returns>An integer hash code for the object.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileHash.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Astred.AstLib.AstFileHash"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Astred.AstLib.AstFileHash"/>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileHash.ToString8">
            <summary>
            Return a string that represents the first 8 characters of the hash.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstFileCache">
            <summary>
            Cache of all loaded file. Used to ensure that we don't load the same file multiple times.
            File paths are case-insensitive.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstFileCache.ids">
            <remarks>Path case is preserved.</remarks>
        </member>
        <member name="F:Astred.AstLib.AstFileCache.cache">
            <remarks>Path case changed to is lower-case.</remarks>
        </member>
        <member name="F:Astred.AstLib.AstFileCache.directories">
            <remarks>Path case changed to is lower-case.</remarks>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.Update(System.Collections.Generic.IReadOnlyList{Astred.AstLib.AstFileIdentifier})">
            <summary>
            Updates the file cache with latest contents from the file system.
            </summary>
            <param name="files">Optional list of  files to check for updates.</param>
            <returns>The list of files that were updated in cache.</returns>
            <remarks>If 'files' is null, check the the entire cache.</remarks>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.GetFile(System.String)">
            <summary>
            Gets the file for the specified path.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file with the specified path, or null if the file is not in the cache.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.GetFile(Astred.AstLib.AstFileIdentifier)">
            <summary>
            Gets the file with the specified <see cref="T:Astred.AstLib.AstFileIdentifier"/>.
            </summary>
            <param name="identifier">The file's <see cref="T:Astred.AstLib.AstFileIdentifier"/>.</param>
            <returns>The file with the specified <see cref="T:Astred.AstLib.AstFileIdentifier"/>, or null if the file is not in the cache.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.GetIdentifier(System.String)">
            <summary>
            Gets the file hash for the specified path.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file hash for the specified path, or null if the hash is not in the cache.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.AddIdentifier(Astred.AstLib.AstFileIdentifier)">
            <summary>
            Adds a file identifier to the memory cache from the file system cache.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.DefineFileIdentifier(System.String,Astred.AstLib.AstFileHash)">
            <summary>
            Creates a new file identifier for the specified path (or returns the existing file identifier).
            </summary>
            <param name="path">The file path.</param>
            <param name="hash">The file hash.</param>
            <returns>The file identifier for the specified path, or null if the identifier is not in the cache.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.DefineFileIdentifier(Astred.AstLib.AstFileIdentifier,Astred.AstLib.AstFileHash)">
            <summary>
            Creates a new file identifier for the specified path (or returns the existing file identifier).
            </summary>
            <param name="other">The file path.</param>
            <param name="hash">The file hash.</param>
            <returns>The file identifier for the specified path, or null if the identifier is not in the cache.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.FileExists(System.String)">
            <summary>
            Determines whether the file exists in the cache.
            </summary>
            <param name="path">The file path.</param>
            <returns>True if the file exists in the cache; otherwise, false.</returns>
            <remarks>Check for the file using its path and its full path.</remarks>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.DirectoryExists(System.String)">
            <summary>
            Determines whether the directory exists in the cache.
            </summary>
            <param name="path">The directory path.</param>
            <returns>True if the directory exists in the cache; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.AddFile(Astred.AstLib.AstFile)">
            <summary>
            Adds a file to the cache.
            </summary>
            <param name="file">The file to add.</param>
            <remarks>
            The file is added to the cache using its path and its full path.
            </remarks>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.ReplaceFile(Astred.AstLib.AstFile,Astred.AstLib.AstFile)">
            <summary>
            Replaces a file in the cache with a new file.
            </summary>
            <param name="oldFile">The file to replace.</param>
            <param name="newFile">The new file.</param>
            <remarks>
            The file is replaced in the cache using its path and its full path.
            </remarks>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.ReplaceFile(Astred.AstLib.AstFileIdentifier,Astred.AstLib.AstFile)">
            <summary>
            Updates an old file from its AstFileIdentifier with the new file.
            </summary>
            <param name="oldFile">The identifier of the file to replace.</param>
            <param name="newFile">The new file.</param>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.RemoveFile(Astred.AstLib.AstFile)">
            <summary>
            Removes a file from the cache.
            </summary>
            <param name="file">The file to remove.</param>
            <remarks>
            The file is removed from the cache using its path and its full path.
            </remarks>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.AllFiles">
            <summary>
            Gets all files in the cache, sorted by path.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileCache.AllFileHashes">
            <summary>
            Gets a dictionary of all file hashes in the cache.
            </summary>
            <returns>The new dictionary.</returns>
        </member>
        <member name="T:Astred.AstLib.AstDataCache">
            <summary>
            Functions to access AST-related cache files.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstDataCache.WriteJsonAtomic(Astred.AstLib.AstFileHash,System.String,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes JSON data to a cache file atomically.
            </summary>
            <param name="hash">The hash of the object we're caching.</param>
            <param name="ext">The file extension.</param>
            <param name="data">The data to write.</param>
            <param name="jsonOptions">Optional JSON serializer options.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstDataCache.CacheFileName(Astred.AstLib.AstFileHash,System.String)">
            <summary>
            Gets the cache file name for the specified hash and extension.
            </summary>
            <param name="hash">The hash of the object we're caching.</param>
            <param name="ext">The file extension.</param>
            <returns>The cache file name.</returns>
        </member>
        <member name="T:Astred.AstLib.AstFile">
            <summary>
            Represents a file underlying an abstract syntax tree (AST). Caches the file's path, text content, and line information.
            </summary>
            <remarks>
            The AstFile class is a fundamental part of the AST framework, providing the raw text content of a file and methods to access it efficiently.
            It is used throughout the parsing and processing stages to reference specific parts of the source code.
            </remarks>
        </member>
        <member name="F:Astred.AstLib.AstFile.cache">
            <summary>
            Cache used to ensure that we load each file exactly once. File paths are case-insensitive.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstFile.implicitFile">
            <summary>
            The implicit file is used for the implicit types and constants.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFile.Path">
            <summary>
            The file path as declared locally.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFile.Version">
            <summary>
            Gets the version of the file. The version is incremented each time through <see cref="M:Astred.AstLib.AstFile.ApplyEdits(Astred.AstLib.AstFileEdits)"/> .
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFile.Identifier">
            <summary>
            The fully scoped identifier of the file and its contents.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFile.Text">
            <summary>
            Gets the text content of the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFile.Length">
            <summary>
            Gets the length of the text content.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFile.LineCount">
            <summary>
            Gets the number of lines in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFile.Beg">
            <summary>
            Gets the starting point of the file in terms of line and column numbers.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFile.End">
            <summary>
            Gets the end point of the file in terms of line and column numbers.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFile.Id">
            <summary>
            A unique identifier for this symbol. Should be used *ONLY* for debugging and testing.
            Ids are stable across executions.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFile.FileSystemStatus">
            <summary>
            Indicates if a file has been modified in the filesystem
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstFile.watcher">
            <summary>
            Holds the file system watcher for the file.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstFile.lines">
            <summary>
            Offsets for the end of each line.
            </summary>
            <remarks>The beginning line n is lines[n-1] and the end of line n is lines[n]. Line n is 1 based.</remarks>
        </member>
        <member name="M:Astred.AstLib.AstFile.IsCached(System.String)">
            <summary>
            Determines whether the file is already cached.
            </summary>
            <param name="path">The file path.</param>
            <returns>True if the file is already cached; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.FileExists(System.String)">
            <summary>
            Determines whether the file exists, either in the cache or on disk.
            </summary>
            <param name="path">The file path.</param>
            <returns>True if the file is exists; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.DirectoryExists(System.String)">
            <summary>
            Determines whether the file exists, either in the cache or on disk.
            </summary>
            <param name="path">The file path.</param>
            <returns>True if the file is exists; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.LoadFileIdentifier(System.String)">
            <summary>
            Retrieves an instance of the <see cref="T:Astred.AstLib.AstFileIdentifier"/> class with the specified path.
            If the identifier is not in the cache, it is created from the file.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file identifier for the specified path, or null if the file does not exist.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.LoadFileIdentifier(System.String,Astred.AstLib.AstFileHash)">
            <summary>
            Creates or retrieves an instance of the <see cref="T:Astred.AstLib.AstFileIdentifier"/> class with the specified path.
            If the identifier doesn't exist, it is created from the specified path and <see cref="T:Astred.AstLib.AstFileHash"/>.
            </summary>
            <param name="path">The file path.</param>
            <param name="hash">The <see cref="T:Astred.AstLib.AstFileHash"/> of the file</param>
            <returns>The file identifier for the specified path.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.LoadFile(System.String)">
            <summary>
            Retrieves an instance of the <see cref="T:Astred.AstLib.AstFile"/> class with the specified path.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file for the specified path, or null if the file does not exist.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.LoadFile(Astred.AstLib.AstFileIdentifier)">
            <summary>
            Retrieves an instance of the <see cref="T:Astred.AstLib.AstFile"/> class for the speified <see cref="T:Astred.AstLib.AstFileIdentifier"/>.
            </summary>
            <param name="fid">The file identifier.</param>
            <returns>The file for the specified identifier, or null if the file does not exist.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.LoadFile(System.String,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFile"/> class with the specified path, setting its text content.
            </summary>
            <param name="path">The file path.</param>
            <param name="written">The last time the file was written to.</param>
            <param name="text">The text content of the file.</param>
            <returns>Return the <see cref="T:Astred.AstLib.AstFile"/> object for the path.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.LoadFile(Astred.AstLib.AstFile,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFile"/> class with the specified path, setting its text content.
            </summary>
            <param name="other">Existing class to clone.</param>
            <param name="text">The text content of the file.</param>
            <returns>Return the <see cref="T:Astred.AstLib.AstFile"/> object for the path.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.LoadFile(Astred.AstLib.AstFile,System.Collections.Generic.List{Astred.AstLib.AstTextExtentAt})">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFile"/> class with the specified path, setting its text content.
            </summary>
            <param name="other">Existing class to clone.</param>
            <param name="extents">The extent content of the file.</param>
            <returns>Return the <see cref="T:Astred.AstLib.AstFile"/> object for the path.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.RemoveFile(Astred.AstLib.AstFile)">
            <summary>
            Remove a file from the cache.
            </summary>
            <param name="file">The file to remove</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.LoadImplicitFile">
            <summary>
            Retrieves an instance universal "implicit" instead of the <see cref="T:Astred.AstLib.AstFile"/> class.
            </summary>
            <returns>Return the implicit <see cref="T:Astred.AstLib.AstFile"/> object.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.ClearCache">
            <summary>
            Clears the cache of all loaded files. Used between tests.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFile.UpdateCache">
            <summary>
            Updates the file cache with the latest contents from the file system.
            </summary>
            <returns>The list of files that were refreshed in cache.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.UpdateFilesInCache(System.Collections.Generic.IReadOnlyList{Astred.AstLib.AstFileIdentifier})">
            <summary>
            Updates the file cache with the latest contents from the file system.
            </summary>
            <param name="files">list of files to check for updates.</param>
            <returns>The list of files that were updated in cache.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.SaveHashCache">
            <summary>
            Save the hash cache.
            </summary>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.ReloadHashCache">
            <summary>
            Reload the hash cache.
            </summary>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.ReplaceFile(Astred.AstLib.AstFile,Astred.AstLib.AstFile)">
            <summary>
            Replaces an old AST file with a new one in the cache.
            </summary>
            <param name="oldFile">The old AST file to be replaced.</param>
            <param name="newFile">The new AST file</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.BuildWatcher(Astred.AstLib.AstFile)">
            <summary>
            Creates and configures a FileSystemWatcher for a given AstFile.
            </summary>
            <param name="file">The AstFile to monitor.</param>
            <returns>
            A configured FileSystemWatcher instance if the file exists in the filesystem, otherwise null.
            </returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.#ctor(System.String,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFile"/> class with the specified path and text content.
            </summary>
            <param name="path">The file path.</param>
            <param name="written">The last time the file was written to.</param>
            <param name="text">The text content of the file.</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.#ctor(Astred.AstLib.AstFileIdentifier,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFile"/> class with the specified path and text content.
            </summary>
            <param name="fid">The file identifer <see cref="T:Astred.AstLib.AstFileIdentifier"/>.</param>
            <param name="written">The last time the file was written to.</param>
            <param name="text">The text content of the file.</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.#ctor(Astred.AstLib.AstFile,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFile"/> class from an existing class and a new text content.
            </summary>
            <param name="other">Existing class to clone.</param>
            <param name="written">The last time the file was written to.</param>
            <param name="text">The text content of the file.</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.#ctor(Astred.AstLib.AstFile,System.DateTime,System.Collections.Generic.List{Astred.AstLib.AstTextExtentAt})">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFile"/> class from an existing class and a new text content.
            </summary>
            <param name="other">Existing class to clone.</param>
            <param name="written">The last time the file was written to.</param>
            <param name="extents">The list of text extents to initialize the file with.</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.ApplyEdits(Astred.AstLib.AstFileEdits)">
            <summary>
            Create a new AstFile by applying a list of edits to the current file.
            </summary>
            <param name="editGroup">The list of edits to apply to the file.</param>
            <returns>A new AstFile with the edits applied.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.AppendLinesTo(System.Text.StringBuilder,Astred.AstLib.AstSliceSet,System.Boolean)">
            <summary>
            Appends the textual representation of each slice in the provided list to the specified StringBuilder.
            </summary>
            <param name="sb">The string builder to which the formatted node is appended.</param>
            <param name="slices">The slice of AST slices to be converted to strings and appended to the StringBuilder.</param>
            <param name="number">Indicates whether to number the lines in the output.</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.AppendLinesTo(System.Text.StringBuilder,System.Collections.Generic.List{Astred.AstLib.AstSlice},System.Boolean)">
            <summary>
            Appends the textual representation of each slice in the provided list to the specified StringBuilder.
            </summary>
            <param name="sb">The string builder to which the formatted node is appended.</param>
            <param name="slices">A sorted list of AST slices to be converted to strings and appended to the StringBuilder.</param>
            <param name="number">Indicates whether to number the lines in the output.</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.GetLocation(Astred.AstLib.AstPoint)">
            <summary>
            Create a new AstLocation for the specified point in the file.
            </summary>
            <param name="point">The point to reference.</param>
            <returns>The new AstLocation.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.GetLocationAt(System.Int32)">
            <summary>
            Create a new AstLocation for the specified row in the file.
            </summary>
            <param name="row">The row to reference.</param>
            <returns>The new AstLocation.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.GetText(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint,System.Int32,System.Boolean)">
            <summary>
            Retrieves the text content friom the specified beginning point to the ending point, with an optional maximum length.
            </summary>
            <param name="begrc">The beginning point in the file.</param>
            <param name="endrc">The ending point in the file.</param>
            <param name="max">The maximum length of text to retrieve. If -1, no maximum is applied.</param>
            <param name="escape">Indicates whether to escape special characters in the text.</param>
            <returns>The text content between the specified points.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.GetText(Astred.AstLib.AstNodeBase,System.Int32,System.Boolean)">
            <summary>
            Retrieves the text content for a specific AST node, with an optional maximum length and escape option.
            </summary>
            <param name="node">The AST node for which to retrieve text.</param>
            <param name="max">The maximum length of text to retrieve. If -1, no maximum is applied.</param>
            <param name="escape">Indicates whether to escape special characters in the text.</param>
            <returns>The text content for the specified AST node.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.GetOriginText(Astred.AstLib.AstNodeBase,System.Int32,System.Boolean)">
            <summary>
            Retrieves the text content for a specific AST node, with an optional maximum length and escape option.
            </summary>
            <param name="node">The AST node for which to retrieve text.</param>
            <param name="max">The maximum length of text to retrieve. If -1, no maximum is applied.</param>
            <param name="escape">Indicates whether to escape special characters in the text.</param>
            <returns>The text content for the specified AST node.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.GetTextForLine(System.Int32)">
            <summary>
            Retrieves the text content for a specific line number in the file.
            </summary>
            <param name="row">The line number for which to retrieve text.</param>
            <returns>The text content for the specified line number.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.GetTextForLineAtPoint(Astred.AstLib.AstPoint)">
            <summary>
            Retrieves the text content for the line at the specified point.
            </summary>
            <param name="rc">The point at which to retrieve the line text.</param>
            <returns>The text content for the line at the specified point.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.AppendTextForLine(System.Text.StringBuilder,System.Int32)">
            <summary>
            Append the text content for a specific line number in the file to a StringBuilder.
            </summary>
            <param name="sb">The string builder to which the text content is appended.</param>
            <param name="row">The line number for which to retrieve text.</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.AppendTextForLines(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Append the text content for a specific line numbers in the file to a StringBuilder.
            </summary>
            <param name="sb">The string builder to which the text content is appended.</param>
            <param name="begr">The beginning line number for which to retrieve text.</param>
            <param name="endr">The ending line number for which to retrieve text.
            Text for the ending line is NOT included.</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.AppendTextForLineAtPoint(System.Text.StringBuilder,Astred.AstLib.AstPoint)">
            <summary>
            Append the text content for the line at the specified point to a StringBuilder.
            </summary>
            <param name="sb">The string builder to which the text content is appended.</param>
            <param name="rc">The point at which to retrieve the line text.</param>
        </member>
        <member name="M:Astred.AstLib.AstFile.OffsetOf(Astred.AstLib.AstPoint)">
            <summary>
            Calculates the offset position in the file text for the given point.
            </summary>
            <param name="rc">The point for which to calculate the offset.</param>
            <returns>The offset position in the file text.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.OffsetOf(System.Int32)">
            <summary>
            Calculates the offset position in the file text for the given row.
            </summary>
            <param name="row">The row for which to calculate the offset.</param>
            <returns>The offset position in the file text.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.ValidatePoint(Astred.AstLib.AstPoint)">
            <summary>
            Verifies that the point is a valid position in the file.
            </summary>
            <param name="rc">The point to valid.</param>
            <returns>True if the point is valid, false if it is invalid.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.ToString">
            <summary>
            Returns a string representation of the key file information formatted for debugging.
            </summary>
            <returns>A string representation of the file.</returns>
        </member>
        <member name="M:Astred.AstLib.AstFile.FileUpdated(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Updates the <see cref="P:Astred.AstLib.AstFile.FileSystemStatus"/> property based on the file system event.
            </summary>
            <param name="sender">The FileSystemWatcher taht sent the event</param>
            <param name="e">The FileSystemEventArgs object</param>
        </member>
        <member name="T:Astred.AstLib.AstTextExtent">
            <summary>
            Represents a text extent in a file, including the text content, beginning and ending offsets, and line information.
            An AstFile can contain multiple AstTextExtents.  Each AstTextExtent can be used to represent a region of text in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtent.Text">
            <summary>
            Gets the text content of the extent.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtent.Begin">
            <summary>
            Gets the beginning offset of the extent.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtent.End">
            <summary>
            Gets the ending offset of the extent.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtent.Length">
            <summary>
            Gets the length of the extent.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtent.LineCount">
            <summary>
            Gets the number of lines in the extent.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtent.LineOffsets">
            <summary>
            Gets the line offsets for the extent.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstTextExtent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstTextExtent"/> class with the specified text content.
            </summary>
            <param name="text">The text content of the extent.</param>
        </member>
        <member name="M:Astred.AstLib.AstTextExtent.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstTextExtent"/> class with the specified text content, beginning offset, and length.
            </summary>
            <param name="text">The text content of the extent.</param>
            <param name="offset">The beginning offset of the extent.</param>
            <param name="length">The length of the extent.</param>
        </member>
        <member name="M:Astred.AstLib.AstTextExtent.#ctor(Astred.AstLib.AstTextExtent,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Astred.AstLib.AstTextExtent"/> from existing <see cref="T:Astred.AstLib.AstTextExtent"/>.
            </summary>
            <param name="other">The existing <see cref="T:Astred.AstLib.AstTextExtent"/> to clone.</param>
            <param name="begr">The beginning line number from which  to start this extent from the other.</param>
            <param name="endr">The ending line number to end this extent from the other.</param>
        </member>
        <member name="M:Astred.AstLib.AstTextExtent.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstTextExtent"/> class with the specified list of lines.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstTextExtent.OffsetOfLine(System.Int32)">
            <summary>
            Returns the offset of the specified line number.
            </summary>
            <param name="line">The line number for which to retrieve the offset.</param>
            <returns>The offset of the specified line number.</returns>
        </member>
        <member name="M:Astred.AstLib.AstTextExtent.GetText">
            <summary>
            Returns the text content for the specified line number.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstTextExtent.ToString">
            <summary>
            Returns a string representation of the extent formatted for debugging.
            </summary>
            <returns>A string representation of the extent.</returns>
        </member>
        <member name="T:Astred.AstLib.AstTextExtentAt">
            <summary>
            Represents a text extent in a file at a specific position, including the extent itself and the position.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.Extent">
            <summary>
            Gets the text extent at the specified position.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.Pos">
            <summary>
            Gets the position of the extent in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.Row">
            <summary>
            Gets the row of the extent in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.Beg">
            <summary>
            Gets the beginning offset of the extent in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.End">
            <summary>
            Gets the ending offset of the extent in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.Begr">
            <summary>
            Gets the beginning line of the extent in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.Endr">
            <summary>
            Gets the ending line of the extent in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.Begrc">
            <summary>
            Gets the beginning point of the extent in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.Endrc">
            <summary>
            Gets the ending point of the extent in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.LineCount">
            <summary>
            Gets the number of lines in the extent.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTextExtentAt.Length">
            <summary>
            Gets the length of the extent.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstTextExtentAt.#ctor(System.Int32,System.Int32,Astred.AstLib.AstTextExtent)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstTextExtentAt"/> class with the specified position, row, and extent.
            </summary>
            <param name="pos"></param>
            <param name="row"></param>
            <param name="extent"></param>
        </member>
        <member name="M:Astred.AstLib.AstTextExtentAt.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstTextExtentAt"/> class with the specified text content.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstTextExtentAt.ToString">
            <summary>
            Returns a string representation of the extent formatted for debugging.
            </summary>
            <returns>A string representation of the extent.</returns>
        </member>
        <member name="T:Astred.AstLib.AstFileBuilder">
            <summary>
            The AstFileBuilder class supports constructing a new string representation of a file's content,
            along with tracking the current row and column position within the file. It provides methods to append
            content, append content at a specific position, and retrieve the current position as an AstPoint.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstFileBuilder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstFileBuilder"/> class with an optional initial size.
            </summary>
            <param name="size">The initial size of the internal StringBuilder to optimize memory usage.</param>
        </member>
        <member name="M:Astred.AstLib.AstFileBuilder.Append(System.String)">
            <summary>
            Appends the given content to the file, updating the row and column position accordingly.
            </summary>
            <param name="content">The content to append to the file.</param>
        </member>
        <member name="M:Astred.AstLib.AstFileBuilder.Append(System.Char,System.Int32)">
            <summary>
            Appends the given character to the file a specified number of times, updating the row and column position accordingly.
            </summary>
            <param name="content">The character to append to the file.</param>
            <param name="count">The number of times to append the character.</param>
        </member>
        <member name="M:Astred.AstLib.AstFileBuilder.AppendAt(System.String,Astred.AstLib.AstPoint@,Astred.AstLib.AstPoint@)">
            <summary>
            Appends the given content at the current position and returns the beginning and ending points of the appended content.
            </summary>
            <param name="content">The content to append to the file.</param>
            <param name="beg">The beginning point of the appended content.</param>
            <param name="end">The ending point of the appended content.</param>
        </member>
        <member name="M:Astred.AstLib.AstFileBuilder.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Astred.AstLib.AstFileBuilder"/>. Format is optimized for internal debugging.
            </summary>
            <returns>A string that represents the current <see cref="T:Astred.AstLib.AstFileBuilder"/>.</returns>
        </member>
        <member name="P:Astred.AstLib.AstFileBuilder.TsPoint">
            <summary>
            Gets the TreeSitter point representing the current position in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileBuilder.Byte">
            <summary>
            Gets the byte offset representing the current position in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileBuilder.Length">
            <summary>
            Gets the length of the current content of the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstFileBuilder.Point">
            <summary>
            Gets the current end-of-file position as an AstPoint.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstRegionType">
            <summary>
            Represents the type of a region used to constract the processed view of an <see cref="T:Astred.AstLib.AstFile"/>.
            This enum represents different types of regions of an <see cref="T:Astred.AstLib.AstFile"/> parsed to construct an abstract syntax tree (AST).
            These regions are used to categorize parts of the source code during the parsing and processing stages.
            The enum values are used as flags to indicate the nature of the region, such as whether it contains direct text from a file,
            text that has been replaced, text inserted by the preprocessor, skipped text due to preprocessor directives, or redacted text.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstRegionType.None">
            <summary>
            Indicates that the region is not specified.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstRegionType.Direct">
            <summary>
            Indicates that the region contains direct text from a file to be given as-is to an AST parser.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstRegionType.Replaced">
            <summary>
            Indicates that the region contains text from a file that has been replaced by other text.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstRegionType.Inserted">
            <summary>
            Indicates that the region contains text that was inserted by the preprocessor.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstRegionType.Skipped">
            <summary>
            Indicates that the region contains text from a file that was skipped because it is preprocessor code.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstRegionType.Redacted">
            <summary>
            Indicates that the region contains text from a file that was redacted by the preprocessor code.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstRegion">
            <summary>
            Represents a region of text in the source code. This is the base class for different types of regions
            such as file regions, text regions, and others. Regions are used during the parsing and processing of
            the abstract syntax tree (AST) to categorize parts of the source code.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.RegionType">
            <summary>
            Gets the type of the region, which indicates the nature of the region such as direct text, replaced text,
            inserted text, skipped text, or redacted text.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.Beg">
            <summary>
            Gets the beginning byte offset of the region relative to the start of the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.End">
            <summary>
            Gets the ending byte offset of the region relative to the start of the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.Begrc">
            <summary>
            Gets the beginning point of the region in the source code of the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.Endrc">
            <summary>
            Gets the ending point of the region in the source code of the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.ParsedBegrc">
            <summary>
            Gets the beginning point of the region as it will be parsed.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.ParsedEndrc">
            <summary>
            Gets the ending point of the region as it will be parsed.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.Offset">
            <summary>
            Gets the byte offset of this region within the region's backing store.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.Irow">
            <summary>
            Gets the row number relative to the start of this region's backing store.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.Extent">
            <summary>
            Gets the underlying extent for this region.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstRegion.#ctor(Astred.AstLib.AstRegionType,System.Int32,System.Int32,Astred.AstLib.AstPoint,System.Int32,System.Int32,Astred.AstLib.AstTextExtentAt)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstRegion"/> class with the specified type, beginning offset,
            ending offset, beginning point, offset, and internal row number.
            </summary>
            <param name="type">The type of the region.</param>
            <param name="beg">The beginning byte offset of the region in the total source code of the compilation unit..</param>
            <param name="end">The ending byte offset of the region in the total source code of the compilation unit..</param>
            <param name="begrc">The beginning point of the region in the total source code of the compilation unit.</param>
            <param name="offset">The byte offset relative to the start of this region's backing store.</param>
            <param name="irow">The row number relative to the start of this region's backing store.</param>
            <param name="extent">Underlying extent for this region.</param>
        </member>
        <member name="M:Astred.AstLib.AstRegion.SetEnd(System.Int32,Astred.AstLib.AstPoint)">
            <summary>
            Sets the ending offset and point of the region.
            </summary>
            <param name="length">The length of the region.</param>
            <param name="rc">The ending point of the region in the source code.</param>
        </member>
        <member name="M:Astred.AstLib.AstRegion.SpanOfRegion">
            <summary>
            Retrieves the text from the region.
            </summary>
            <returns>The text contained within the region.</returns>
        </member>
        <member name="M:Astred.AstLib.AstRegion.SpanFromRegion(System.Int32,System.Int32)">
            <summary>
            Retrieves the text from the region between the specified beginning and ending points.
            </summary>
            <param name="begx">The beginning position within the region.</param>
            <param name="endx">The ending position within the region.</param>
            <returns>The text contained within the specified range of the region as a span.</returns>
        </member>
        <member name="M:Astred.AstLib.AstRegion.CharFromRegion(System.Int32)">
            <summary>
            Retrieves a single character from the region at the specified offset.
            </summary>
            <param name="begx">The offset within the region.</param>
            <returns>The character at the specified offset within the region.</returns>
        </member>
        <member name="P:Astred.AstLib.AstRegion.Path">
            <summary>
            Gets the file path associated with the region.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.Buffer">
            <summary>
            Gets the text content associated with the region.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstRegion.Length">
            <summary>
            Gets the length of the region in bytes.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstRegion.PrintRegionText(System.Collections.Generic.List{Astred.AstLib.AstRegion})">
            <summary>
            Print debugging information about a list of regions.
            </summary>
            <param name="regions">The list of regions to print.</param>
        </member>
        <member name="M:Astred.AstLib.AstRegion.PrintRegionText(System.Collections.Generic.List{Astred.AstLib.AstRegion},System.Int32,System.Int32)">
            <summary>
            Print debugging information about a list of regions.
            </summary>
            <param name="regions">The list of regions to print.</param>
            <param name="beg">The beginning index of the region list to print.</param>
            <param name="end">The ending index of the region list to print.</param>
            <remarks>Prints the [beg, end) range of regions.</remarks>]
        </member>
        <member name="T:Astred.AstLib.AstFileStatus">
            <summary>
            Represents the status of an AstFile.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstFileStatus.Unchanged">
            <summary>
            The file has not changed.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstFileStatus.Created">
            <summary>
            The file has been created.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstFileStatus.Deleted">
            <summary>
            The file has been deleted.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstFileStatus.Changed">
            <summary>
            The file has been changed.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstInternalFailureException">
            <summary>
            Thrown when the parser encounters a fatal internal failure.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstInternalFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstInternalFailureException"/> class with the specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Astred.AstLib.AllocateCustom">
            <summary>
            Creates a custom AST node for the specified field and token.
            </summary>
            <param name="context">The AST context in which the node is created.</param>
            <param name="fieldid">The field identifier for the new node.</param>
            <param name="tokenid">The token identifier for the new node.</param>
            <param name="begrc">The beginning point of the new node.</param>
            <param name="endrc">The ending point of the new node.</param>
            <returns>The new AST node.</returns>
        </member>
        <member name="T:Astred.AstLib.FinishInterior">
            <summary>
            Represents a delegate for finishing the processing of a interior AST node.
            </summary>
            <param name="node">The AST node being processed.</param>
            <param name="parent">The parent of the AST node being processed.</param>
            <param name="text">Text if the node is actaully a leaf node, or null if not a leaf node.</param>
            <remarks>
            This delegate is invoked after a interior (non-leaf) AST node's children have been created and processed.
            It allows for additional customization or modification of the node before finalizing its state.
            </remarks>
        </member>
        <member name="T:Astred.AstLib.FinishLeaf">
            <summary>
            Represents a delegate for finishing the processing of a leaf AST node.
            </summary>
            <param name="node">The AST node text being processed.</param>
            <param name="parent">The parent of the AST node text being processed.</param>
            <remarks>
            This delegate is invoked after a leaf AST node has been created.
            It provides an opportunity to perform additional actions or modifications on leaf nodes.
            </remarks>
        </member>
        <member name="T:Astred.AstLib.MatchForMerge">
            <summary>
            Represents a delegate for determining if an AST node should be matched for merging.
            </summary>
            <param name="pnode">The potential parent node in the merge process.</param>
            <param name="node">The node being considered for merging.</param>
            <returns>True if the node should be matched for merging, otherwise false.</returns>
            <remarks>
            This delegate is used during the merging of ASTs to determine if a given node should be matched with a potential parent node.
            The logic within the delegate can be customized to define the criteria for a successful match.
            </remarks>
        </member>
        <member name="T:Astred.AstLib.AstLanguage">
            <summary>
            Abstract class from which all language parsers derive.  This class provides the basic structure for
            parsing and processing ASTs for a specific language.  It includes methods for creating an AST context,
            parsing the AST, finding declarations, and binding symbols.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstLanguage.Language">
            <summary>
            Gets the <see cref="T:Astred.GraphLib.GraphLanguage"/> identifier for this language.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstLanguage.LangName">
            <summary>
            Gets the name of the language as recognized in Markdown.  For example <see cref="T:Astred.AstLib.AstLanguageCSharp"/> returns "C#".
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstLanguage.MetricName">
            <summary>
            Gets the name of the language in valid C identifer characters.  For example, <see cref="T:Astred.AstLib.AstLanguageCSharp"/> returns "c_sharp".
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstLanguage.Extensions">
            <summary>
            Gets the list of file extensions commonly used for the language. For example, <see cref="T:Astred.AstLib.AstLanguageCSharp"/> returns ".cs".
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstLanguage.TokenMap">
            <summary>
            Gets the token map for the language.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstLanguage.Primitives">
            <summary>
            Gets the list of primitive type identifiers for the language.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguage.Initialize">
            <summary>
            Initialize the language parser and all of its resources. Call before using the parser to parse text.
            Can be called multiple times without side effects.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguage.ResetCaches">
            <summary>
            Called, for example by the corpus test harness, to reset any caches that may have been created.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguage.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <summary>
            Creates an AST context for this language for the specified file and unit.
            </summary>
            <param name="file">The <see cref="T:Astred.AstLib.AstFile"/> containing the text to be parsed.</param>
            <param name="unit">The <see cref="T:Astred.GraphLib.GraphContext"/> context used to parse the file.</param>
            <returns>The new AST context.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLanguage.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <summary>
            Parses the text content of the specified file into an abstract syntax tree (AST).
            </summary>
            <param name="root">The root node of the AST to parse into.</param>
            <param name="context">The AST context in which to parse the text.</param>
            <param name="raw">Indicates whether to parse to raw AST nodes instead of performing additional advanced parsing.</param>
            <param name="digest">Only parse enough text to capture a file digest for debugging.</param>
            <returns>The root node of the AST.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLanguage.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <summary>
            Finds the declarations in the specified AST.  Associate them with appropriate scope based at the given global scope.
            </summary>
            <param name="globals">The global scope containing symbols.</param>
            <param name="root">The root node of the AST to search for declarations.</param>
        </member>
        <member name="M:Astred.AstLib.AstLanguage.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <summary>
            Binds all symbols in the specified AST.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguage.ReplaceAndBind(Astred.AstLib.AstScope,Astred.AstLib.AstNode,System.Int32,System.Int32,System.Collections.Generic.List{Astred.AstLib.AstNodeBase})">
            <summary>
            Replaces a range of child nodes in the specified parent node with a new list of nodes and rebinds symbols.
            </summary>
            <param name="globals">The global scope containing symbols.</param>
            <param name="parent">The parent node whose children will be replaced.</param>
            <param name="beg">The beginning index of the range to replace.</param>
            <param name="end">The ending index of the range to replace.</param>
            <param name="list">The list of new nodes to insert.</param>
            <returns>true if the replacement and binding were successful; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstLanguage.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <summary>
            Traverse the children nodes to get the name of the AST node.
            For example, returns a function name given the root of a function even when the name is not a direct child.
            </summary>
            <param name="node"></param>
            <param name="anonymous"></param>
            <returns></returns>
        </member>
        <member name="M:Astred.AstLib.AstLanguage.AddPrimitive(Astred.AstLib.AstContext,Astred.AstLib.AstToken,Astred.AstLib.AstPrimitiveType,System.String,System.String)">
            <summary>
            Creates a primitive (non-parsed) identifier node for the specified field and token.
            </summary>
            <param name="context">The AST context in which the node is created.</param>
            <param name="tokenid">The token identifier for the node.</param>
            <param name="ptid">The primitive type identifier for the node.</param>
            <param name="name">The name of the node.</param>
            <param name="mangled">The mangled name of the node.</param>
        </member>
        <member name="M:Astred.AstLib.AstLanguage.ToString">
            <summary>
            Returns the string representation (for debugging).
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstContext">
            <summary>
            Provides the context in which an AST (Abstract Syntax Tree) is created and processed.
            It connects individual AST nodes to the file and language from which they were created.
            </summary>
            <remarks> This class contains a virtual method Clone that should be overridden by classes that extend AstContext ro return the correct type of context </remarks>
        </member>
        <member name="P:Astred.AstLib.AstContext.Language">
            <summary>
            Gets the Language parser for this AST context.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstContext.File">
            <summary>
            Gets the file from which the AST was or will be parsed, containing the file's path and text content.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstContext.TokenMap">
            <summary>
            Gets the token map used for mapping Tree-sitter tokens to AST tokens.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstContext.Id">
            <summary>
            Gets the unique identifier for the context.
            Should be used *ONLY* for debugging and testing.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstContext.#ctor(Astred.AstLib.AstLanguage,Astred.AstLib.AstTokenMap,Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstContext"/> class with the specified language, token map, and file.
            </summary>
            <param name="language">The language-specific AST processing instance.</param>
            <param name="map">The token map for mapping Tree-sitter tokens to AST tokens.</param>
            <param name="file">The file underlying the AST.</param>
            <param name="unit">The graph unit for the AST.</param>
        </member>
        <member name="M:Astred.AstLib.AstContext.#ctor(Astred.AstLib.AstContext,Astred.AstLib.AstFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstContext"/> class based on another context but with a different file.
            </summary>
            <param name="other">The existing context to base the new context on.</param>
            <param name="file">The new file for the context.</param>
        </member>
        <member name="M:Astred.AstLib.AstContext.Clone(Astred.AstLib.AstFile)">
            <summary>
            Clones the context with a new file.
            This method should be overridden by classes that extend AstContext.
            </summary>
            <param name="file">New file that will be part of the newly created context</param>
            <returns>An ASTContext object using the provided file</returns>
        </member>
        <member name="M:Astred.AstLib.AstContext.ToString">
            <summary>
            Returns a string representation of the context, including the language name and file information,
            formatted for debugging.
            </summary>
            <returns>A string representation of the context.</returns>
        </member>
        <member name="M:Astred.AstLib.AstContext.BuildTree(GitHub.TreeSitter.TSLanguage,System.Collections.Generic.List{Astred.AstLib.AstRegion},System.Collections.Generic.List{Astred.AstLib.AstRegion},Astred.AstLib.AstPoint,Astred.AstLib.AstRegionType,Astred.AstLib.FinishInterior,Astred.AstLib.FinishLeaf,Astred.AstLib.AllocateCustom,System.Boolean)">
            <summary>
            BuildTree uses the tree-sitter cursor to walk the tree and build an Abstract Syntax Tree (AST) graph.
            The method allows for customization and editing of the AST during and after its creation using various parameters.
            </summary>
            <param name="language">The tree-sitter language instance providing the parser state machine information.</param>
            <param name="regions">A list of AstRegion defining the text regions to be parsed.</param>
            <param name="redregions">A list of AstRegion defining the regions of redacted text to be annotated.</param>
            <param name="fileEnd">The end point of the file in terms of line and column numbers.</param>
            <param name="mask">Optional. The AstRegionType mask to define how regions are handled. Default is AstRegionType.Direct.</param>
            <param name="finishInterior">Optional. A delegate called to edit the AST after an interior (non-leaf) node's children are created.</param>
            <param name="finishLeaf">Optional. A delegate called to edit the AST after a leaf node is created.</param>
            <param name="allocCustom">Optional. A delegate called to create any custom AST nodes.</param>
            <param name="raw">Optional. True no language-specific processing should be performed. Default is false.</param>
            <returns>An AstNode representing the root of the constructed AST.</returns>
            <remarks>
            This method internally handles raw parsing mode, file text span extraction, and node creation based on the category of tokens.
            It also provides verbose logging capabilities for debugging purposes.
            </remarks>
        </member>
        <member name="T:Astred.AstLib.AstTokenMap">
            <summary>
            Maps Tree-sitter tokens and fields to AST tokens and fields, and provides methods to retrieve
            token names, field names, and AST node categories based on their identifiers.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstTokenMap.#ctor(Astred.AstLib.AstTokenMapBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstTokenMap"/> class with the specified mappings and names.
            </summary>
            <param name="raw">The underlying token map created by MakeTSMap..</param>
        </member>
        <member name="P:Astred.AstLib.AstTokenMap.TokenCount">
            <summary>
            Gets the number of tokens in the token map.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTokenMap.FieldCount">
            <summary>
            Gets the number of fields in the field map.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstTokenMap.Language">
            <summary>
            Gets the TSLanguage associated with the token map.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstTokenMap.GetFieldValue(System.UInt16)">
            <summary>
            Maps a Tree-sitter field value (aka TSField) to an AST field value.
            </summary>
            <param name="fieldid">The Tree-sitter field identifier.</param>
            <returns>The corresponding AST field value.</returns>
        </member>
        <member name="M:Astred.AstLib.AstTokenMap.GetTokenValue(System.UInt16)">
            <summary>
            Maps a Tree-sitter token value (aka TSSymbol) to an AST token value.
            </summary>
            <param name="tokenid">The Tree-sitter token identifier.</param>
            <returns>The corresponding AST token value.</returns>
        </member>
        <member name="M:Astred.AstLib.AstTokenMap.GetTokenName(Astred.AstLib.AstToken)">
            <summary>
            Retrieves the name of an AST token based on its identifier.
            </summary>
            <param name="tokenid">The AST token identifier.</param>
            <returns>The name of the specified AST token.</returns>
        </member>
        <member name="M:Astred.AstLib.AstTokenMap.GetFieldName(Astred.AstLib.AstField)">
            <summary>
            Retrieves the name of an AST field based on its identifier.
            </summary>
            <param name="fieldid">The AST field identifier.</param>
            <returns>The name of the specified AST field.</returns>
        </member>
        <member name="M:Astred.AstLib.AstTokenMap.TokenToCategory(Astred.AstLib.AstToken)">
            <summary>
            Retrieves the category of an AST token based on its identifier.
            </summary>
            <param name="tokenid">The AST token identifier.</param>
            <returns>The category of the specified AST token.</returns>
        </member>
        <member name="T:Astred.AstLib.AstPrimitiveType">
            <summary>
            Unique primitive identifiers for each Language.
            Indentifier ranges start at -199 and decrement by 100 for each language.
            Please note: enums without assigned values *increment*, but we want to *decrement*.
            Types which are semantically equivalent across languages are given the same identifier.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstCategory">
            <summary>
            The AstCategory enum defines categories for AST nodes, such as interior nodes, text nodes, comments, and
            various types of identifier usages and definitions. It also includes flags for nodes that define a scope
            or are qualified identifiers. The AstCategory for each node is set by a language's AstLanguage implementation.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.Undefined">
            <summary>
            An undefined node.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.Error">
            <summary>
            An error node created by tree-sitter to fixup parsing failures
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.Interior">
            <summary>
            An interior node. Interior nodes general contain other interior nodes and/or leaf nodes.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.Text">
            <summary>
            A leaf node containing text. Only leaf nodes have text.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.Scope">
            <summary>
            An interior node that defines a scope for symbol matching.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.Op">
            <summary>
            A leaf node containing text for an operator.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.Comment">
            <summary>
            A commment
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.TextRaw">
            <summary>
            A leaf node containing raw text. Only used for raw dumping.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.Custom">
            <summary>
            An interior node with custom extensions from the language implementation.
            Will be converted to an Interior node.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.IdentifierUse">
            <summary>
            An basic identifier use of a symbol. Enables language-free processing.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.IdentifierTypeUse">
            <summary>
            A type identifer use of a symbol. Enables language-free processing.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.IdentifierFieldUse">
            <summary>
            A field identifer use of a symbol. Enables language-free processing.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.IdentifierDef">
            <summary>
            A symbol defining identifier. Enables language-free processing.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.IdentifierTypeDef">
            <summary>
            A symbol defining type identifier. Enables language-free processing.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstCategory.IdentifierFieldDef">
            <summary>
            A symbol defining field identifier. Enables language-free processing.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstNodeBase">
             <summary>
             Represents the base class for AST (Abstract Syntax Tree) nodes. It provides common properties and methods
             used by all types of AST nodes, including interior nodes and leaf nodes. This class is abstract and cannot
             be instantiated directly.
            
             Nodes in an AST graph are of two forms: 1) leaf nodes, which contain single units of text, and 2) interior nodes,
             which define higher-level semantic elements. When parsed into an object graph, left nodes derive from the
             AstNodeText class, while interior nodes derive from the AstNode class. The AstNodeBase class is an abstract base,
             which contain operations common to all nodes in the AST.
            
             AstNode classes form the following hierarchy:
             <list type="bullet">
              <item>AstNodeBase: Abstract class from which other nodes in the AST derive.</item>
              <list type="bullet">
               <item>AstNode: An interior node (with children).</item>
               <list type="bullet">
                <item>AstNodeScope: An interior node that defines a new lexical scope for symbols.</item>
               </list>
               <item>AstNodeText: A leaf node containing text.</item>
               <list type="bullet">
                <item>AstNodeId: A leaf node containing a symbol identifier.</item>
                <item>AstNodeOperator: A leaf node containing an operator.</item>
                <item>AstNodeTextRaw: A leaf node containing raw text.</item>
               </list>
              </list>
             </list>
             </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Context">
            <summary>
            The context in which the AST node exists, containing information about the file and language.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Begrc">
            <summary>
            The starting point of the node in the source code, represented by a row and column number.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Endrc">
            <summary>
            The ending point of the node in the source code, represented by a row and column number.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Tokenid">
            <summary>
            The token identifier associated with the node, which represents the type of syntax element.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Fieldid">
            <summary>
            The field identifier associated with the node, which represents the role of the node in its parent.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Category">
            <summary>
            The category of the node, which provides additional semantic information about the node's role in the AST.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Block">
            <summary>
            The block associated to the node, if applicable.
            </summary>      // 1 byte
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.EditStatus">
            <summary>
            The edit status of the node, indicating if the node was added, deleted, modified, or unchanged.
            The modification status is used to track changes of nodes that have
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Text">
            <summary>
            Gets the text associated with the node, if it is a leaf node containing text.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Count">
            <summary>
            Gets the number of child nodes this node has.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Item(System.Int32)">
            <summary>
            Gets or sets a child node at the specified index.
            </summary>
            <param name="index">The index of the child node.</param>
            <returns>The child node at the specified index.</returns>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Parent">
            <summary>
            Gets or sets the parent node of this node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Children">
            <summary>
            Gets an enumerable collection of child nodes.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeBase.Interiors">
            <summary>
            Gets an enumerable collection of child nodes that interior nodes.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.ToString">
            <summary>
            Provides a string representation of the node for debugging purposes.
            </summary>
            <returns>A string that represents the current node.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.GetTokenName">
            <summary>
            Retrieves the name of the token associated with this AST node.
            </summary>
            <returns>The name of the token.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.GetFieldName">
            <summary>
            Retrieves the name of the field associated with this AST node.
            </summary>
            <returns>The name of the field.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.GetText(System.Boolean,System.Boolean)">
            <summary>
            Formats the text for the AST to string.
            </summary>
            <param name="comments">Indicates if comments should be included in the output. Default is true.</param>
            <param name="number">Indicates if lines numbers should be included in the output. Default is true.</param>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.AppendText(System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <summary>
            Formats the text for the AST to a StringBuilder.
            </summary>
            <param name="sb">The StringBuilder to which to append the text.</param>
            <param name="comments">Indicates if comments should be included in the output. Default is true.</param>
            <param name="number">Indicates if lines numbers should be included in the output. Default is true.</param>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.RemoveCommentsFromSet(Astred.AstLib.AstSliceSet)">
            <summary>
            Removes any comments in this node or its descendants from the specified set of slices.
            </summary>
            <param name="set">The set of slices.</param>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.GetTextRecursive(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Recursively retrieves the text content of this AST node and its children.
            </summary>
            <param name="maxtext">The maximum length of text to retrieve. If -1, no maximum is applied.</param>
            <param name="comments">Indicates whether to include comments in the text content.</param>
            <param name="spaces">Indicates whether to include spaces between nodes.</param>
            <returns>The text content of this AST node and its children.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.SetParents">
            <summary>
            Sets the parent nodes for all of this node's descendants.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.Select(Astred.AstLib.AstField,Astred.AstLib.AstToken)">
            <summary>
            Selects child nodes of the current node that match the specified field and token.
            </summary>
            <param name="field">The field to match.</param>
            <param name="token">The token to match.</param>
            <returns>An enumerable collection of matching child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.Select(Astred.AstLib.AstField)">
            <summary>
            Selects child nodes of the current node that match the specified field.
            </summary>
            <param name="field">The field to match.</param>
            <returns>An enumerable collection of matching child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.Select(Astred.AstLib.AstToken)">
            <summary>
            Selects child nodes of the current node that match the specified token.
            </summary>
            <param name="type">The token to match.</param>
            <returns>An enumerable collection of matching child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.Select(Astred.AstLib.AstToken,Astred.AstLib.AstToken)">
            <summary>
            Selects child nodes of the current node that match either of the specified tokens.
            </summary>
            <param name="t1">A token to match.</param>
            <param name="t2">A token to match.</param>
            <returns>An enumerable collection of matching child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.Select(Astred.AstLib.AstToken,Astred.AstLib.AstToken,Astred.AstLib.AstToken)">
            <summary>
            Selects child nodes of the current node that match any of the specified tokens.
            </summary>
            <param name="t1">A token to match.</param>
            <param name="t2">A token to match.</param>
            <param name="t3">A token to match.</param>
            <returns>An enumerable collection of matching child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.Select(Astred.AstLib.AstToken,Astred.AstLib.AstToken,Astred.AstLib.AstToken,Astred.AstLib.AstToken)">
            <summary>
            Selects child nodes of the current node that match any of the specified tokens.
            </summary>
            <param name="t1">A token to match.</param>
            <param name="t2">A token to match.</param>
            <param name="t3">A token to match.</param>
            <param name="t4">A token to match.</param>
            <returns>An enumerable collection of matching child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindAllInteriors">
            <summary>
            Gets all interior child nodes of the current AST node.
            </summary>
            <returns>An enumerable collection of interior child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindChildCode">
            <summary>
            Gets the first child node of the current node that contains code.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindChild(Astred.AstLib.AstField,Astred.AstLib.AstToken)">
            <summary>
            Gets the first child node of the current node that matches the specified field and token.
            </summary>
            <param name="field">The field to match.</param>
            <param name="type">The token to match.</param>
            <returns>The first matching child node, or null if no match is found.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindChild(Astred.AstLib.AstField)">
            <summary>
            Gets the first child node of the current node that matches the specified field.
            </summary>
            <param name="field">The field to match.</param>
            <returns>The first matching child node, or null if no match is found.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindChild(Astred.AstLib.AstToken)">
            <summary>
            Gets the first child node of the current node that matches the specified token.
            </summary>
            <param name="type">The token to match.</param>
            <returns>The first matching child node, or null if no match is found.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindChildPosition(Astred.AstLib.AstField,Astred.AstLib.AstToken)">
            <summary>
            Gets the position of the first child node of the current node that matches the specified field and token.
            </summary>
            <param name="field">The field to match.</param>
            <param name="type">The token to match.</param>
            <returns>The position of the first matching child node, or -1 if no match is found.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindChildPosition(Astred.AstLib.AstField)">
            <summary>
            Gets the position of the first child node of the current node that matches the specified field.
            </summary>
            <param name="field">The field to match.</param>
            <returns>The position of the first matching child node, or -1 if no match is found.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindChildPosition(Astred.AstLib.AstToken)">
            <summary>
            Gets the position of the first child node of the current node that matches the specified token.
            </summary>
            <param name="type">The token to match.</param>
            <returns>The position of the first matching child node, or -1 if no match is found.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.UnbindSymbols">
            <summary>
            Unbinds symbols in the AST starting from the current node.
            </summary>
            <returns>True if any symbols were unbound; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindPathTo">
            <summary>
            Finds the path from the current node to the root of the AST.
            </summary>
            <returns>A list of nodes representing the path from the current node to the root.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.CountErrors">
            <summary>
            Counts the number of error nodes in the AST starting from the current node.
            </summary>
            <returns>The number of error nodes in the AST.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FieldAndToken">
            <summary>
            Return the node's field and token as a string.
            </summary>
            <returns>A string representation of the node's field and token.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FormatNode(System.Int32,System.Text.StringBuilder,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Formats the current node into a string representation.
            </summary>
            <param name="indent">The indentation level for formatting.</param>
            <param name="sb">The string builder to which the formatted node is appended.</param>
            <param name="max">The maximum depth to format. If -1, no maximum is applied.</param>
            <param name="interiorText">Indicates whether to include text for interior (non-leaf) nodes.</param>
            <param name="addEnd">Indicates whether to include the ending position of the node.</param>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.PrintNode(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prints the current node to the console.
            </summary>
            <param name="indent">The indentation level for printing.</param>
            <param name="max">The maximum depth to print. If -1, no maximum is applied.</param>
            <param name="interiorText">Indicates whether to include text for interior (non-leaf) nodes.</param>
            <param name="addEnd">Indicates whether to include the ending position of the node.</param>
            <param name="edits">Indicates if the node should be printed showing its edit status</param>
            <returns>The number of lines printed.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.PrintTree(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prints the AST tree starting at the current node as the root.
            </summary>
            <param name="indent">The indentation level for printing.</param>
            <param name="max">The maximum depth to print. If -1, no maximum is applied.</param>
            <param name="comments">If true, print comment nodes.</param>
            <param name="text">If true, print plain text nodes.</param>
            <param name="interiorText">Print text for interior (non-leaf) nodes.</param>
            <param name="addEnd">Print the ending (row,column).</param>
            <param name="blocksOnly">Print only node that are roots of Blocks.</param>
            <param name="printEdits">Print edits coloring for nodes.</param>
            <returns>The number of lines printed.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.PrintTreeInRange(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prints the AST tree starting at the current node as the root, within a specified range.
            </summary>
            <param name="beg">The beginning position of the range.</param>
            <param name="end">The ending position of the range.</param>
            <param name="indent">The indentation level for printing.</param>
            <param name="comments">If true, print comment nodes.</param>
            <param name="text">If true, print plain text nodes.</param>
            <param name="interiorText">Print text for interior (non-leaf) nodes.</param>
            <param name="blocksOnly">Print only node that are roots of Blocks.</param>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.WriteSExpr(System.Text.StringBuilder,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Writes the Tree-Sitter S-expression representation of the AST to a StringBuilder.
            </summary>
            <param name="sb">The StringBuilder to which the S-expression is written.</param>
            <param name="indent">The indentation level for the output.</param>
            <param name="fields">Indicates whether to include field information in the output.</param>
            <param name="text">Indicates whether to include text for text nodes in the output.</param>
            <returns>The number of lines written to the StringBuilder.</returns>
            <remarks>
            This method generates a textual representation of the AST in the form of an S-expression,
            which is a parenthesized list notation. Each node is represented by a list with the token name
            as the first element, followed by field information (if included), and the text content (if included).
            Child nodes are nested lists within their parent's list.
            This format can be used to validate Tree-Sitter corpus tests.
            </remarks>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.PrintDefTree(System.Int32,System.Int32)">
            <summary>
            Prints the symbol defining nodes of the AST starting at the current node.
            </summary>
            <param name="indent">The indentation level for printing.</param>
            <param name="max">The maximum depth to print. If -1, no maximum is applied.</param>
            <returns>The number of lines printed.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.PrintText">
            <summary>
            Prints the text of the AST tree starting at the current node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FormatTree(System.Int32,System.Text.StringBuilder,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Formats the AST into a tree structure string representation.
            </summary>
            <param name="indent">The indentation level for the output.</param>
            <param name="sb">The StringBuilder to which the tree structure is written.</param>
            <param name="max">The maximum depth of the tree to format. If -1, no maximum is applied.</param>
            <param name="comments">Indicates whether to include comment nodes in the output.</param>
            <param name="interiorText">Indicates whether to include text for interior (non-leaf) nodes in the output.</param>
            <remarks>
            This method generates a string representation of the AST in a tree structure format,
            where each node is indented according to its depth in the tree. The output includes
            the token and field information for each node, and optionally includes comment nodes
            and text content for interior nodes.
            </remarks>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.UpgradeIdentifierToType">
            <summary>
            Upgrades the current identifier node to mark it as a type identifier.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.UpgradeIdentifierToField">
            <summary>
            Upgrades the cucrent identifier node to mark it as a field identifier.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.UpgradeIdentifierToDef">
            <summary>
            Upgrades the cucrent identifier node to mark it as defining a new identifier.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsIdentifierDef">
            <summary>
            Indicates whether the node is an identifier definition node.
            </summary>
            <returns>true if the node is an identifier definition; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsIdentifierUse">
            <summary>
            Indicates whether the node is an identifier usage node.
            </summary>
            <returns>true if the node is an identifier usage; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsIdentifier">
            <summary>
            Indicates whether the specified node is an identifier node (either definition or usage).
            </summary>
            <returns>true if the node is an identifier; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsIdentifier(Astred.AstLib.AstCategory)">
            <summary>
            Indicates whether the specified category identifies an identifier node (either definition or usage).
            </summary>
            <param name="category">The category to check.</param>
            <returns>true if the node is an identifier; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsTextOrIdentifier">
            <summary>
            Indicates whether the node is a text or an identifier node.
            </summary>
            <returns>true if the node is a text or an identifier node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsTextOrIdentifier(Astred.AstLib.AstCategory)">
            <summary>
            Indicates if the provided category defines a text or an identifier node
            </summary>
            <param name="category">The category to check.</param>
            <returns>true if the category defines a text or an identifier node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsBasicText">
            <summary>
            Indicates whether the node is a basic text node.
            </summary>
            <returns>true if the node is a basic text node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsBasicText(Astred.AstLib.AstCategory)">
            <summary>
            Indicates whether the provide cateogry defines a basic text node.
            </summary>
            <returns>true if the category represents a basic text node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsLeaf">
            <summary>
            Indicates whether the node is a leaf node.
            </summary>
            <returns>true if the node is a leaf node; false if the node is an interior node.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsLeaf(Astred.AstLib.AstCategory)">
            <summary>
            Indicates whether the provided category defines a leaf node.
            </summary>
            <returns>true if the category defines a leaf node; false if the node is an interior node.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsTextOrComment">
            <summary>
            Indicates whether the node is a text or a comment node.
            </summary>
            <returns>true if the node is a text or a comment node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsTextOrComment(Astred.AstLib.AstCategory)">
            <summary>
            Indicates if the provided category defines a text or a comment node.
            </summary>
            <param name="category">The category to check.</param>
            <returns>true if the category defines a text or a comment node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsComment">
            <summary>
            Indicates whether the node is a comment node.
            </summary>
            <returns>true if the node is a comment node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsComment(Astred.AstLib.AstCategory)">
            <summary>
            Indicates whether the provided category defines a comment node.
            </summary>
            <param name="category">The category to check.</param>
            <returns>true if the category defines a comment node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsInterior">
            <summary>
            Indicates whether the node is a interior node.
            </summary>
            <returns>true if the node is a interior node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsInterior(Astred.AstLib.AstCategory)">
            <summary>
            Indicates whether the provided category defines an interior node.
            </summary>
            <param name="category">The category to check.</param>
            <returns>true if the category defines an interior node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsType">
            <summary>
            Indicates whether the node is a type identifier node.
            </summary>
            <returns>true if the node is a type identifier node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsType(Astred.AstLib.AstCategory)">
            <summary>
            Indicates whether the node is a type identifier node.
            </summary>
            <param name="category">The category to check.</param>
            <returns>true if the node is a type identifier node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsField">
            <summary>
            Indicates whether the node is a field identifier node.
            </summary>
            <returns>true if the node is a field identifier node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsField(Astred.AstLib.AstCategory)">
            <summary>
            Indicates whether the provided category defines a field identifier node.
            </summary>
            <param name="category">The category to check.</param>
            <returns>true if the category defines a field identifier node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.IsScope(Astred.AstLib.AstCategory)">
            <summary>
            Indicates whether the node is starts a new symbol scope.
            </summary>
            <returns>true if the node is a scope node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.Escape(System.String,System.Int32)">
            <summary>
            Escapes special characters in the given text.
            </summary>
            <param name="text">The text to escape.</param>
            <param name="max">Maximum number of character to include in output text. -1 means no limit.</param>
            <returns>The escaped text.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.ClearSymbolBindings">
            <summary>
            Clears all symbol bindings for the AST starting from the specified root node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindIdentifiersForChildren">
            <summary>
            Retrieves identifiers for child nodes.
            </summary>
            <returns>An enumerable collection of identifiers for child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindIdentifiersForChildren(Astred.AstLib.AstToken)">
            <summary>
            Retrieves identifiers for child nodes that match the specified token.
            </summary>
            <param name="type">The token to match.</param>
            <returns>An enumerable collection of identifiers for child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindIdentifiersForChildren(Astred.AstLib.AstField)">
            <summary>
            Retrieves identifiers for child nodes that match the specified field.
            </summary>
            <param name="field">The field to match.</param>
            <returns>An enumerable collection of identifiers for child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindIdentifiersForChildren(Astred.AstLib.AstField,Astred.AstLib.AstField)">
            <summary>
            Retrieves identifiers for child nodes that match the specified field and separator.
            </summary>
            <param name="field">The field to match.</param>
            <param name="separator">The field used as a separator.</param>
            <returns>An enumerable collection of identifiers for child nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindChildrenWithIdentifiers(Astred.AstLib.AstField)">
            <summary>
            Retrieves child nodes with their identifiers that match the specified field.
            </summary>
            <param name="field">The field to match.</param>
            <returns>An enumerable collection of tuples containing the child node and its identifier.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindIdentifierFor">
            <summary>
            Retrieves the identifier for from the first child node that has an identifier.
            </summary>
            <returns>The identifier for the first child node with an identifier, or null if none is found.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindIdentifierFor(Astred.AstLib.AstField)">
            <summary>
            Retrieves the identifier for the first child node that matches the specified field.
            </summary>
            <param name="field">The field to match.</param>
            <returns>The identifier for the first matching child node, or null if no match is found.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindIdentifierFor(Astred.AstLib.AstToken)">
            <summary>
            Retrieves the identifier for the first child node that matches the specified token.
            </summary>
            <param name="token">The token to match.</param>
            <returns>The identifier for the first matching child node, or null if no match is found.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindIdentifier">
            <summary>
            Retrieves the identifier for the current node.
            </summary>
            <returns>The identifier for the current node, or null if no identifier is found.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.PrintErrorAt(System.String,System.Object[])">
            <summary>
            Prints an error message containing the location of the current node.
            </summary>
            <param name="error">The error message to print (using String.Format format).</param>
            <param name="args">Optional arguments to format the error message.</param>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.PrintWarningAt(System.String,System.Object[])">
            <summary>
            Prints an warning message containing the location of the current node.
            </summary>
            <param name="warning">The error message to print (using String.Format format).</param>
            <param name="args">Optional arguments to format the error message.</param>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindDescendants">
            <summary>
            Returns all descendant nodes of this node.
            </summary>
            <returns>An enumberable collection of descendant nodes.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindDescendants(System.Nullable{Astred.AstLib.AstField},System.Nullable{Astred.AstLib.AstToken},System.Nullable{Astred.AstLib.AstCategory},System.Boolean)">
            <summary>
            Returns all descendant nodes (recursively) if this node matching the filtering criteria.
            </summary>
            <param name="astField">The AstField to filter the descendant nodes.</param>
            <param name="astToken">The AstToken to filter the descendant nodes.</param>
            <param name="astCategory">The AstCategory to filter the descendant nodes.</param>
            <param name="stop">True to stop recursing after finding a node that matches all conditions. Default false.</param>
            <returns>An enumerable collection of descendant nodes matching the filter criteria.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindLeafNodes">
            <summary>
            Returns all leaf nodes that descend from this node.
            </summary>
            <returns>An enumerable collection of leaf nodes that descend from this node.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindLeafNode">
            <summary>
            Returns the first leaf node that descends from this node.
            </summary>
            <returns>The first leaf node that descends from this node.</returns>
        </member>
        <member name="M:Astred.AstLib.AstNodeBase.FindLastLeafNode">
            <summary>
            Returns the last leaf node that descends from this node.
            </summary>
            <returns>The last leaf node that descends from this node.</returns>
        </member>
        <member name="T:Astred.AstLib.AstNodeText">
            <summary>
            Represents a node in the AST that contains text.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstNodeText.text">
            <summary>
            The text content for the node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeText.Text">
            <summary>
            Gets the text content for the node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeText.ToString">
            <summary>
            Returns the text content for the node (for debugging).
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstNodeTextRaw">
            <summary>
            Represents a raw text node in the AST that contains text. This node is used for debugging purposes only.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeTextRaw.ToString">
            <summary>
            Returns the text content for the node (for debugging).
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstNode">
            <summary>
            Represents an internal node in the AST.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstNode.parent">
            <summary>
            The parent node of the current node.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstNode.children">
            <summary>
            The child nodes of the current node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNode.Name">
            <summary>
            The name of the node.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstNode.link">
            <summary>
            The corresponding node in the other AST tree.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNode.Count">
            <summary>
            The number of children of this node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNode.Item(System.Int32)">
            <summary>
            Access the child node at the specified index.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNode.Parent">
            <summary>
            The parent node of the current node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNode.Children">
            <summary>
            The child nodes of the current node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNode.Interiors">
            <summary>
            The interior child nodes of the current node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNode.ToStringFormat">
            <summary>
            Returns a string formatted for logging.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNode.ToString">
            <summary>
            Returns text content for the node (for debugging).
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNode.FindPositionOfChild(Astred.AstLib.AstNodeBase)">
            <summary>
            Returns the position of the specified child node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNode.FindPositionBeforeLast(Astred.AstLib.AstToken)">
            <summary>
            Returns the position before the last child of the give <see cref="T:Astred.AstLib.AstToken"/> type.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNode.SetParents">
            <summary>
            Set the parent nodes for all descendants of this node.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstNodeRoot">
            <summary>
            An root node of a set of file ASTs.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeRoot.#ctor">
            <summary>
            Creates a new root node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeRoot.Parent">
            <summary>
            Always null as the root node has no parent.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeRoot.ToString">
            <summary>
            Returns text content for the node (for debugging).
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstNodeError">
            <summary>
            An error node an ASTs.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeError.ErrorLine">
            <summary>
            Non-null if we have the line of text associated with the error.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeError.ErrorPoint">
            <summary>
            The point of the error in ErrorLine.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeError.ToString">
            <summary>
            Returns text content for the node (for debugging).
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstNodeScope">
            <summary>
            An <see cref="T:Astred.AstLib.AstNode"/> which defines a new scope.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeScope.Scope">
            <summary>
            Gets the <see cref="T:Astred.AstLib.AstScope"/> associated with this node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeScope.ToString">
            <summary>
            Formats the node as a string for debugging.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstNodeId">
            <summary>
            An <see cref="T:Astred.AstLib.AstNode"/> which is a symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeId.Name">
            <summary>
            Gets the name of the symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeId.Mangled">
            <summary>
            Gets the mangled name of the symbol.
            </summary>
        </member>
        <member name="F:Astred.AstLib.AstNodeId.parent">
            <summary>
            Gets the parent node of the symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeId.Symbol">
            <summary>
            Gets the <see cref="T:Astred.AstLib.AstSymbol"/> associated with this node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstNodeId.Parent">
            <summary>
            Gets the parent node of this node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeId.ToString">
            <summary>
            Formats the node as a string for debugging.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstNodeOp">
            <summary>
            An <see cref="T:Astred.AstLib.AstNodeText"/> which is an operator.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeOp.ToString">
            <summary>
            Formats the node as a string for debugging.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstCursor">
            <summary>
            Represents a cursor for navigating sequentially through the nodes of an abstract syntax tree (AST).
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstCursor.#ctor(Astred.AstLib.AstNodeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstCursor"/> class with the specified root node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstCursor.#ctor(Astred.AstLib.AstNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstCursor"/> class with the specified root node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstCursor.Next">
            <summary>
            Moves the cursor to the next node in the AST.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstCursor.Node">
            <summary>
            Get the current node in the AST.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstCursor.Parent">
            <summary>
            Get the parent node of the current node in the AST.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstCursor.begrc">
            <summary>
            Get the starting file point of the current node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstCursor.endrc">
            <summary>
            Get the ending file point of the current node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstCursor.fieldid">
            <summary>
            Get the field of the current node.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstCursor.tokenid">
            <summary>
            Get the token of the current node.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstSlice">
             <summary>
             A range of text in a file.
             </summary>
             <remarks>
             Two slices have nine possible relationships:
             1. Slice A and slice B are exactly equal: A.begrc==B.begrc and A.endrc==B.endrc.
            
                     |---A---|
            
                     |---B---|
            
             2. Slice A is before and abuts slice B: A.endrc == B.begrc.
            
                     |---A---|
            
                             |---B---|
            
             3. Slice A is after and abuts slice B: A.begrc == B.endrc.
            
                             |---A---|
            
                     |---B---|
            
             4. Slice A is separate and before slice B: A.endrc &lt; B.begrc.
            
                     |---A---|
            
                                     |---B---|
            
             5. Slice A is separate and after slice B: A.begrc &gt; B.endrc.
            
                                     |---A---|
            
                     |---B---|
            
             6. Slice A is completely within slice B: A.begrc &gt;= B.begrc and A.endrc &lt;= B.endrc.
            
                         |---A---|
            
                     |-----B-----|
            
             7. Slice B is completely within slice A: B.begrc &gt;= A.begrc and B.endrc &lt;= A.endrc.
            
                     |-------A---|  or  |-------A---|  or  |-------A---|
            
                       |---B---|        |---B---|              |---B---|
            
             8. Slice A preceeds and overlaps with slice B: A.endrc &gt; B.begrc.
            
                     |---A---|
            
                            |---B---|
            
             9. Slice A follows and overlaps with slice B: A.begrc &lt; B.endrc.
            
                            |---A---|
            
                     |---B---|
            
             The first four relationships are disjoint, but the last five are not.
             The last five relationships are disjoint if the slices are sorted by their beginning and ending rows.
             </remarks>
        </member>
        <member name="P:Astred.AstLib.AstSlice.Begrc">
            <summary>
            Gets the beginning point of the slice.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSlice.Endrc">
            <summary>
            Gets the ending point of the slice.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstSlice.#ctor(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstSlice"/> struct with the specified beginning and ending points.
            </summary>
            <param name="begrc">The beginning point of the slice.</param>
            <param name="endrc">The ending point of the slice.</param>
        </member>
        <member name="M:Astred.AstLib.AstSlice.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstSlice"/> struct with the specified beginning and ending row numbers.
            </summary>
            <param name="begr">The beginning row number of the slice.</param>
            <param name="endr">The ending row number of the slice.</param>
        </member>
        <member name="M:Astred.AstLib.AstSlice.ToString">
            <summary>
            Provides a string representation of the slice for debugging purposes.
            </summary>
            <returns>A string that represents the slice.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSlice.CompareTo(Astred.AstLib.AstSlice)">
            <summary>
            Compares this slice to another slice.
            </summary>
            <param name="other">The slice to compare to this slice.</param>
            <returns>A value that indicates the relative order of the slices.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSlice.Overlaps(Astred.AstLib.AstSlice)">
            <summary>
            Determines whether this slice is overlapps the other slice.
            </summary>
            <param name="other">The slice to compare to this slice.</param>
            <returns><c>true</c> if the slices overlap; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSlice.OverlapsOrAbuts(Astred.AstLib.AstSlice)">
            <summary>
            Determines whether this slice is overlapps or abuts the other slice.
            </summary>
            <param name="other">The slice to compare to this slice.</param>
            <returns><c>true</c> if the slices overlap or abut; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSlice.Contains(Astred.AstLib.AstSlice)">
            <summary>
            Determines whether this slice contains the other slice.
            </summary>
            <param name="other">The slice to compare to this slice.</param>
            <returns><c>true</c> if this slice contains the other slice; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSlice.Intersects(Astred.AstLib.AstSlice)">
            <summary>
            Determines whether this slice is contained by the other slice.
            </summary>
            <param name="other">The slice to compare to this slice.</param>
            <returns><c>true</c> if this slice is contained by the other slice; otherwise, <c>false</c>.</returns>
            <remarks>
            A slice intersects another slice if it overlaps, abuts, or is contained by the other slice.
            </remarks>
        </member>
        <member name="M:Astred.AstLib.AstSlice.UnionOf(Astred.AstLib.AstSlice)">
            <summary>
            Create a new slice that is the smallest slice containing this slice and the other slice.
            </summary>
            <param name="other">The slice to union with this slice.</param>
            <returns>A new slice that is the smallest slice containing this slice and the other slice.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSlice.DifferenceWith(Astred.AstLib.AstSlice)">
            <summary>
            Create a new slice that is the intersection of this slice and the other slice.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstSliceSet">
            <summary>
            A set of <see cref="T:Astred.AstLib.AstSlice"/> slices.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstSliceSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstSliceSet"/> class.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSliceSet.Count">
            <summary>
            Gets the number of slices in the set.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSliceSet.Item(System.Int32)">
            <summary>
            Gets the slice at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Astred.AstLib.AstSliceSet.ToString">
            <summary>
            Provides a string representation of the slice for debugging purposes.
            </summary>
            <returns>A string that represents the slice.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSliceSet.AddSlice(System.Int32,System.Int32)">
            <summary>
            Adds a slice to the set.
            </summary>
            <param name="begr">The beginning row number of the slice.</param>
            <param name="endr">The ending row number of the slice.</param>
        </member>
        <member name="M:Astred.AstLib.AstSliceSet.AddSlice(Astred.AstLib.AstSlice)">
            <summary>
            Adds a slice to the set.
            </summary>
            <param name="slice">The slice to add.</param>
        </member>
        <member name="M:Astred.AstLib.AstSliceSet.AddSlice(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Adds a slice to the set.
            </summary>
            <param name="begrc">The beginning point of the slice.</param>
            <param name="endrc">The ending point of the slice.</param>
        </member>
        <member name="M:Astred.AstLib.AstSliceSet.RemoveSlice(System.Int32,System.Int32)">
            <summary>
            Remove a slice from the set.
            </summary>
            <param name="begr">The beginning row number of the slice.</param>
            <param name="endr">The ending row number of the slice.</param>
        </member>
        <member name="M:Astred.AstLib.AstSliceSet.RemoveSlice(Astred.AstLib.AstSlice)">
            <summary>
            Remove a slice from the set.
            </summary>
            <param name="slice">The slice to remove.</param>
        </member>
        <member name="M:Astred.AstLib.AstSliceSet.RemoveSlice(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Remove a slice from the set.
            </summary>
            <param name="begrc">The beginning point of the slice.</param>
            <param name="endrc">The ending point of the slice.</param>
        </member>
        <member name="T:Astred.AstLib.AstSymbol">
            <summary>
            Represents a symbol defined in the AST.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.Tokenid">
            <summary>
            The AST token identifier for the node defining this symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.Name">
            <summary>
            The name of the symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.Mangled">
            <summary>
            The mangled name of the symbol, which may be used to differentiate between overloads.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.TypedName">
            <summary>
            Must contain all information necessary to differentiate between overloads.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.FieldOf">
            <summary>
            The symbol that this symbol is a field of, if any.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.TypeOf">
            <summary>
            The symbol that represents the type of this symbol, if known.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.Previous">
            <summary>
            The symbol that represents the previous instance of this symbol, if any.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.Origin">
            <summary>
            The origin point of the symbol in the source code.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.IsOverloaded">
            <summary>
            Indicates whether the symbol is overloaded.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.IsGeneric">
            <summary>
            Indicates whether the symbol is generic/template.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.IsLocked">
            <summary>
            Indicates whether the symbol cannot be extended or modified by code.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.Overloads">
            <summary>
            The list of overloads for this symbol, if it is an overloaded symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.NestedTypes">
            <summary>
            The list of nested types within this symbol, if any. Compound types like classes, structs, and enums have nested types.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.BaseSymbol">
            <summary>
            The base symbol from which this symbol was derived.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.Scope">
            <summary>
            The scope defined by this symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.Defined">
            <summary>
            The AST node that defines this symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.DefiningAsts">
            <summary>
            The blocks defining this symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.PrimaryBlock">
            <summary>
            The primary block defining this symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.Blocks">
            <summary>
            The blocks defining this symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.SymGraph">
            <summary>
            The Symbolic Graph associated with this Symbol.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstSymbol.Id">
            <summary>
            A unique identifier for this symbol.  Should be used *ONLY* for debugging and testing.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.ResetIdBase">
            <summary>
            Resets the static counter so that future symbols have Ids starting at 1.
            Should be used *ONLY* for debugging and testing.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.#ctor(Astred.AstLib.AstToken,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstSymbol"/> class with the specified token identifier and name.
            </summary>
            <param name="tokenid">The token identifier for the symbol.</param>
            <param name="name">The name of the symbol.</param>
            <param name="mangled">The mangled name of the symbol, used for unique identification.</param>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.#ctor(Astred.AstLib.AstPrimitiveType,Astred.AstLib.AstToken,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstSymbol"/> class with the specified token identifier and name.
            </summary>
            <param name="ptid">The primitive type id for the symbol.</param>
            <param name="tokenid">The token identifier for the symbol.</param>
            <param name="name">The name of the symbol.</param>
            <param name="mangled">The mangled name of the symbol.</param>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstSymbol"/> class with the specified name.
            </summary>
            <param name="name">The name of the symbol.</param>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.Clone">
            <summary>
            Creates a copy of an existing <see cref="T:Astred.AstLib.AstSymbol"/> instance, duplicating its state but with a unique identifier.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.Format(System.Int32)">
            <summary>
            Formats the symbol for display, with an optional indentation level.
            </summary>
            <param name="indent">The indentation level for formatting the symbol.</param>
            <returns>A formatted string representation of the symbol.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.CompareTo(Astred.AstLib.AstSymbol)">
            <summary>
            Compares this instance with another <see cref="T:Astred.AstLib.AstSymbol"/> and returns an integer that indicates
            whether this instance precedes, follows, or occurs in the same position in the sort order as the other <see cref="T:Astred.AstLib.AstSymbol"/>.
            Symbols are sorted based on their Id.
            </summary>
            <param name="other">An <see cref="T:Astred.AstLib.AstSymbol"/> to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.Print(System.Int32)">
            <summary>
            Prints the symbol to the console with an optional indentation level.
            </summary>
            <param name="indent">The indentation level for printing the symbol.</param>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.ToString">
            <summary>
            Returns a string that represents the current symbol, formatted for debugging.
            </summary>
            <returns>A string that represents the current symbol.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.AddNestedType(Astred.AstLib.AstSymbol)">
            <summary>
            Adds a nested type to the list of nested types within this symbol.
            </summary>
            <param name="sym">The nested type symbol to add.</param>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.IsPrimitive">
            <summary>
            Return true if this symbol is a primitive type from the language.
            </summary>
            <returns>true if the symbol is a primitive type; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.AddBlock(Astred.GraphLib.Block)">
            <summary>
            Addes a block to this symbol's list of blocks.
            </summary>
            <param name="newBlock">The block to add.</param>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.AddDefined(Astred.AstLib.AstNodeBase)">
            <summary>
            Adds an <see cref="T:Astred.AstLib.AstNodeBase"/> as a node that defines this symbol.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Astred.AstLib.AstSymbol.RemoveDefined(Astred.AstLib.AstNodeBase)">
            <summary>
            Removes the givne node from the nodes defining this symbol.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="T:Astred.AstLib.AstScope">
            <summary>
            Represents a symbol scope within an abstract syntax tree (AST).
            A scope is a context in which identifiers are defined and can be resolved.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstScope.Owner">
            <summary>
            Gets the symbol that owns this scope, if any.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstScope.Bases">
            <summary>
            Gets the list of base scopes, such as parent classes, that this scope inherits from, if any.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstScope.Count">
            <summary>
            Gets the number of symbols defined in this scope.
            </summary>
        </member>
        <member name="P:Astred.AstLib.AstScope.Id">
            <summary>
            Gets a unique identifier for this scope.
            Should be used *ONLY* for debugging and testing.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstScope.ResetIdBase">
            <summary>
            Resets the static counter so that future scaope have Ids starting at 1.
            Should be used *ONLY* for debugging and testing.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstScope.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Astred.AstLib.AstScope"/>. Format is optimized for internal debugging.
            </summary>
            <returns>A string that represents the current <see cref="T:Astred.AstLib.AstScope"/>.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.#ctor(Astred.AstLib.AstNodeScope)">
            <summary>
            Initializes a new scope for containing systems.
            </summary>
            <param name="root">The AstNode that owns this scope.</param>
        </member>
        <member name="M:Astred.AstLib.AstScope.#ctor(Astred.AstLib.AstNodeScope,Astred.AstLib.AstSymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.AstScope"/> class with the specified owner symbol.
            </summary>
            <param name="root">The AstNode that owns this scope.</param>
            <param name="owner">The symbol that owns this scope.</param>
        </member>
        <member name="M:Astred.AstLib.AstScope.FindSymbols">
            <summary>
            Gets an enumerable collection of symbols defined in this scope.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstScope.FindBases">
            <summary>
            Gets an enumerable collection of base scopes, such as parent classes, that this scope inherits from.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstScope.IsEmpty">
            <summary>
            Indicates whether the scope is empty (i.e., no symbols are defined in it).
            </summary>
            <returns>true if the scope is empty; otherwise, false.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.FindMangled(Astred.AstLib.AstSymbol,System.String)">
            <summary>
            Finds an overloaded instance of a symbol within this scope.
            </summary>
            <param name="overloadSym">The overloaded base symbol.</param>
            <param name="mangled">The mangled name of the symbol, if applicable.</param>
            <returns>The symbol if found; otherwise, null.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.Find(System.String,System.String)">
            <summary>
            Finds a symbol by name and mangled name within this scope. Mangled name must match.
            </summary>
            <param name="name">The name of the symbol to find.</param>
            <param name="mangled">The mangled name of the symbol.</param>
            <returns>The symbol if found; otherwise, null.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.Find(System.String)">
            <summary>
            Finds a symbol by name within this scope.
            </summary>
            <param name="name">The name of the symbol to find.</param>
            <returns>The symbol matching the name.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.FindAllRecursive(System.String)">
            <summary>
            Recursively finds symbols by name within this scope and its base scopes.
            </summary>
            <param name="name">The name of the symbol to find.</param>
            <returns>The list of found symbols.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.FindRecursive(System.String,System.String)">
            <summary>
            Recursively finds a symbol by name and mangled name within this scope and its base scopes.
            </summary>
            <param name="name">The name of the symbol to find.</param>
            <param name="mangled">The mangled name of the symbol to find.</param>
            <returns>The symbol if found; otherwise, null.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.FindRecursive(System.String)">
            <summary>
            Recursively finds a symbol by name within this scope and its base scopes.
            </summary>
            <param name="name">The name of the symbol to find.</param>
            <returns>The symbol if found; otherwise, null.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.FindRecursiveOrAdd(Astred.AstLib.AstNodeId)">
            <summary>
            Recursively finds a symbol for an <see cref="T:Astred.AstLib.AstNodeId"/> within this scope and its base scopes.
            If the symbol is not found, it is added to the scope.
            </summary>
            <param name="node">The <see cref="T:Astred.AstLib.AstNodeId"/> needing a symbol.</param>
            <returns>The symbol found or added.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.FindRecursiveOrAdd(Astred.AstLib.AstNodeId,System.String)">
            <summary>
            Recursively finds a symbol for an <see cref="T:Astred.AstLib.AstNodeId"/> within this scope and its base scopes.
            If the symbol is not found, it is added to the scope.
            </summary>
            <param name="node">The <see cref="T:Astred.AstLib.AstNodeId"/> needing a symbol.</param>
            <param name="mangled">The mangled name of the symbol to find.</param>
            <returns>The symbol found or added.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.FindOrAdd(Astred.AstLib.AstNodeId,System.String)">
            <summary>
            Recursively finds a symbol for an <see cref="T:Astred.AstLib.AstNodeId"/> within this scope and its base scopes.
            If the symbol is not found, it is added to the scope.
            </summary>
            <param name="node">The <see cref="T:Astred.AstLib.AstNodeId"/> needing a symbol.</param>
            <param name="name">The name of the symbol to find.</param>
            <returns>The symbol found or added.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.AddOrReplace(Astred.AstLib.AstSymbol)">
            <summary>
            Adds or replaces a symbol in this scope for an <see cref="T:Astred.AstLib.AstNodeId"/>.
            </summary>
            <param name="symbol">The <see cref="T:Astred.AstLib.AstSymbol"/> to add or replaec.</param>
            <returns>Returns the symbol.</returns>
        </member>
        <member name="M:Astred.AstLib.AstScope.Add(Astred.AstLib.AstSymbol)">
            <summary>
            Adds a symbol to this scope.
            </summary>
            <param name="symbol">The symbol to add.</param>
        </member>
        <member name="M:Astred.AstLib.AstScope.AddRange(System.Collections.Generic.IEnumerable{Astred.AstLib.AstSymbol})">
            <summary>
            Adds a range of symbols to this scope.
            </summary>
            <param name="values">The symbols to add.</param>
        </member>
        <member name="M:Astred.AstLib.AstScope.AddBase(Astred.AstLib.AstScope)">
            <summary>
            Adds a base scope, such as a parent class, to this scope, indicating that this scope inherits from the base scope.
            </summary>
            <param name="_base">The base scope to add.</param>
        </member>
        <member name="M:Astred.AstLib.AstScope.RegisterPrimitive(Astred.AstLib.AstNodeId)">
            <summary>
            Register a primitive type to this scope.
            </summary>
            <param name="node">The node for the symbol.</param>
        </member>
        <member name="M:Astred.AstLib.AstScope.Print(System.Int32)">
            <summary>
            Prints the symbols defined in this scope to the console.
            </summary>
            <param name="indent">The indentation level for printing the symbols.</param>
        </member>
        <member name="M:Astred.AstLib.AstScopeStack.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Astred.AstLib.AstScopeStack"/>. Format is optimized for internal debugging.
            </summary>
            <returns>A string that represents the current <see cref="T:Astred.AstLib.AstScopeStack"/>.</returns>
        </member>
        <member name="T:Astred.AstLib.AstLanguageCSharp">
            <summary>
            C# language processing.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCSharp.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCSharp.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCSharp.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCSharp.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCSharp.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCSharp.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCSharp.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageC">
            <summary>
            The C language processor.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageC.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageC.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageC.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageC.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageC.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageC.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstNodeCUnit">
            <summary>
            Represents a C unit node.  Needed to attach the environment to the node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeCUnit.ToString">
            <summary>
            Formats the node as a string for debugging.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstNodeCInclude">
            <summary>
            Represents a C include node.  Needed to attach the environment to the node.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstNodeCInclude.ToString">
            <summary>
            Formats the node as a string for debugging.
            </summary>
        </member>
        <member name="T:Astred.AstLib.AstLanguageCobol">
            <summary>
            AST processing for COBOL.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCobol.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCobol.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCobol.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCobol.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCobol.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCobol.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageCpp">
            <summary>
            AST parser for C++ code.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCpp.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCpp.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCpp.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCpp.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCpp.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageCpp.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageGo">
            <summary>
            Go language implementation.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageGo.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageGo.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageGo.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageGo.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageGo.BindContext.GetTypeFromLiteral(Astred.AstLib.AstNode)">
            <summary>
            Get the type from a literal. The function will return the type of the literal based on the
            value of AstTokenGo from the provided node
            </summary>
            <param name="node">Node of the literal to be determined</param>
            <returns>AstSymbol of the primitive type the literal corresponds to</returns>
        </member>
        <member name="M:Astred.AstLib.AstLanguageGo.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageGo.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageIni">
            <summary>
            AST processing for Ini.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageIni.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageIni.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageIni.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageIni.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageIni.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageIni.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageJava">
            <summary>
            AST processing for Java.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJava.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJava.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJava.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJava.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJava.BindContext.AttachType(Astred.AstLib.AstNodeBase,Astred.AstLib.AstNodeBase)">
            <summary>
            Attach the type for primitive and reference types
            for variable and fields declarations.
            </summary>
            <param name="typeNode">The type_identifier node</param>
            <param name="parentNode">The parent node is used as helper to get the dimensions node</param>
            <returns></returns>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJava.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJava.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageJavaScript">
            <summary>
            AST processing for JavaScript.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJavaScript.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJavaScript.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJavaScript.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJavaScript.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJavaScript.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageJavaScript.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageProtoBufs">
            <summary>
            AST processing for ProtoBufs.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageProtoBufs.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageProtoBufs.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageProtoBufs.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageProtoBufs.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageProtoBufs.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageProtoBufs.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguagePython">
            <summary>
            AST parser for Python.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguagePython.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguagePython.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguagePython.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguagePython.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguagePython.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguagePython.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageRust">
            <summary>
            AST processing for Rust.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageRust.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageRust.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageRust.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageRust.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageRust.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageRust.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageRust.ReplaceAndBind(Astred.AstLib.AstScope,Astred.AstLib.AstNode,System.Int32,System.Int32,System.Collections.Generic.List{Astred.AstLib.AstNodeBase})">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageRust.ReplaceAndBind(Astred.AstLib.AstScope,Astred.AstLib.AstNode,System.Int32,System.Int32,Astred.AstLib.AstNodeBase)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageText">
            <summary>
            AST processing for Text.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageText.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageText.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageText.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageText.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageText.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageText.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageTypeScript">
            <summary>
            AST parser for Typescript.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageTypeScript.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageTypeScript.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageTypeScript.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageTypeScript.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageTypeScript.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageTypeScript.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageXml">
            <summary>
            AST processing for Xml.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageXml.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageXml.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageXml.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageXml.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageXml.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageXml.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.AstLib.AstLanguageYaml">
            <summary>
            AST processing for Yaml.
            </summary>
        </member>
        <member name="M:Astred.AstLib.AstLanguageYaml.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageYaml.CreateContext(Astred.AstLib.AstFile,Astred.GraphLib.GraphContext)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageYaml.ParseTree(Astred.AstLib.AstNodeRoot,Astred.AstLib.AstContext,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageYaml.StepToName(Astred.AstLib.AstNodeBase,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageYaml.FindDeclarations(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.AstLanguageYaml.BindSymbols(Astred.AstLib.AstScope,Astred.AstLib.AstNode)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.XppRegionBuilder.InsertText(Astred.AstLib.Preprocessor.XppCursor@,System.Collections.Generic.List{System.String})">
            <summary>
            Insert text into the output. Used for macro expansion and meta-commands.
            </summary>
            <param name="cursor">Defines where to insert the text.</param>
            <param name="texts">Text to insert.</param>
            <returns>Return the row at which the text was inserted.</returns>
        </member>
        <member name="T:Astred.AstLib.Preprocessor.XppOperation">
            <summary>
            Represents a preprocessor operation.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.XppOperation.ToString">
            <summary>
            Returns a string representation of the operation for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Astred.AstLib.Preprocessor.XppCondition">
            <summary>
            Used to track the state of a conditional compilation based on directives.
            </summary>
        </member>
        <member name="F:Astred.AstLib.Preprocessor.XppCondition.isTrue">
            <summary>
            True if the condition is currently true--that is, the code should be included.
            True on the positive #if case and on the #else of a false #if.
            </summary>
        </member>
        <member name="F:Astred.AstLib.Preprocessor.XppCondition.wasTrue">
            <summary>
            True if the condition was ever true--that is, the code was included.
            This is used to determine if a #else should be included after possibly multiple #elifs.
            </summary>
        </member>
        <member name="F:Astred.AstLib.Preprocessor.XppCondition.before">
            <summary>
            Use to link #if/#elif/#else/#endif clauses together.
            </summary>
        </member>
        <member name="F:Astred.AstLib.Preprocessor.XppCondition.origin">
            <summary>
            The location of the directive that set the condition.
            </summary>
        </member>
        <member name="F:Astred.AstLib.Preprocessor.XppCondition.operation">
            <summary>
            The operation that set the condition.
            </summary>
        </member>
        <member name="T:Astred.AstLib.Preprocessor.XppOperations">
            <summary>
            Represents a cache of the preprocessor operations for a file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.Preprocessor.XppOperations.file">
            <summary>
            The file that contains the operations.
            </summary>
        </member>
        <member name="P:Astred.AstLib.Preprocessor.XppOperations.operations">
            <summary>
            The list of preprocessor operations in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.Preprocessor.XppOperations.identifiers">
            <summary>
            The list of identifiers referenced in the file.
            </summary>
        </member>
        <member name="P:Astred.AstLib.Preprocessor.XppOperations.defines">
            <summary>
            The list of #define identifiers defined int he file.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.XppOperations.#ctor(Astred.AstLib.AstFileIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.Preprocessor.XppOperations"/> class.
            </summary>
            <param name="fid">The file identifier for the file.</param>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.XppOperations.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.AstLib.Preprocessor.XppOperations"/> class.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.XppOperations.ToString">
            <summary>
            Returns a string representation of the operations for debugging.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.XppOperations.WriteToFileCache">
            <summary>
            Write the operations to a file cache.
            </summary>
            <returns>True if the operations were written successfully.</returns>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.XppOperations.Write(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Write the operations to a JSON writer.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.XppOperations.ExistsInFileCache(Astred.AstLib.AstFileIdentifier)">
            <summary>
            Check if a cache exists for a file.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.XppOperations.ReadFromFileCache(Astred.AstLib.AstFileIdentifier)">
            <summary>
            Deserialize a list of operations from a file cache.
            </summary>
            <param name="fid">The file identifier for the file.</param>
            <returns>The list of operations, or null if the file doesn't exists.</returns>
        </member>
        <member name="F:Astred.AstLib.Preprocessor.C.Macro.body">
            <summary>
            body==null : an undefined macro.
            body.Count==0 : a macro with no body.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.Macro.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.String},Astred.AstLib.AstLocation,System.Boolean)">
            <remarks>
            args==null : a identifier style macro, like "foo".
            args.Count==0 : a function style macro with no arguments, like "foo()".
            </remarks>
        </member>
        <member name="T:Astred.AstLib.Preprocessor.C.XppInclude">
            <summary>
            A preprocessor file environment.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppInclude.ToString">
            <summary>
            Returns a string representation of this XppInclude, formatted for debugging.
            </summary>
            <returns>A string representation of this XppInclude.</returns>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppInclude.CalculateConditions">
            <summary>
            Calculate the condition macros.
            </summary>
        </member>
        <member name="T:Astred.AstLib.Preprocessor.C.XppProcessorC">
            <summary>
            C/C++ preprocessor.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.CreateBase(Astred.AstLib.AstContext,System.String)">
            <summary>
            Crwate an XppInclude for the given file.
            </summary>
            <param name="context">The AST context to preprocess.</param>
            <param name="cplusplus">The __cplusplus value to define if processing C++ code.</param>
            <returns></returns>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.#ctor(Astred.AstLib.AstContext)">
            <summary>
            Constructor for creating an entirely new C/C++ preprocessor.
            </summary>
            <param name="context">The AST context to preprocess.</param>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.ToString">
            <summary>
            Create debugging string.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.GetMacro(System.String,System.Boolean,System.Boolean,Astred.AstLib.Preprocessor.C.Macro@)">
            <summary>
            Determine if the Macro is defined.
            </summary>
            <param name="name">The name of the macro.</param>
            <param name="isOp">True if in is a preprocessor operation, false otherwise.</param>
            <param name="forget">True if the check for the macro should be forgotten--have not side effects.</param>
            <param name="macro">The macro if defined, null otherwise.</param>
            <returns>True if the macro is defined or is specifically undefined, false otherwise.</returns>
            <remarks>
            Three output cases are possible:
            1. The macro is defined, returns True and macro != null.
            2. The macro is specifically undefined, returns True and macro == null.
            3. The macro is not defined, returns False and macro == null.
            </remarks>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.ProcessToRegions(Astred.AstLib.AstContext,Astred.AstLib.Preprocessor.C.XppInclude,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Preprocess a file into regions..
            </summary>
            <param name="context">The AST context to preprocess.</param>
            <param name="env">The file preprocessor environment created for the file.</param>
            <param name="forced">List of files to force include.</param>
            <param name="digest">True if processing to create a digest, false otherwise.</param>
            <returns>The list of regions in the file.</returns>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.PrintRegionText(System.Collections.Generic.List{Astred.AstLib.AstRegion})">
            <summary>
            Print the regions with color coding to the console.
            </summary>
            <param name="regions">List of regions to print.</param>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.HasIncludeGuardIdiom(System.Collections.Generic.List{Astred.AstLib.Preprocessor.XppOperation},System.Collections.Generic.Dictionary{Astred.AstLib.Preprocessor.XppOperation,Astred.AstLib.AstFileIdentifier})">
            <summary>
            Determine if the file has the include guard idiom.
            <code>
              #ifndef FOO_H
              #define FOO_H
              ...
              #endif
            </code>
            </summary>
            <returns>True if the file has the include guard idiom, false otherwise.</returns>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.MatchIncludes(Astred.AstLib.AstNodeCUnit)">
            <summary>
            Connect XppInclude with #include nodes starting at the given root node.
            </summary>
            <param name="root">Root node of the tree.</param>
            <returns>List of #include nodes, if any.</returns>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC._MatchIncludes(Astred.AstLib.AstNode,System.Int32@,System.Collections.Generic.List{Astred.AstLib.AstNodeCInclude})">
            <summary>
            Connect XppInclude with #include nodes starting at the given root node.
            </summary>
            <param name="node">Root node of the tree</param>
            <param name="offset">Offset in the include list</param>
            <param name="inodes">List of #include nodes, if any.</param>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.ParseOperations(Astred.AstLib.AstFile)">
            <summary>
            Parse the preprocessor operations in a file.
            </summary>
            <param name="file">File from which to parse the operations.</param>
            <returns>Cachable information of the preprocessor operations.</returns>
            <remarks>Adding `identifers` and `defines` increased precaching time to 18474ms from 16584ms.</remarks>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.Action(Astred.AstLib.Preprocessor.XppOperation,Astred.AstLib.Preprocessor.XppCondition@,System.Boolean@)">
            <summary>
            Parse the tokens for a preprocessor operation. 
            </summary>
            <param name="op">The operation</param>
            <param name="condition">The conditional compilation state</param>
            <param name="redacted">The redaction state after this operation</param>
            <returns>If an #include operation, returns the identify of the included file.</returns>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.ParseArgsFromTokens(Astred.AstLib.Preprocessor.XppCursor@)">
            <summary>
            Parse to find arguments for a macro (if arguments exist).
            </summary>
            <param name="cursor">The cursor to use for parsing.</param>
            <returns>True if the arguments were parsed, false otherwise.</returns>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.ParseArgsFromTokens(Astred.AstLib.Preprocessor.XppCursor@,System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.String}}@)">
            <summary>
            Parse the arguments for a macro (if arguments exist).
            </summary>
            <param name="cursor">The cursor to use for parsing.</param>
            <param name="macro">The macro being parsed.</param>
            <param name="largs">The list of arguments parsed.</param>
            <returns>True if the arguments were parsed, false otherwise.</returns>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.RecordMacroUsage(Astred.AstLib.AstLocation,Astred.AstLib.Preprocessor.C.Macro)">
            <summary>
            Save that a macro was expanded in this file for creation of relations in the code graph.
            </summary>
            <param name="usedAt">Location where the macro was used.</param>
            <param name="macro">The macro used.</param>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.ReplaceMacro(System.Collections.Generic.List{System.String},Astred.AstLib.Preprocessor.XppCursor@,Astred.AstLib.Preprocessor.C.Macro)">
            <summary>
            Called when we find a macro in the text.
            </summary>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.C.XppProcessorC.ReplaceMacros(System.Collections.Generic.List{System.String},System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.List{Astred.AstLib.Preprocessor.C.Macro},System.Boolean)">
            <summary>
            Evaluate any macros in a list of text strings.  Used by #include and #if and for macro arguments.
            </summary>
            <param name="output">Output text.</param>
            <param name="list">The list of text strings to evaluate.</param>
            <param name="isOp">True if in is a preprocessor operation, false otherwise.</param>
            <param name="evaluated">The list of evaluated macros to stop illegal recursion.</param>
            <returns>The list of text strings after evaluating macros, or null if no macros were replaced</returns>
        </member>
        <member name="M:Astred.AstLib.Preprocessor.CSharp.XppProcessorCSharp.RecordMacroUsage(Astred.AstLib.AstLocation,Astred.AstLib.AstLocation)">
            <summary>
            Save that a macro was evaluated for creation of relations in the code graph.
            </summary>
            <param name="usedAt">Location where the macro was used.</param>
            <param name="macro">The macro used.</param>
        </member>
        <member name="T:Astred.AstLib.Preprocessor.XppCursor">
            <summary>
            Represents a cursor for a file.  A Cursor is used to parse tokens and token sequences from a file.
            </summary>
        </member>
        <member name="T:Astred.AstLib.ToolLoader">
            <summary>
            This class is used to load the Treesitter assembly dynamically.  It is used to avoid a direct reference to the Treesitter assembly
            in the AstLib assembly.  This is important because the Treesitter assembly is not always available when the AstLib assembly is loaded.
            </summary>
        </member>
        <member name="M:Astred.AstLib.ToolLoader.ToolPath(System.String)">
            <summary>
            This method returns the path to the Astred.Tools package for the specified version.
            </summary>
            <param name="version">The version of the Astred.Tools package.</param>
            <returns>The path to the Astred.Tools package for the specified version.</returns>
        </member>
        <member name="M:Astred.AstLib.ToolLoader.ToolPath(System.Version)">
            <summary>
            This method returns the path to the Astred.Tools package for the specified version.
            </summary>
        </member>
        <member name="M:Astred.AstLib.ToolLoader.ToolPath">
            <summary>
            This method returns the path to the Astred.Tools package for the latest version.
            </summary>
        </member>
        <member name="T:Astred.ErrorLib.Errors">
            <summary>
            Class for printing and processing errors.
            </summary>
        </member>
        <member name="M:Astred.ErrorLib.Errors.PrintMessageAt(Astred.AstLib.AstFile,Astred.AstLib.AstPoint,System.String,System.String)">
            <summary>
            Print a message at a specific point in a file.
            </summary>
            <param name="file">File containing the error.</param>
            <param name="point">Point in the file for the error.</param>
            <param name="type">Type of message (e.g., "error", "warning").</param>
            <param name="message">The error text.</param>
        </member>
        <member name="M:Astred.ErrorLib.Errors.PrintErrorAt(Astred.AstLib.AstFile,Astred.AstLib.AstPoint,System.String,System.Object[])">
            <summary>
            Print an error message at a specific point in a file.
            </summary>
            <param name="file">File containing the error.</param>
            <param name="point">Point in the file for the error.</param>
            <param name="error">The error text (in String.Format format).</param>
            <param name="args">Arguments for the text error text.</param>
        </member>
        <member name="M:Astred.ErrorLib.Errors.PrintWarningAt(Astred.AstLib.AstFile,Astred.AstLib.AstPoint,System.String,System.Object[])">
            <summary>
            Print a warning message at a specific point in a file.
            </summary>
            <param name="file">File containing the error.</param>
            <param name="point">Point in the file for the error.</param>
            <param name="error">The warning text (in String.Format format).</param>
            <param name="args">Arguments for the text warning text.</param>
        </member>
        <member name="M:Astred.ErrorLib.Errors.PrintErrorsIfAny(Astred.GraphLib.Block,System.Boolean)">
            <summary>
            Print any errors in the Block Graph to the console.
            </summary>
            <param name="block">Block Graph from which to look for errors.</param>
            <param name="asError">True if the errors are to be printed as errors.  If false, errors are printed as warnings.</param>
            <returns>True if the Block Graph contains any errors.</returns>
            <remarks>
            This method is used to print errors in the Block Graph to the console.
            </remarks>
        </member>
        <member name="M:Astred.ErrorLib.Errors.PrintErrorsIfAny(Astred.AstLib.AstNodeBase,System.Boolean)">
            <summary>
            Print any errors in the AST to the console.
            </summary>
            <param name="node">Root of AST from which to look for errors.</param>
            <param name="asError">True if the errors are to be printed as errors.  If false, errors are printed as warnings.</param>
            <returns>True if the AST contains any errors.</returns>
            <remarks>
            This method is used to print errors in the AST to the console.
            </remarks>
        </member>
        <member name="M:Astred.ErrorLib.Errors.DumpErrorsIfAny(Astred.AstLib.AstNodeBase)">
            <summary>
            Print any errors in the AST to the console.
            </summary>
            <param name="root">Root of AST from which to look for errors.</param>
            <returns></returns>
        </member>
        <member name="T:Astred.GraphLib.BlockType">
            <summary>
            Represents the different types of blocks that can be part of a code graph in the Astred framework.
            Blocks correspond to constructs in a programming language's abstract syntax tree (AST), such as classes,
            functions, variables, etc. The BlockType enumeration is used to categorize these constructs and facilitate
            the analysis and manipulation of the AST.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Unknown">
            <summary>
            Represents an undefined block type. This is typically used as a default value or placeholder
            when the actual block type is not yet determined or is irrelevant in a given context.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Root">
            <summary>
            Represents the root block of a code graph. The root block serves as the entry point
            to the graph and typically does not correspond to a specific language construct. It may
            contain metadata or global information about the entire graph or AST.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.File">
            <summary>
            Represents a file block, which corresponds to a source code file. A file block may contain
            other blocks that represent the constructs found within that file, such as namespaces, classes,
            and functions.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Namespace">
            <summary>
            Represents a namespace block, which corresponds to a namespace declaration in the source code.
            A namespace block may contain other blocks representing the constructs that are part of the namespace.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Import">
            <summary>
            Represents an import block, which corresponds to an import or include directive in the source code.
            An import block indicates a dependence on another file or namespace.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Attribute">
            <summary>
            Represents an attribute block, which corresponds to an attribute, annotation, or decorator applied
            to a language construct in the source code. Attributes may provide additional metadata or modify
            the behavior of the construct they are attached to.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Generic">
            <summary>
            Represents a generic block, which corresponds to a generic or template declaration in the source code.
            A generic block may be associated with classes, functions, or other constructs that support type
            parameterization.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Class">
            <summary>
            Represents a class block, which corresponds to a class declaration in the source code. A class block
            may contain other blocks representing the members of the class, such as methods, properties, and fields.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Interface">
            <summary>
            Represents an interface block, which corresponds to an interface declaration in the source code. An
            interface block may contain other blocks representing the methods or properties that are part of the
            interface contract.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Struct">
            <summary>
            Represents a struct block, which corresponds to a struct or structure declaration in the source code.
            A struct block may contain other blocks representing the members of the struct, such as fields and methods.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Union">
            <summary>
            Represents a union block, which corresponds to a union declaration in the source code. A union block
            may contain other blocks representing the members of the union, which share the same memory location.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Enum">
            <summary>
            Represents an enum block, which corresponds to an enumeration declaration in the source code. An enum
            block may contain other blocks representing the individual enumeration constants.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Typedef">
            <summary>
            Represents a typedef block, which corresponds to a type definition or type alias in the source code.
            A typedef block provides an alternative name for an existing type.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Function">
            <summary>
            Represents a function block, which corresponds to a function or method declaration in the source code.
            A function block may contain other blocks representing the parameters, local variables, and statements
            within the function body.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Field">
            <summary>
            Represents a field block, which corresponds to a field or member variable declaration within a class,
            struct, or union in the source code.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Variable">
            <summary>
            Represents a variable block, which corresponds to a variable declaration in the source code. A variable
            block may represent a local variable, global variable, or parameter.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Statement">
            <summary>
            Represents a statement block, which corresponds to a statement in the source code. Statements are the
            basic building blocks of a program's execution flow and may include control flow constructs, assignments,
            and other actions.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Invocation">
            <summary>
            Represents an invocation block, which corresponds to a function or method call in the source code.
            An invocation block is be associated with the function being called.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Declaration">
            <summary>
            Represents a declaration block, which corresponds to a declaration statement in the source code.
            Declaration blocks introduce new identifiers and may be associated with variables, functions,
            classes, and other named constructs.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Macro">
            <summary>
            Represents a macro block, which corresponds to a macro definition in the source code.
            Macros are preprocessor directives that define reusable code snippets or perform conditional compilation.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Preprocessor">
            <summary>
            Represents a macro block, which corresponds to a macro definition in the source code.
            Macros are preprocessor directives that define reusable code snippets or perform conditional compilation.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Impl">
            <summary>
            Represents an implementation block in a language like Rust. An implementation block may contain other
            blocks representing the members and methods that implement the type's functionality.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Instantiation">
            <summary>
            Represents an instantiation block, which corresponds to the instantiation of an object, generic or
            template in the source code. An instantiation block may be associated with the generic construct
            being instantiated and may contain other blocks representing the type arguments or parameters.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Value">
            <summary>
            Represents a value block, which corresponds to a block holding a value in a data key/value pair.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Redacted">
            <summary>
            Represents a redacted block, which corresponds to a block that has been redacted or removed from the
            source code by a preprocessor or other tool. Redacted blocks may be used to represent code that is
            conditionally excluded from the final build.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Error">
            <summary>
            Represents a error block, which corresponds to an error parsing the text.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Assignment">
            <summary>
            Represents an assignment expression block, which corresponds to an assignment operation in the source code.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockType.Concept">
            <summary>
            Represents a concept block, which corresponds to a C++-like concept definition in the source code.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.BlockRelationType">
            <summary>
            Defines the type of relation between two blocks within a code graph.
            Relations with an odd value are "uses" relationships and those with an even value are "used-by" relationships.
            The UsesFlag bit can be used to determine if a relation is a "uses" relation.
            It can also be used to invert the flag to get the opposite relation--to go from "uses" to "used-by" or from "used-by" to "uses".
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.None">
            <summary>
            No relation is defined between the blocks.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.UsesFlag">
            <summary>
            The "uses" relation flag.  If set, the relationship is a "uses" relationship.  If clear, it is a "used-by" relationship.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.CalledBy">
            <summary>
            Represents a "called by" relationship where one block (the callee) is invoked by another block (the caller).
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
             public int foo() { }
             public void bar()
             {
                 foo();
             }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Function:4                                [foo:3].[A:1] (int:-10)
              CalledBy-> Invocation:9                 |foo()|
            Function:6                                [bar:4].[A:1] (void:-1)
               Invocation: 9                          | foo() |
            </code>
            <para>
            <br />
            Function:4 <b>is Called by</b> Invocation:9
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.Calls">
            <summary>
            <b>Represents a "calls" relationship where one block (the caller) invokes another block (the callee).</b>
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
             public void bar()
             {
                foo();
             }
            </code>
            <b>Blocks output:</b> <br />
            <code>
             Function:6                                    [bar:4].[A:1] (void:-1)
                Invocation: 9                              | foo();|
                  Calls->Function:4                        [foo: 3].[A: 1](int:-10)
            </code>
            <para>
            <br />
            Invocation:9 <b>Calls</b> Function:4
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.OverriddenBy">
             <summary>
             Represents an "overridden by" relationship where a function in a base type is provided an implementation by a function in a derived type.
             </summary>
             <remarks>
             <b>Code example C#:</b> <br />
             <code>
             public class A
             {
                public virtual void foo() { }
             }
            
             public class B : A
             {
                public override void foo() { }
             }
             </code>
             <b>Blocks output:</b> <br />
             <code>
             Class:3                                       [A:1] (A:1)
              Function:4                                   [foo:3].[A:1] (void:-1)
               OverriddenBy-> Function:7                   [foo:6].[B:4] (void:-1)
             </code>
             <para>
             <br />
             Function:4 foo:3 <b>Overriden By</b> Function:7.
             </para>
             </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.Overrides">
             <summary>
             <b>Represents an "overrides" relationship where a function in a derived type provides an implementation for a function in a base type.</b>
             </summary>
             <remarks>
             <b>Code example C#:</b> <br />
             <code>
             public class A
             {
                public virtual void foo() { }
             }
            
             public class B : A
             {
                public override void foo() { }
             }
             </code>
             <b>Blocks output:</b> <br />
             <code>
             Class:3                                    [A:1] (A:1)
              Function:4                                [foo:3].[A:1] (void:-1)
             Class:6                                    [B:4] (B:4)
              Function:7                                [foo:6].[B:4] (void:-1)
                Overrides-> Function:4                  [foo:3].[A:1] (void:-1)
             </code>
             <para>
             Function:7 foo:6 <b>Overrides</b> Function:4.
             </para>
             </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.BaseTypeOf">
            <summary>
            Represents a "base type of" relationship where a type serves as a base for another type (the derived type).
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            public class A
            { }
            public class B : A
            { }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Class:3                                   [A:1] (A:1)
             BaseTypeOf-> Class:4                     [B:3] (B:3)
            Class:4                                   [B:3] (B:3)
            </code>
            <para>
            <br />
            Class:3 A:1 <b>Base Type Of</b> Class:4.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.DerivedTypeOf">
            <summary>
            Represents a "derived type of" relationship where a type is derived from another type (the base type).
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            public class A
            { }
            public class B : A
            { }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Class:3                                       [A:1] (A:1)
            Class:4                                       [B:3] (B:3)
             DerivedTypeOf-> Class:3                      [A:1] (A:1)
            </code>
            <para>
            Class:4 B:3 <b>Derived Type Of</b> Class:3.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.InstantiatedBy">
            <summary>
            Represents an "instantiated by" relationship where a type is instantiated by another block.
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            public class A
            {
              public A() { }
            }
            public class B
            {
              private methodB()
              {
                  A cA = new A();
              }
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Class:3                                     [A:1] (A:1)
              InstantiatedBy-> Instantiation:13         [A:1] (A:1)
            Class:7                                     [B:4] (B:4)
             Function:8                                 [methodB:6].[B:4] (B:4)
              Instantiation:13                          [A:1] (A:1)
            </code>
            <para>
            <br />
            Class:3 A:1 <b>Instantiated by</b> Instantiation:13.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.Instantiates">
            <summary>
            Represents an "instantiates" relationship where a block (such as a generic or template instantiation) creates an instance of a type.
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            public class A
            {
              public A() { }
            }
            public class B
            {
              private methodB()
              {
                  A cA = new A();
              }
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Class:3                                     [A:1] (A:1)
            Class:7                                     [B:4] (B:4)
             Function:8                                 [methodB:6].[B:4] (B:4)
              Instantiation:13                          [A:1] (A:1)
                Instantiates-> Class:3                  [A:1] (A:1)
            </code>
            <para>
             Instantiation:13 <b>Instantiates</b> Class:3.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.Declares">
            <summary>
            Represents a "declares" relationship where a forward-declaration block declares another block (such as a definition).
            </summary>
            <remarks>
            <b>Code example C:</b> <br />
            <code>
            extern "C" int foo();
            extern "C" int foo() { return 0; }
            extern "C" {
              int bar();
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Declaration:3                                 [foo:1] (int:-3)
             Declares-> Function:4                        [foo:1] (int:-3)
            Function:4                                    [foo:1] (int:-3)
            </code>
            <para>
            Declaration:3 foo:1 <b>Declares</b> Function:4.
            <br />
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.DeclaredBy">
            <summary>
            Represents a "declared by" relationship where a definition block is declared by a forward-declaration block.
            </summary>
            <remarks>
            <b>Code example C:</b> <br />
            <code>
            extern "C" int foo();
            extern "C" int foo() { return 0; }
            extern "C" {
              int bar();
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Declaration:3                                 [foo:1] (int:-3)
              Declares-> Function:4                        [foo:1] (int:-3)
            Function:4                                    [foo:1] (int:-3)
              DeclaredBy-> Declaration:3                   [foo:1] (int:-3)
            </code>
            <para>
            <br />
            Function:4 foo:1 is <b>Declared by</b> Declaration:3.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.AccessedBy">
            <summary>
            Represents an "accessed by" relationship where a variable is accessed by another block.
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            public class Foo
            {
              private int mem_;
              public Foo()
              {
                mem_ = 0;
              }
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Class:3                                       [Foo:1] (Foo:1)
            Variable:5                                    [mem_:3].[Foo:1] (int:-10)
              AccessedBy-> Assignment:9                   |mem_ = 0|
              Function:6                                  [Foo:4].[Foo:1] (Foo:1)
                Assignment:9                              |mem_ = 0|
            </code>
            <para>
            Variable:5 <b>is Accessed by</b> Assignment:9
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.Accesses">
            <summary>
            Represents an "accesses" relationship where a block accesses a variable.
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            public class Foo
            {
              private int mem_;
              public Foo()
              {
                mem_ = 0;
              }
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Class:3                                       [Foo:1] (Foo:1)
            Variable:5                                    [mem_:3].[Foo:1] (int:-10)
              Function:6                                  [Foo:4].[Foo:1] (Foo:1)
                Assignment:9                              |mem_ = 0|
                 Accesses-> Variable:5                    [mem_:3].[Foo:1] (int:-10)
            </code>
            <para>
            Assignment:9 <b>accesses</b> Variable:5
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.TypeFor">
            <summary>
            Represents a "type for" relationship where a type block is associated with a variable or function block.
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            public class CustomProperty { }
            public class CustomTypeUsage
             {
                public CustomProperty ARecordProperty { get; private set; }
             }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Class:3                                       [CustomProperty:1] (CustomProperty:1)
              TypeFor-> Variable:6                        [ARecordProperty:5].[CustomTypeUsage:3]
            Class:4                                       [CustomTypeUsage:3] (CustomTypeUsage:3)
              Field:5                                     |public CustomProperty ARecordProper...|
              Variable:6                                  [ARecordProperty:5].[CustomTypeUsage:3] (CustomProperty:1)
            </code>
            <para>
            <br />
            Class:3 CustomProperty:1 <b>is Type for</b> Variable:6.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.TypeOf">
            <summary>
            Represents a "type of" relationship where a variable or function block is associated with a type block.
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            public class CustomProperty { }
            public class CustomTypeUsage
            {
                public CustomProperty ARecordProperty { get; private set; }
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Class:3                                       [CustomProperty:1] (CustomProperty:1)
            Class:4                                       [CustomTypeUsage:3] (CustomTypeUsage:3)
              Field:5                                     |public CustomProperty ARecordProper...|
              Variable:6                                  [ARecordProperty:5].[CustomTypeUsage:3]
              TypeOf-> Class:3                            [CustomProperty:1] (CustomProperty:1)
            </code>
            <para>
            Variable:6 ARecordProperty:5 <b>is type of</b> Class:3.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.Qualifies">
            <summary>
            Represents a "qualifies" relationship where a type definition, such as classes and structs qualifies a function or variable.
            In other words, the type block is a qualifier for the function or variable.
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            public class CustomType
            { }
            public class GenericList&lt;T&gt;
            { }
            public class Program
            {
                GenericList&lt;CustomType&gt; customList;
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Class:3                                       [CustomType:1] (CustomType:1)
             Qualifies-> Class:4                          [GenericList:3] (GenericList:3)
            Class:4                                       [GenericList:3] (GenericList:3)
            Class:5                                       [Program:5] (Program:5)
              Variable:7                                  [customList:7].[Program:5] (GenericList:3)
            </code>
            <para>
            <br />
            Class:3 CustomType:1 <b>Qualifies</b> Class:4 GenericList:3.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.QualifiedBy">
            <summary>
            Represents a "qualified by" relationship where a type definition is used as the qualifier type for a function or variable.
            This is commonly seen in generic classes or templates, where one type is qualified by another type.
            </summary>
            <remarks>
            The following code example demonstrates the use of the "qualified by" relation:
            <code>
            public class CustomType
            { }
            public class GenericList&lt;T&gt;
            { }
            public class Program
            {
                GenericList&lt;CustomType&gt; customList;
            }
            </code>
            The code example will output a code graph including:
            <code>
            Class:3                                       [CustomType:1] (CustomType:1)
             Qualifies-> Class:4                          [GenericList:3] (GenericList:3)
            Class:4                                       [GenericList:3] (GenericList:3)
             QualifiedBy-> Class:3                        [CustomType:1] (CustomType:1)
            Class:5                                       [Program:5] (Program:5)
              Variable:7                                  [customList:7].[Program:5] (GenericList:3)
            </code>
            <para>
            Class:4 GenericList:3 <b>is Qualified by</b> Class:3 CustomType:1.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.Member">
            <summary>
            Represents a "member" relationship where a type block has a member block (such as a field or method).
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            namespace Other
            {
               public class A
                {
                    public void GetBytes()
                    { }
                }
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
             Namespace:3                                   [Other:1]
              Member-> Class:4                             [A:2].[Other:1] (A:2)
               Class:4                                     [A:2].[Other:1] (A:2)
            </code>
            <para>
            <br />
            Namespace:3 Other:1 has <b>Member </b> Class:4.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.MemberOf">
            <summary>
            Represents a "member of" relationship where a block is a member of a type (such as a class or struct).
            </summary>
            <remarks>
            <b>Code example C#:</b> <br />
            <code>
            namespace Other
            {
               public class A
                { }
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
             Namespace:3                                   [Other:1]
              Member-> Class:4                             [A:2].[Other:1] (A:2)
               Class:4                                     [A:2].[Other:1] (A:2)
               MemberOf-> Namespace:3                      [Other:1]
            </code>
            <para>
            Class:4 A:2 is <b>member of </b>Namespace:3.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.ExpandedBy">
            <summary>
            Represents a "expanded by" relationship where a macro block is expanded by a statement block.
            </summary>
            <remarks>
            <b>Code example C:</b> <br />
            <code>
            #define TAKES_BLOCK(x, block) for (i = 0; i &lt; x; i++) block
            int main(void) {
              { }
                TAKES_BLOCK(10, {
                });
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Macro:3                                       [TAKES_BLOCK:1]
             ExpandedBy-> Statement:9                     |  TAKES_BLOCK(10, {\r\n    // Doesn't m...|
            Function:4                                    [main:2] (int:-3)
              Statement/For*:9                            |  TAKES_BLOCK(10, {\r\n    // Doesn't m...|
               Expands-> Macro:3                          [TAKES_BLOCK:1]
            </code>
            <para>
            <br />
            Macro:3 <b>is Expanded by</b> Statement:9.
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.Expands">
            <summary>
            Represents a "expands" relationship where a statement block expands a macro block.
            </summary>
            <remarks>
            <b>Code example C:</b> <br />
            <code>
            #define TAKES_BLOCK(x, block) for (i = 0; i &lt; x; i++) block
            int main(void) {
              { }
                TAKES_BLOCK(10, {
                });
            }
            </code>
            <b>Blocks output:</b> <br />
            <code>
            Macro:3                                       [TAKES_BLOCK:1]
            Function:4                                    [main:2] (int:-3)
              Statement/For*:9                            |  TAKES_BLOCK(10, {\r\n    // Doesn't m...|
               Expands-> Macro:3                          [TAKES_BLOCK:1]
            </code>
            <para>
            <br />
            Statement:9 For*:9 <b>Expands</b> Macro:3
            </para>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.ImportedBy">
            <summary>
            Represents an "imported by" relationship where a file block is imported by another file block.
            </summary>
            <remarks>
            <b>Code example C:</b> <br />
            <code>
            #include "a.h"
            </code>
            <b>Blocks output:</b> <br />
            <code>
            File:2                                         x.c
             Import:4                                      |#include "a.h"\r\n|
              Imports-> File:3                             a.h
            File:3                                         a.h
             ImportedBy-> Import:4                         |#include "a.h"\r\n|
            </code>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.Imports">
            <summary>
            Represents an "imports" relationship where a file block imports another file block.
            </summary>
            <remarks>
            <b>Code example C:</b> <br />
            <code>
            #include "a.h"
            </code>
            <b>Blocks output:</b> <br />
            <code>
            File:2                                         x.c
             Import:4                                      |#include "a.h"\r\n|
              Imports-> File:3                             a.h
            File:3                                         a.h
             ImportedBy-> Import:4                         |#include "a.h"\r\n|
            </code>
            </remarks>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.UsedBy">
            <summary>
            Represents a "UsedBy" relationship for the Symbolic Graph.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationType.Uses">
            <summary>
            Represents a "Uses" relationship for the Symbolic Graph
            </summary>
        </member>
        <member name="F:Astred.GraphLib.RelationTypeBounds.MinRelationType">
            <summary>
            The minimum value in the BlockRelationType enumeration, used for iteration and validation.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.RelationTypeBounds.MaxRelationType">
            <summary>
            The maximum value in the BlockRelationType enumeration, used for iteration and validation.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.ControlType">
            <summary>
            Defines the type of control flow of a statement block. A control flow statement is a statement
            that interrupts or alters the purely sequencential execution of statements.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Sequential">
            <summary>
            The statement has no control-flow impact.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.If">
            <summary>
            An 'if' statement. Like "if (condition) { }" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Else">
            <summary>
            An 'else' statement following an 'if'. Like "if (condition) { } else { }" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Elif">
            <summary>
            An 'else-if' statement following an 'if'.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.For">
            <summary>
            A 'for' statement. A 'for' with no condition is an infinite loop. Like "for (;;) {}" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Foreach">
            <summary>
            A 'foreach' statement. Like "foreach (var x in array) { }" in C#.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Do">
            <summary>
            A 'do' statement. Like "do { } while (condition)" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.While">
            <summary>
            A 'while' statement. Like "while (condition) { }" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Match">
            <summary>
            A 'match' statement.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Switch">
            <summary>
            A 'switch' statement. Like "switch (condition) { case X: .. default: ... }" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Case">
            <summary>
            A 'case' statement. Like "switch (condition) { case X: or default: }" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Continue">
            <summary>
            A 'continue' statement. Like "for (;;) { continue }" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Break">
            <summary>
            A 'break' statement. Like "for (;;) { break; }" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Goto">
            <summary>
            A 'goto' statement. Like "goto label;" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Label">
            <summary>
            A labeled target statement. Like "label: " in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Throw">
            <summary>
            A 'throw' statement, which throws an exception. Like "throw new Exception()" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Catch">
            <summary>
            A 'catch' stament. Like "try { ... } catch () {}" in C#.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Return">
            <summary>
            A 'return' staement not at the end of a function. Like "foo() { if () return -1; else ... }
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.PreprocIf">
            <summary>
            A preprocessor '#if' statement. Like "#if ... #endif" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.PreprocElif">
            <summary>
            A preprocessor '#elif' statement. Like "#if ... #elif conditon ... #endif" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.PreprocElse">
            <summary>
            A preprocessor '#else' statement. Like "#if ... #else ... #endif" in C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Select">
            <summary>
            Match statement. Similar to match in Rust. Used for channel selection in Go.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Try">
            <summary>
            Try Statement. Like "try { } catch { }" in C#.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Await">
            <summary>
            Await statement.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.ControlType.Yield">
            <summary>
            Yield statement.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.SliceState">
            <summary>
            Determines if a block's text should be included in sliced output of the graph.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SliceState.Inherit">
            <summary>
            Specifies that the block's text should be include in sliced output if its parent is included,
            and excluded if its parent is excluded.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SliceState.Exclude">
            <summary>
            Specifies that the block's text should be excluded in sliced output.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SliceState.Include">
            <summary>
            Specifies that the block's text should be included in sliced output.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.TraversalMode">
            <summary>
            Defines the mode of traversing blocks in the graph.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.TraversalMode.DepthFirst">
            <summary>
            Specifies that the graph should be traversed in a depth-first manner.
            In this mode, the traversal starts at the root and explores as far as possible along each branch before backtracking.
            This is useful for scenarios where you need to explore all the nodes on a path before moving to another path.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.TraversalMode.BreadthFirst">
            <summary>
            Specifies that the graph should be traversed in a breadth-first manner.
            In this mode, the traversal starts at the root and explores the neighbor nodes first, before moving to the next level of neighbors.
            This is useful for scenarios where you need to explore the graph level by level or when you need to find the shortest path between nodes.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.BlockEditStatus">
            <summary>
            Collects the differences in block relations between the expected and actual relations.
            Represents the status of edits made to a block in the graph.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockEditStatus.None">
            <summary>
            No edits have been made.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockEditStatus.Insert">
            <summary>
            A new block has been inserted.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockEditStatus.Delete">
            <summary>
            An existing block has been deleted.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockEditStatus.Update">
            <summary>
            An existing block has been updated.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockEditStatus.RelationsModifiedMask">
            <summary>
            Indicates that the relations of the block have been modified.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockEditStatus.RelationsAdded">
            <summary>
            Indicates that relations have been added to the block.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockEditStatus.RelationsDeleted">
            <summary>
            Indicates that relations have been deleted from the block.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockEditStatus.EditStatusMask">
            <summary>
            Mask for the edit status, preserving the lower nibble (4 bits).
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockEditStatus.RelationsEditMask">
            <summary>
            Mask for the relations edit status, preserving the upper nibble (4 bits).
            </summary>
        </member>
        <member name="T:Astred.GraphLib.BlockFilterAction">
            <summary>
            Defines the action for a tree search comparison.
            This delegate is used as a filter function during tree traversal operations.
            It allows the caller to determine whether to include the current block in the result set,
            whether to continue the recursion into the block's children, and whether to stop the traversal altogether.
            </summary>
            <param name="block">The current block being visited during the traversal.</param>
            <param name="recurse">A reference to a boolean that the delegate can set to indicate whether to recurse into the block's children.</param>
            <param name="stop">A reference to a boolean that the delegate can set to indicate whether to stop the traversal immediately.</param>
            <returns>A boolean indicating whether the current block should be included in the result set.</returns>
        </member>
        <member name="T:Astred.GraphLib.Block">
            <summary>
            Represents a block in the code graph, which is a fundamental unit of structure within a programming language's AST.
            Blocks can represent various language constructs such as classes, functions, variables, and more. Each block has a type,
            associated symbol information, and source code positions. Blocks are organized hierarchically and can have relationships
            with other blocks to represent dependencies and interactions within the code.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.Name">
            <summary>
            Gets the name of the block. For files, this is the file name. For classes, functions, variables, etc., this is the
            symbol name.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.BlockType">
            <summary>
            Gets the type of this block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.Symbol">
            <summary>
            Gets the primary symbols for this block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.StartPosition">
            <summary>
            Gets the start position of this block in the source code.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.Begrc">
            <summary>
            Gets the start position of this block in the source code.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.EndPosition">
            <summary>
            Gets the end position of this block in the source code.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.Endrc">
            <summary>
            Gets the end position of this block in the source code.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.SliceState">
            <summary>
            Gets or sets the slicing state of the block, which determines if the block's text should be included
            in sliced output of the graph. The slicing state can be set to include, exclude, or inherit, which
            affects how the block is treated during operations that generate a subset of the graph's code, such as
            code slicing or partial code analysis.
            </summary>
            <value>
            The slicing state of the block as a <see cref="T:Astred.GraphLib.SliceState"/> value.
            </value>
        </member>
        <member name="P:Astred.GraphLib.Block.Comments">
            <summary>
            Gets the comments associated with this block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.Placeit">
            <summary>
            Gets the placeit value, which is used for determining hierarchical relationships between blocks.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.Endit">
            <summary>
            Gets the endit value, which is used in conjunction with placeit to determine hierarchical relationships.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.Id">
            <summary>
            Gets the unique identifier for this block.
            Should be used *ONLY* for debugging and testing.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.Ast">
            <summary>
            Gets the root AST node corresponding to this block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.Parent">
            <summary>
            Gets the parent block of this block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.Children">
            <summary>
            Gets the child blocks of this block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.ChildrenAsSet">
            <summary>
            Gets the child blocks of this block as a set.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.AllRelatedBlocks">
            <summary>
            Gets the set of related blocks associated with this block.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.Block.emptyBlockList">
            <summary>
            An empty list of blocks, used as a default value when no children are present.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.Block.emptySliceList">
            <summary>
            An empty list of slices, used as a default value when no slices are present.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.EditStatus">
            <summary>
            Gets or sets the edit status of the block.
            The getter returns the lower nibble (4 bits) of the edit status.
            The setter modifies only the lower nibble (4 bits) of the edit status, preserving the upper nibble.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.RelationsEditStatus">
            <summary>
            Gets or sets the relations edit status of the block.
            The getter returns the relations modified status if relations have been added or deleted.
            The setter modifies only the upper nibble (4 bits) of the edit status, preserving the lower nibble.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.RelationsAdded">
            <summary>
            Gets the relations added status of the block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.Block.RelationsDeleted">
            <summary>
            Gets the relations deleted status of the block.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.Block.#ctor(Astred.GraphLib.BlockType,Astred.AstLib.AstNodeRoot)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.Block"/> class with the specified block type.
            This constructor is used for creating the root block.
            </summary>
            <param name="blockType">The type of the block.</param>
            <param name="ast">The root AST node for the block.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.#ctor(Astred.GraphLib.Block,Astred.GraphLib.BlockType,Astred.AstLib.AstFile,Astred.AstLib.AstNodeBase,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.Block"/> class with the specified file, block type, and name.
            This constructor is used for creating file blocks.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="file">The type of the block.</param>
            <param name="ast">The root AST node associated with the block.</param>
            <param name="blockType">The type of the block.</param>
            <param name="name">The name of the block.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.#ctor(Astred.GraphLib.Block,Astred.GraphLib.BlockType,Astred.AstLib.AstPoint)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.Block"/> class with the specified text point.
            This constructor is used for creating error blocks.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="blockType">The type of the block.</param>
            <param name="rc">The point of the block in the file text.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.#ctor(Astred.GraphLib.Block,Astred.GraphLib.BlockType,Astred.AstLib.AstNodeBase)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.Block"/> class with the specified AST node and block type.
            This constructor is used for creating blocks with automatically determined names based on the associated symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the block.</param>
            <param name="blockType">The type of the block.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.#ctor(Astred.GraphLib.Block,Astred.GraphLib.BlockType,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol,Astred.AstLib.AstNodeBase)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.Block"/> class with the specified AST node, block type, and associated symbol.
            This constructor is used for creating blocks with a specific symbol and optional condition node.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="blockType">The type of the block.</param>
            <param name="ast">The root AST node associated with the block.</param>
            <param name="symbol">The symbol associated with the block.</param>
            <param name="condition">The condition AST node associated with the block, if any.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.#ctor(Astred.GraphLib.Block,Astred.GraphLib.BlockType,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.Block"/> class with the specified AST node, block type, and associated symbol.
            This constructor is used for creating blocks with a specific symbol and optional condition node.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="blockType">The type of the block.</param>
            <param name="ast">The root AST node associated with the block.</param>
            <param name="symbol">The symbol associated with the block.</param>
            <param name="name">The name to use for the block instead of the symbol name.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.ToString">
            <summary>
            Provides a formatted string for debugging purposes.
            </summary>
            <returns>A string representing the block for debugging.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.CompareTo(Astred.GraphLib.Block)">
            <summary>
            Compares the current block with another block and returns an integer that indicates whether the current instance
            precedes, follows, or occurs in the same position in the sort order as the other block.
            </summary>
            <param name="other">The block to compare with this instance.</param>
            <returns>A value that indicates the relative order of the blocks being compared.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.Equals(Astred.GraphLib.Block,Astred.GraphLib.Block)">
            <summary>
            Determines whether the specified blocks are equal.
            </summary>
            <param name="x">The first block to compare.</param>
            <param name="y">The second block to compare.</param>
            <returns>True if the specified blocks are equal; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.GetLanguageName">
            <summary>
            Return the text name of the AstLanguage for this Block.
            </summary>
            <returns>The name of the language for this Block.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.GetHashCode(Astred.GraphLib.Block)">
            <summary>
            Returns a hash code for the specified block.
            </summary>
            <param name="x">The block for which a hash code is to be returned.</param>
            <returns>A hash code for the specified block.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.Contains(Astred.AstLib.AstPoint)">
            <summary>
            Return true if the point is within the block.
            </summary>
            <param name="point">The point to check.</param>
            <returns>True if the point is within the block; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindBlockAt(Astred.AstLib.AstPoint)">
            <summary>
            Returns the block nearest to being a leaf that uniquely contains the specified point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>A block nearest to being a leaf that uniquely contains the specified point.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.GetFullyQualifiedName">
            <summary>
            Returns the fully qualified name of the block, if there is one.
            </summary>
            <returns>The fully qualified name of the block.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.GetRootBlock">
            <summary>
            Returns the root block of the graph where this block belongs to.
            </summary>
            <returns>The root block of the graph.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.GetFileBlock">
            <summary>
            Returns the file block where this block belongs to.
            </summary>
            <returns>The file block associated with this block.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.IsLeaf">
            <summary>
            Returns true if this block is a leaf block, meaning it has no child blocks.
            </summary>
            <returns>True if the block is a leaf block; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.AddChildBlock(Astred.GraphLib.Block)">
            <summary>
            Adds the specified child block to this block, establishing a parent-child relationship.
            </summary>
            <param name="childBlock">The child block to add to this block.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.AddRelatedBlock(Astred.GraphLib.Block,Astred.GraphLib.BlockRelationType)">
            <summary>
            Adds the specified related block to this block, establishing a relationship of the specified type.
            </summary>
            <param name="block">The related block to add.</param>
            <param name="relation">The type of relationship to establish between the blocks.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.FindRelatedBlocksByRelation(Astred.GraphLib.BlockRelationType)">
            <summary>
            Returns the related blocks of this block by the specified relation.
            </summary>
            <param name="relation">The type of relationship to filter the related blocks.</param>
            <returns>An enumerable collection of related blocks.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindRelatedBlocksByRelationList(Astred.GraphLib.BlockRelationType)">
            <summary>
            Returns the related blocks of this block by the specified relation.
            </summary>
            <param name="relation">The type of relationship to filter the related blocks.</param>
            <returns>An enumerable collection of related blocks.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindRelatedBlocksByRelation``1(Astred.GraphLib.BlockRelationType)">
            <summary>
            Returns the related blocks of this block by the specified relation, cast to the specified type.
            </summary>
            <typeparam name="T">The type to which the related blocks should be cast.</typeparam>
            <param name="relation">The type of relationship to filter the related blocks.</param>
            <returns>An enumerable collection of related blocks cast to the specified type.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.RemoveRelatedBlock(Astred.GraphLib.Block,System.Nullable{Astred.GraphLib.BlockRelationType})">
            <summary>
            Removes a related block from this block.
            </summary>
            <param name="target">The related block to remove.</param>
            <param name="relation">The type of relationship to remove, if specified.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.FindRelationTo(Astred.GraphLib.Block)">
            <summary>
            Returns the relation to the specified block.
            </summary>
            <param name="target">The block for which to find the relation.</param>
            <returns>The type of relationship to the specified block, if any; otherwise, BlockRelationType.None.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.HasRelationTo(Astred.GraphLib.Block,Astred.GraphLib.BlockRelationType)">
            <summary>
            Determine if this block has the specified relation to the specified block.
            </summary>
            <param name="block">The block to check for the relation.</param>
            <param name="relation">The type of relationship to check.</param>
            <returns>True if this block has the specified relation to the specified block; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.GetRelatedCount(Astred.GraphLib.BlockRelationType)">
            <summary>
            Returns the count of related blocks for the specified relation.
            </summary>
            <param name="relation">The type of relationship to count the related blocks.</param>
            <returns>The count of related blocks for the specified relation.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindRelatedBlockSet(Astred.GraphLib.BlockRelationType)">
            <summary>
            Returns a read-only set of related blocks for the specified relation.
            </summary>
            <param name="relation">The type of relationship to filter the related blocks.</param>
            <returns>A read-only set of related blocks for the specified relation.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.HasInterestingRelations">
            <summary>
            Determines if this block has any related blocks with interesting relations.
            </summary>
            <returns>True if there are any related blocks with interesting relations; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindChildren``1">
            <summary>
            Finds child blocks of a specific type.
            </summary>
            <typeparam name="T">The type of child blocks to find.</typeparam>
            <returns>An enumerable collection of child blocks of the specified type.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindChildren(System.Nullable{Astred.GraphLib.BlockType},System.Nullable{Astred.GraphLib.BlockRelationType},System.Nullable{Astred.AstLib.AstField},System.Nullable{Astred.AstLib.AstToken},System.String,System.String)">
            <summary>
            Returns the (direct) child blocks of the block matching the filter criteria.
            </summary>
            <param name="blockType">The type of child blocks to find.</param>
            <param name="blockRelationType">The type of relationship to filter the child blocks.</param>
            <param name="astField">The AST field to filter the child blocks.</param>
            <param name="astToken">The AST token to filter the child blocks.</param>
            <param name="fullyQualifiedName">The fully qualified name to filter the child blocks.</param>
            <param name="name">The name to filter the child blocks.</param>
            <returns>An enumerable collection of child blocks matching the filter criteria.</returns>
            <remarks>
            This method allows for filtering child blocks based on various criteria such as block type,
            relationship type, AST field, AST token, fully qualified name, and block name. It only considers
            direct children of the current block and does not traverse deeper into the hierarchy.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.DeclarationToDefinitionAsCan">
            <summary>
            Converts a declaration block to its corresponding definition block, if possible.
            </summary>
            <returns>The definition block corresponding to this declaration block, or this block if no definition is found.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindFunctionsOf">
            <summary>
            Finds function blocks that are descendants of this block.
            </summary>
            <returns>An enumerable collection of function blocks that are part of this block.</returns>
            <remarks>
            This method traverses the hierarchy of blocks within the current block to find all function blocks.
            It includes both direct children and deeper descendants that represent function declarations.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindBaseTypesOf">
            <summary>
            Finds base type blocks of this block.
            </summary>
            <returns>An enumerable collection of base type blocks of this block.</returns>
            <remarks>
            This method retrieves all blocks that represent base types of the current block, effectively
            tracing the inheritance hierarchy upwards. It includes both direct base types and transitive
            base types (i.e., the base types of base types, recursively).
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindDescendants(System.Nullable{Astred.GraphLib.BlockType},System.Collections.Generic.List{Astred.GraphLib.BlockType},System.Nullable{Astred.GraphLib.BlockRelationType},System.Collections.Generic.List{Astred.GraphLib.BlockRelationType},System.Nullable{Astred.AstLib.AstField},System.Nullable{Astred.AstLib.AstToken},System.String,System.String,Astred.GraphLib.TraversalMode)">
            <summary>
            Returns the descendant blocks (recursively) of the block matching the filter criteria.
            </summary>
            <param name="blockType">The type of descendant blocks to find.</param>
            <param name="blockTypes">A list of types of descendant blocks to find.</param>
            <param name="blockRelationType">The type of relationship to filter the descendant blocks.</param>
            <param name="blockRelationTypes">A lsit of types of relationships to filter the descendant blocks.</param>
            <param name="astField">The AST field to filter the descendant blocks.</param>
            <param name="astToken">The AST token to filter the descendant blocks.</param>
            <param name="fullyQualifiedName">The fully qualified name to filter the descendant blocks.</param>
            <param name="name">The name to filter the descendant blocks.</param>
            <param name="traversalMode">The mode of traversing blocks in the graph.</param>
            <returns>An enumerable collection of descendant blocks matching the filter criteria.</returns>
            <remarks>
            This method allows for filtering descendant blocks based on various criteria such as block type,
            relationship type, AST field, AST token, fully qualified name, and block name. It considers
            all descendants of the current block, traversing recursively into the hierarchy.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindDescendants">
            <summary>
            Returns the descendant blocks (recursively) of the current block.
            </summary>
            <returns>An enumerable collection of all descendant blocks.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindDescendants``1">
            <summary>
            Finds all descendant blocks of a specific type within the hierarchy of this block.
            </summary>
            <typeparam name="T">The type of descendant blocks to find.</typeparam>
            <returns>An enumerable collection of descendant blocks of the specified type.</returns>
            <remarks>
            This method performs a recursive search through all child blocks and their descendants,
            returning only those blocks that are of the specified type <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindDescendants(Astred.GraphLib.BlockType)">
            <summary>
            Returns the descendant blocks (recursively) of the current block with the given <see cref="T:Astred.GraphLib.BlockType"/>.
            </summary>
            <param name="blockType">The <see cref="T:Astred.GraphLib.BlockType"/> of descendant blocks to find.</param>
            <returns>An enumerable collection of all the selected descendant blocks.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindDescendants(Astred.GraphLib.BlockType,Astred.GraphLib.BlockType)">
            <summary>
            Returns the descendant blocks (recursively) of the current block with the given <see cref="T:Astred.GraphLib.BlockType"/>.
            </summary>
            <param name="blockType1">A <see cref="T:Astred.GraphLib.BlockType"/> of descendant blocks to find.</param>
            <param name="blockType2">A <see cref="T:Astred.GraphLib.BlockType"/> of descendant blocks to find.</param>
            <returns>An enumerable collection of all the selected descendant blocks.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindDescendants(Astred.GraphLib.BlockType,Astred.GraphLib.BlockType,Astred.GraphLib.BlockType)">
            <summary>
            Returns the descendant blocks (recursively) of the current block with the given <see cref="T:Astred.GraphLib.BlockType"/>.
            </summary>
            <param name="blockType1">A <see cref="T:Astred.GraphLib.BlockType"/> of descendant blocks to find.</param>
            <param name="blockType2">A <see cref="T:Astred.GraphLib.BlockType"/> of descendant blocks to find.</param>
            <param name="blockType3">A <see cref="T:Astred.GraphLib.BlockType"/> of descendant blocks to find.</param>
            <returns>An enumerable collection of all the selected descendant blocks.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindDescendants(Astred.GraphLib.BlockType,Astred.GraphLib.BlockType,Astred.GraphLib.BlockType,Astred.GraphLib.BlockType)">
            <summary>
            Returns the descendant blocks (recursively) of the current block with the given <see cref="T:Astred.GraphLib.BlockType"/>.
            </summary>
            <param name="blockType1">A <see cref="T:Astred.GraphLib.BlockType"/> of descendant blocks to find.</param>
            <param name="blockType2">A <see cref="T:Astred.GraphLib.BlockType"/> of descendant blocks to find.</param>
            <param name="blockType3">A <see cref="T:Astred.GraphLib.BlockType"/> of descendant blocks to find.</param>
            <param name="blockType4">A <see cref="T:Astred.GraphLib.BlockType"/> of descendant blocks to find.</param>
            <returns>An enumerable collection of all the selected descendant blocks.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindDescendants(Astred.GraphLib.BlockFilterAction)">
            <summary>
            Finds descendant blocks that match a given filter action.
            </summary>
            <param name="filter">The filter action to apply during the traversal.</param>
            <returns>An enumerable collection of descendant blocks that match the filter action.</returns>
            <remarks>
            This method performs a recursive traversal of the block hierarchy, applying the provided filter action
            to each block. The filter action determines whether to include the block in the result set, whether to
            continue recursion into the block's children, and whether to stop the traversal. This allows for
            fine-grained control over the traversal process and the resulting collection of blocks.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindDescendants(System.Collections.Generic.List{Astred.GraphLib.BlockFilterAction})">
            <summary>
            Finds descendant blocks that match all given filter actions.
            </summary>
            <param name="filters">List of filter actions to apply.</param>
            <returns>An enumerable collection list of blocks that match all given filter actions.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindBlockAndDescendants">
            <summary>
            Finds the block and all its descendant blocks in the graph, returning them as an enumerable collection.
            This method performs a depth-first traversal starting from the current block, including the block itself
            in the results, followed by its children and their descendants recursively.
            </summary>
            <returns>An enumerable collection of the block and its descendant blocks.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindBlockAndDescendants(Astred.GraphLib.BlockFilterAction)">
            <summary>
            Finds current block and descendant blocks that match a given filter action.
            </summary>
            <param name="filter">The filter action to apply during the traversal.</param>
            <returns>An enumerable collection containing the block and descendant blocks that match the filter action.</returns>
            <remarks>
            This method performs a recursive traversal of the block hierarchy, applying the provided filter action
            to each block. The filter action determines whether to include the block in the result set, whether to
            continue recursion into the block's children, and whether to stop the traversal. This allows for
            fine-grained control over the traversal process and the resulting collection of blocks.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindBlockAndDescendants(System.Collections.Generic.List{Astred.GraphLib.BlockFilterAction})">
            <summary>
            Finds current block and descendant blocks that match all given filter actions.
            </summary>
            <param name="filters">List of filter actions to apply.</param>
            <returns>The list of blocks that match all given filter actions.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindTopDescendants``1">
            <summary>
            Finds the top descendant blocks of a specific type within the hierarchy of this block.
            </summary>
            <typeparam name="T">The type of top descendant blocks to find.</typeparam>
            <returns>An enumerable collection of top descendant blocks of the specified type.</returns>
            <remarks>
            This method performs a search through all child blocks and their descendants, returning only
            those blocks that are of the specified type <typeparamref name="T"/> and are not themselves
            descendants of another block of the same type.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindTopDescendants(Astred.GraphLib.BlockType)">
            <summary>
            Finds the top descendant blocks of the specified block type within the hierarchy of this block.
            </summary>
            <param name="blockType">The type of block to find.</param>
            <returns>An enumerable collection of top descendant blocks of the specified type.</returns>
            <remarks>
            This method performs a search through all child blocks and their descendants, returning only
            those blocks that match the specified <paramref name="blockType"/> and are not themselves
            descendants of another block of the same type.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindTopDescendants(Astred.GraphLib.BlockType,Astred.GraphLib.BlockType)">
            <summary>
            Finds the top descendant blocks of either of the specified block types within the hierarchy of this block.
            </summary>
            <param name="blockType1">A block type to find.</param>
            <param name="blockType2">A block type to find.</param>
            <returns>An enumerable collection of top descendant blocks of the specified types.</returns>
            <remarks>
            This method performs a search through all child blocks and their descendants, returning only
            those blocks that match either <paramref name="blockType1"/> or <paramref name="blockType2"/>, and are not
            themselves descendants of another block of the same types.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindTopDescendants(Astred.GraphLib.BlockType,Astred.GraphLib.BlockType,Astred.GraphLib.BlockType)">
            <summary>
            Finds the top descendant blocks of any of the specified block types within the hierarchy of this block.
            </summary>
            <param name="blockType1">A block type to find.</param>
            <param name="blockType2">A block type to find.</param>
            <param name="blockType3">A block type to find.</param>
            <returns>An enumerable collection of top descendant blocks of the specified types.</returns>
            <remarks>
            This method performs a search through all child blocks and their descendants, returning only
            those blocks that match any of the specified types <paramref name="blockType1"/>, <paramref name="blockType2"/>,
            or <paramref name="blockType3"/>, and are not themselves descendants of another block of the same types.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindTopDescendants(Astred.GraphLib.BlockType,Astred.GraphLib.BlockType,Astred.GraphLib.BlockType,Astred.GraphLib.BlockType)">
            <summary>
            Finds the top descendant blocks of any of the specified block types within the hierarchy of this block.
            </summary>
            <param name="blockType1">A block type to find.</param>
            <param name="blockType2">A block type to find.</param>
            <param name="blockType3">A block type to find.</param>
            <param name="blockType4">A block type to find.</param>
            <returns>An enumerable collection of top descendant blocks of the specified types.</returns>
            <remarks>
            This method performs a search through all child blocks and their descendants, returning only
            those blocks that match any of the specified types <paramref name="blockType1"/>, <paramref name="blockType2"/>,
            <paramref name="blockType3"/>, or <paramref name="blockType4"/>, and are not themselves descendants of another
            block of the same types.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindAncestors(System.String,System.String,System.String,System.Nullable{Astred.GraphLib.BlockType},System.Nullable{Astred.GraphLib.BlockRelationType})">
            <summary>
            Returns the ancestor blocks (recursively) of the block matching the filter criteria.
            </summary>
            <param name="name">The name to filter the ancestor blocks.</param>
            <param name="fullyQualifiedName">The fully qualified name to filter the ancestor blocks.</param>
            <param name="astNodeName">The AST node name to filter the ancestor blocks.</param>
            <param name="blockType">The type of ancestor blocks to find.</param>
            <param name="blockRelationType">The type of relationship to filter the ancestor blocks.</param>
            <returns>An enumerable collection of ancestor blocks matching the filter criteria.</returns>
            <remarks>
            This method retrieves ancestor blocks of the current block that match the specified filter criteria.
            It traverses the block hierarchy upwards, considering each parent block and its ancestors. The filter
            criteria can include block name, fully qualified name, AST node name, block type, and relationship type.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindFirstAncestor(System.String,System.String,System.String,System.Nullable{Astred.GraphLib.BlockType},System.Nullable{Astred.GraphLib.BlockRelationType})">
            <summary>
            Returns the first ancestor block of this block that matches the filter criteria.
            </summary>
            <param name="name">The name to filter the ancestor blocks.</param>
            <param name="fullyQualifiedName">The fully qualified name to filter the ancestor blocks.</param>
            <param name="astNodeName">The AST node name to filter the ancestor blocks.</param>
            <param name="blockType">The type of ancestor blocks to find.</param>
            <param name="blockRelationType">The type of relationship to filter the ancestor blocks.</param>
            <returns>The first ancestor block that matches the filter criteria.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindFirstAncestor(System.String,System.String,System.String,System.Collections.Generic.HashSet{Astred.GraphLib.BlockType},System.Collections.Generic.HashSet{Astred.GraphLib.BlockRelationType})">
            <summary>
            Returns the first ancestor block of this block that matches the filter criteria.
            </summary>
            <param name="name">The name to filter the ancestor blocks.</param>
            <param name="fullyQualifiedName">The fully qualified name to filter the ancestor blocks.</param>
            <param name="astNodeName">The AST node name to filter the ancestor blocks.</param>
            <param name="blockType">A set of types of ancestor blocks to find.</param>
            <param name="blockRelationType">A set of type of relationships to filter the ancestor blocks.</param>
            <returns>The first ancestor block that matches the filter criteria.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FindRecursiveRelatedBlocksByRelation(Astred.GraphLib.BlockRelationType)">
            <summary>
            Returns a set with the relations of the currrent block and its descendants (recursively).
            </summary>
        </member>
        <member name="M:Astred.GraphLib.Block._FindRecursiveRelatedBlocksByRelation(Astred.GraphLib.BlockRelationType,System.Collections.Generic.HashSet{Astred.GraphLib.Block})">
            <summary>
            Finds the relations of the current block and its descendants (recursively), accumulating them in the relatedBlocks set.
            </summary>
            <param name="relation">The relation to look for</param>
            <param name="blocks">This parameter will accumulated the related blocks</param>
        </member>
        <member name="M:Astred.GraphLib.Block.FindRecursiveRelationsAll(System.Collections.Generic.HashSet{Astred.GraphLib.BlockRelationType})">
            <summary>
            Returns a list of tuples of source block, relation and target block of the current Block and its descendants.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.Block._FindRecursiveRelationsAll(System.Collections.Generic.HashSet{Astred.GraphLib.BlockRelationType},System.Collections.Generic.List{System.ValueTuple{Astred.GraphLib.Block,Astred.GraphLib.BlockRelationType,Astred.GraphLib.Block}})">
            <summary>
            Gets the list of relations and related blocks recursively, accumulating them in a List with
            tuples as: (block source, relation type, target block).
            </summary>
            <param name="relations">A hashset of relations types</param>
            <param name="list">A list that accumulates the relations and blocks</param>
        </member>
        <member name="M:Astred.GraphLib.Block.Traverse(Astred.GraphLib.TraversalMode)">
            <summary>
            Traverses the block graph in the specified traversal mode.
            </summary>
            <param name="traversalMode">The mode of traversal to use. The default is <see cref="F:Astred.GraphLib.TraversalMode.DepthFirst"/>.</param>
            <returns>An enumerable collection of blocks in the order they are visited during traversal.</returns>
            <remarks>
            This method allows for either depth-first or breadth-first traversal of the block graph, starting from the current block.
            Depth-first traversal explores as far as possible along each branch before backtracking, while breadth-first traversal
            explores the neighbor nodes first, before moving to the next level of neighbors.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.CalculatePlaceIt(System.Int32)">
             <summary>
             Calculates the 'placeit' value for this block and all descendant blocks in the graph.
             The 'placeit' value is used to quickly determine if a block is a descendant of another block.
             </summary>
             <param name="placeit">The starting 'placeit' value. The default is 1.</param>
             <returns>The next 'placeit' value that can be used for subsequent blocks.</returns>
             <remarks>
             This method assigns a 'placeit' value to every block in the graph. The 'placeit' value is used to quickly
             determine if a block is a descendant of another block. A block's 'placeit' value is greater than any block
             above it in the tree and less than the 'endit' value of any block above it. Conversely, a block's 'placeit'
             value is less than any block below it while the block's 'endit' value is greater than the 'placeit' value
             of any block below it. This enables O(1) determination of the hierarchical relationship between any two blocks.
            
             <code>
                       ________[1,11]_________
                      |           |           |         placeit &lt; any child's placeit,
                    [2,5]       [5,8]       [8,11]        endit &gt; and child's placeit.
                   |     |     |     |     |       |
                 [3,4] [4,5] [6,7] [7,8] [9,10] [10,11]
             </code>
            
             Placeit values for the *entire* tree must be recaculated if any part of the tree changes.
             </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.IsDescendantOf(Astred.GraphLib.Block)">
            <summary>
            Determines whether the current block is a descendant of the specified block using the 'placeit'.
            </summary>
            <param name="other">The block to compare with the current block.</param>
            <returns>True if the current block is a descendant of the specified block; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.IsAncestorOf(Astred.GraphLib.Block)">
            <summary>
            Determines whether the current block is an ancestor of the specified block using the 'placeit'.
            </summary>
            <param name="other">The block to compare with the current block.</param>
            <returns>True if the current block is an ancestor of the specified block; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.IsSiblingOf(Astred.GraphLib.Block)">
            <summary>
            Determines whether the current block and the specified block are siblings (have the same parent block).
            </summary>
            <param name="other">The other block.</param>
            <returns>True if the blocks are siblings; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.IsDefinition">
            <summary>
            Checks if block defines its associated symbol.
            </summary>
            <returns>True if it is a definition block; false otherwise.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.IsSymbolDefinition(Astred.AstLib.AstSymbol)">
            <summary>
            Checks if block defines  a given symbol.
            </summary>
            <param name="symbol">The given symbol.</param>
            <returns>True if it defines the symbol; false otherwise.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.FormatBlock">
            <summary>
            Formats the block for display, showing the block's type and additional information if applicable.
            </summary>
            <returns>A string representing the formatted block.</returns>
            <remarks>
            This method provides a concise string representation of the block, including its type and additional
            information such as whether it is a control statement or has an associated condition.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.PrintTreeIt(System.Int32)">
            <summary>
            Prints the tree structure of the block graph to the console, starting from the current block.
            </summary>
            <param name="depth">The starting depth for indentation. The default is 0.</param>
            <returns>The number of blocks printed.</returns>
            <remarks>
            This method is used for debugging and visualization purposes. It prints the hierarchical structure
            of the block graph to the console, with indentation representing the depth of each block in the hierarchy.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.ExportToJson">
            <summary>
            Exports the block graph to a JSON string.
            </summary>
            <returns>A JSON string representing the block graph.</returns>
            <remarks>
            This method serializes the block graph to JSON format, taking into account circular references by
            using block IDs instead of direct references. The resulting JSON string can be used for data interchange
            or for saving the graph to a file.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.ExportToJsonWriter(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Write the block graph to a <see cref="T:System.Text.Json.Utf8JsonWriter"/>.
            </summary>
            <remarks>
            This method serializes the block graph to a JSON writer, taking into account circular references by
            using block IDs instead of direct references.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.PrintBlock(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prints the current block and its properties to the console.
            </summary>
            <param name="depth">The depth of the block in the tree, used for indentation. The default is 0.</param>
            <param name="includeAst">Indicates whether to print the AST node associated with the block. The default is false.</param>
            <param name="showRelations">Indicates whether to print the relations of the block. The default is false.</param>
            <param name="showColor">Indicates whether to use color highlighting for the printed text. The default is true.</param>
            <returns>The number of lines printed to the console.</returns>
            <remarks>
            This method is used for debugging and visualization purposes. It prints the properties of the current block,
            including its type, position in the source code, and associated symbol or AST node text. If <paramref name="showRelations"/>
            is true, it also prints the relationships of the block with other blocks.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindContainingFunction">
            <summary>
            Retrieves the function block that contains the current block, if any.
            </summary>
            <returns>The containing function block, or null if the current block is not within a function block.</returns>
            <remarks>
            This method traverses up the block hierarchy to find the nearest function block that contains the current block.
            It is useful for determining the function context of a given block within the AST.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.FindContainingCompound">
            <summary>
            Retrieves the compound block that contains the current block, if any.
            </summary>
            <returns>The containing compound block, or null if the current block is not within a compound block.</returns>
            <remarks>
            This method traverses up the block hierarchy to find the nearest compound block (such as a class, struct, or namespace)
            that contains the current block. It is useful for determining the structural context of a given block within the AST.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.PrintTree(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prints the entire tree structure of the block graph to the console, starting from the current block.
            </summary>
            <param name="depth">The starting depth for indentation. The default is 0.</param>
            <param name="includeAst">Indicates whether to print the AST nodes associated with each block. The default is false.</param>
            <param name="skipFuncBody">Indicates whether to skip printing the bodies of function blocks. The default is false.</param>
            <param name="showRelations">Indicates whether to print the relations of each block. The default is false.</param>
            <param name="printSliced">Indicates whether to print only blocks that will be included in sliced output. The default is false.</param>
            <returns>The number of blocks printed.</returns>
            <remarks>
            This method is used for debugging and visualization purposes. It prints the hierarchical structure
            of the block graph to the console, with indentation representing the depth of each block in the hierarchy.
            Additional options allow for including or excluding AST nodes and relations in the output.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.GetTopMostSymbols">
            <summary>
            Get the top most symbols in the block hierarchy.
            </summary>
            <returns>An enumberable collection of the top most symbols in the block hierarchy.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.IsIncluded(System.Boolean)">
            <summary>
            Determines whether the current block or any of its descendants are included in the sliced output based on their slice states.
            </summary>
            <param name="parentIncluded"></param>
            <returns>True if the block or any of its descendants will be included in the sliced output.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.GetText(System.Boolean,System.Boolean)">
            <summary>
            Retrieves the textual representation of the block, including its source code and comments if specified.
            </summary>
            <param name="showComments">Indicates whether to include comments in the text. The default is true.</param>
            <param name="showLines">Indicates if lines numbers should be included in the output. Default is true.</param>
            <returns>A string containing the text of the block.</returns>
            <remarks>
            This method returns the developer-readable format of the code, serialized from the AST associated with the block.
            It can include comments if <paramref name="showComments"/> is true.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.AppendAllTextTo(System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <summary>
            Formats the sliced text for the AST to a StringBuilder.
            </summary>
            <param name="sb">The StringBuilder to which to append the sliced text.</param>
            <param name="showComments">Indicates if comments should be included in the output. Default is true.</param>
            <param name="showLines">Indicates if lines numbers should be included in the output. Default is true.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.GetFileLines">
            <summary>
            Retrieves the lines of the source file associated with this block.
            </summary>
            <returns>An enumerable collection of strings, each representing a line of the source file.</returns>
            <remarks>
            This method returns the lines of the source file that correspond to the block's position in the AST.
            It is useful for extracting the relevant code segment for a given block.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.GetLineCount">
            <summary>
            Returns how many lines of the source file are associated with this block.
            </summary>
            <returns>The number of lines.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.GetSliceText(System.Boolean,System.Boolean)">
            <summary>
            Formats the sliced text for the AST to a string.
            </summary>
            <param name="showComments">Indicates if comments should be included in the output. Default is true.</param>
            <param name="showLines">Indicates if lines numbers should be included in the output. Default is true.</param>
            <returns>A string representation of the sliced AST.</returns>
        </member>
        <member name="M:Astred.GraphLib.Block.AppendSliceTextTo(System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <summary>
            Formats the sliced text for the AST to a StringBuilder.
            </summary>
            <param name="sb">The StringBuilder to which to append the sliced text.</param>
            <param name="showComments">Indicates if comments should be included in the output. Default is true.</param>
            <param name="showLines">Indicates if lines numbers should be included in the output. Default is true.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.UpdateSliceSet(Astred.AstLib.AstSliceSet,System.Boolean)">
            <summary>
            Populates the provided <see cref="T:Astred.AstLib.AstSliceSet"/> with slices based on the current block's slice state
            and the slice states of its descendant blocks. This method is used during the process of generating
            sliced output from the graph, where only certain parts of the code are included based on their slice states.
            </summary>
            <param name="sliceSet">The <see cref="T:Astred.AstLib.AstSliceSet"/> to be populated with slices from this block and its descendants.</param>
            <param name="showComments">Indicates if comments should be included in the output. Default is true.</param>
            <remarks>
            This method recursively traverses the block hierarchy starting from the current block and adds or removes
            slices to the provided <see cref="T:Astred.AstLib.AstSliceSet"/> based on the slice state of each block. Blocks marked with
            <see cref="F:Astred.GraphLib.SliceState.Include"/> will have their corresponding code ranges added to the set, while blocks
            marked with <see cref="F:Astred.GraphLib.SliceState.Exclude"/> will have their ranges removed. Blocks with <see cref="F:Astred.GraphLib.SliceState.Inherit"/>
            do not directly affect the set but can inherit the inclusion or exclusion from their parent blocks.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.SetSliceState(Astred.GraphLib.SliceState,System.Boolean)">
            <summary>
            Set this block's slice state to the given <see cref="T:Astred.GraphLib.SliceState"/>.
            </summary>
            <param name="state">The <see cref="T:Astred.GraphLib.SliceState"/> to set the blocks to.</param>
            <param name="setDescendants">Indicates whether to include the descendants of this block as well. The default is false.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.SetSliceStateAll(Astred.GraphLib.SliceState,Astred.GraphLib.BlockType)">
            <summary>
            Set this block's slice state and the slice state of any of its descendants, if they are are of the given <see cref="T:Astred.GraphLib.BlockType"/>, to the given <see cref="T:Astred.GraphLib.SliceState"/>.
            </summary>
            <param name="state">The <see cref="T:Astred.GraphLib.SliceState"/> to set the blocks to.</param>
            <param name="blockType">The <see cref="T:Astred.GraphLib.BlockType"/> of the block to set.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.SliceInherit(System.Boolean)">
            <summary>
            Set this block's slice state to <see cref="F:Astred.GraphLib.SliceState.Inherit"/>.
            </summary>
            <param name="setDescendants">Indicates whether to include the descendants of this block as well. The default is false.</param>
            <remarks>
            This method sets the slicing state of this block to 'in' so that it will be included in any sliced output.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.SliceInheritAll(Astred.GraphLib.BlockType)">
            <summary>
            Set this block's slice state and the slice state of any of its descendants, if they are are of the given <see cref="T:Astred.GraphLib.BlockType"/>.
            </summary>
            <param name="blockType">The <see cref="T:Astred.GraphLib.BlockType"/> to include in sliced output.</param>
            <remarks>
            This method sets the slicing state of this block and any of its descendants to include if they are of the given <see cref="T:Astred.GraphLib.BlockType"/>.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.SliceInclude(System.Boolean)">
            <summary>
            Include this block in sliced output.
            </summary>
            <param name="setDescendants">Indicates whether to include the descendants of this block as well. The default is false.</param>
            <remarks>
            This method sets the slicing state of this block to 'in' so that it will be included in any sliced output.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.SliceIncludeAll(Astred.GraphLib.BlockType)">
            <summary>
            Include this block and any of its descendants that are of the given <see cref="T:Astred.GraphLib.BlockType"/>.
            </summary>
            <param name="blockType">The <see cref="T:Astred.GraphLib.BlockType"/> to include in sliced output.</param>
            <remarks>
            This method sets the slicing state of this block and any of its descendants to include if they are of the given <see cref="T:Astred.GraphLib.BlockType"/>.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.SliceExclude(System.Boolean)">
            <summary>
            Exclude this block from sliced output.
            </summary>
            <param name="setDescendants">Indicates whether to exclude the descendants of this block as well. The default is false.</param>
            <remarks>
            This method sets the slicing state of this block to 'out' so that it will be excluded in any sliced output.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.SliceExcludeAll(Astred.GraphLib.BlockType)">
            <summary>
            Exclude this block and any of its descendants that are of the given <see cref="T:Astred.GraphLib.BlockType"/>.
            </summary>
            <param name="blockType">The <see cref="T:Astred.GraphLib.BlockType"/> to exclude from sliced output.</param>
            <remarks>
            This method sets the slicing state of this block and any of its descendants to exclude if they are of the given <see cref="T:Astred.GraphLib.BlockType"/>.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.SliceIncludeForDescendants">
            <summary>
            Include this block in sliced output if any of its lower descendants are to be included or if it is already marked for inclusion.
            Also mark any descendants for inclusion that have descendants that are marked for inclusion.
            </summary>
            <returns>True if this block will be include in any sliced output; otherwise, false.</returns>
            <remarks>
            This method propagates the SliceState.Include state from any descent blocks up the graph to this block.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.Block.RemoveChildren">
            <summary>
            Removes all children from the current node.
            This method sets the parent of each child to null and clears the children list.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.Block.OverrideAstPoints(Astred.AstLib.AstPoint,Astred.AstLib.AstPoint)">
            <summary>
            Overrides the AST points with the provided beginning and end points.
            This method sets the beginning and end points of the AST to the specified values.
            </summary>
            <param name="beg">The beginning point of the AST.</param>
            <param name="end">The end point of the AST.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.OverrideAstDataFromBlock(Astred.GraphLib.Block)">
            <summary>
            Overrides the AST data from the specified block.
            This method copies the AST-related data from the given block to the current block.
            </summary>
            <param name="block">The block from which to override the AST data.</param>
        </member>
        <member name="M:Astred.GraphLib.Block.ResetIdBase">
            <summary>
            Resets the static counter used for assigning unique IDs to blocks.
            Should be used *ONLY* for debugging and testing.
            </summary>
            <remarks>
            This method should be used *ONLY* for debugging and testing.
            This method resets the static counter used for assigning unique IDs to blocks. It is typically used to ensure that
            block IDs start from 1 for a new graph or when reinitializing the block graph.
            </remarks>
        </member>
        <member name="T:Astred.GraphLib.BlockRoot">
            <summary>
            Represents the root block of a code graph. The root block serves as the entry point
            to the graph and typically does not correspond to a specific language construct. It may
            contain metadata or global information about the entire graph or AST.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockRoot.Globals">
            <summary>
            Gets the global scope associated with the root block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockRoot.SymGraph">
            <summary>
            The root of the Symbolic Graph associated with this root.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockRoot.#ctor(Astred.AstLib.AstScope,Astred.AstLib.AstNodeRoot)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockRoot"/> class with the specified global scope.
            </summary>
            <param name="globals">The global scope associated with the root block.</param>
            <param name="root">The root AST node for the root block.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockFile">
            <summary>
            Represents a file block, which corresponds to a source code file. A file block may contain
            other blocks that represent the constructs found within that file, such as namespaces, classes,
            and functions.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFile.File">
            <summary>
            Gets the <see cref="T:Astred.AstLib.AstFile"/>  for this file block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFile.Context">
            <summary>
            Gets the <see cref="T:Astred.AstLib.AstContext"/>  for this file block.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockFile.macros">
            <summary>
            Gets the dictionary of block macros associated with this file block.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockFile.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstFile,Astred.AstLib.AstContext,Astred.AstLib.AstNodeBase,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockFile"/> class with the specified AST node and file name.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="file">The file associated with the file block.</param>
            <param name="context">The parsing context associated with the file block.</param>
            <param name="ast">The root AST node associated with the file block.</param>
            <param name="name">The name of the file represented by the file block.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockFile.OverrideAstFile(Astred.AstLib.AstFile)">
            <summary>
            Overrides the current AST file with the provided AST file.
            This method sets the current file to the provided file and updates the AST points
            based on the beginning and end points of the provided file.
            </summary>
            <param name="file">The AST file to override with.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockImport">
            <summary>
            Represents an import block, which corresponds to an import or include directive in the source code.
            An import block indicates a dependency on another file or namespace.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockImport.SymGraph">
            <summary>
            The symbolic graph <see cref="T:Astred.GraphLib.SymNode"/> for this block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockImport.Target">
            <summary>
            The target file identifier for this import block if known.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockImport.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol,Astred.AstLib.AstFileIdentifier)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockImport"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the import block.</param>
            <param name="symbol">The symbol representing the import.</param>
            <param name="fid">The file identifier associated with the import.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockGeneric">
            <summary>
            Represents a generic block, which corresponds to a generic or template declaration in the source code.
            A generic block may be associated with classes, functions, or other constructs that support type
            parameterization.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockGeneric.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockGeneric"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the generic block.</param>
            <param name="symbol">The symbol representing the generic declaration.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockCompound">
            <summary>
            Represents a compound block, which is a base class for blocks that can contain other
            named blocks, such as classes, interfaces, structs, unions, enums, namespaces, and impl.
            Compound blocks are used to represent complex language constructs that act as containers
            for other constructs, allowing for hierarchical organization of code elements within the AST.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockCompound.#ctor(Astred.GraphLib.Block,Astred.GraphLib.BlockType,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockCompound"/> class with the specified AST node,
            block type, and associated symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the compound block.</param>
            <param name="blockType">The type of the compound block.</param>
            <param name="symbol">The symbol representing the compound construct.</param>
            <remarks>
            The <paramref name="blockType"/> must be one of the compound types such as <see cref="F:Astred.GraphLib.BlockType.Class"/>,
            <see cref="F:Astred.GraphLib.BlockType.Impl"/>, <see cref="F:Astred.GraphLib.BlockType.Interface"/>, <see cref="F:Astred.GraphLib.BlockType.Struct"/>,
            <see cref="F:Astred.GraphLib.BlockType.Union"/>, <see cref="F:Astred.GraphLib.BlockType.Enum"/>, or <see cref="F:Astred.GraphLib.BlockType.Namespace"/>.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.BlockCompound.#ctor(Astred.GraphLib.Block,Astred.GraphLib.BlockType,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockCompound"/> class with the specified AST node,
            symbol, and name.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the implementation block.</param>
            <param name="blockType">The type of the compound block.</param>
            <param name="symbol">The symbol representing the implementation.</param>
            <param name="name">The name to use instead of the symbol name for the implementation.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockNamespace">
            <summary>
            Represents a namespace block, which corresponds to a namespace declaration in the source code.
            A namespace block may contain other blocks representing the constructs that are part of the namespace.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockNamespace.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockNamespace"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the namespace block.</param>
            <param name="symbol">The symbol representing the namespace.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockClass">
            <summary>
            Represents a class block, which corresponds to a class declaration in the source code. A class block
            may contain other blocks representing the members of the class, such as methods, properties, and fields.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockClass.IsAbstract">
            <summary>
            Gets a value indicating whether the class is abstract.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockClass.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockClass"/> class with the specified AST node, symbol, and abstract flag.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the class block.</param>
            <param name="symbol">The symbol representing the class.</param>
            <param name="isAbstract">A value indicating whether the class is abstract.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockImpl">
            <summary>
            Represents an implementation block in a language like Rust. An implementation block may contain other
            blocks representing the members and methods that implement the type's functionality.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockImpl.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockImpl"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the implementation block.</param>
            <param name="symbol">The symbol representing the implementation.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockImpl.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockImpl"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the implementation block.</param>
            <param name="symbol">The symbol representing the implementation.</param>
            <param name="name">The name to use instead of the symbol name for the implementation.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockInterface">
            <summary>
            Represents an interface block, which corresponds to an interface declaration in the source code. An
            interface block may contain other blocks representing the methods or properties that are part of the
            interface contract.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockInterface.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockInterface"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the interface block.</param>
            <param name="symbol">The symbol representing the interface.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockStruct">
            <summary>
            Represents a struct block, which corresponds to a struct or structure declaration in the source code.
            A struct block may contain other blocks representing the members of the struct, such as fields and methods.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockStruct.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockStruct"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the struct block.</param>
            <param name="symbol">The symbol representing the struct.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockUnion">
            <summary>
            Represents a union block, which corresponds to a union declaration in the source code. A union block
            may contain other blocks representing the members of the union, which share the same memory location.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockUnion.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockUnion"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the union block.</param>
            <param name="symbol">The symbol representing the union.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockEnum">
            <summary>
            Represents an enum block, which corresponds to an enumeration declaration in the source code. An enum
            block may contain other blocks representing the individual enumeration constants.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockEnum.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockEnum"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the enum block.</param>
            <param name="symbol">The symbol representing the enumeration.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockTypedef">
            <summary>
            Represents a typedef block, which corresponds to a type definition or type alias in the source code.
            A typedef block provides an alternative name for an existing type.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockTypedef.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockTypedef"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the typedef block.</param>
            <param name="symbol">The symbol representing the type definition or alias.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockFunction">
            <summary>
            Represents a function block, which corresponds to a function or method declaration in the source code.
            A function block may contain other blocks representing the parameters, local variables, and statements
            within the function body.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.IsAbstract">
            <summary>
            Gets a value indicating whether the function is abstract.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.IsConstructor">
            <summary>
            Gets a value indicating whether the function is a constructor.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.IsDestructor">
            <summary>
            Gets a value indicating whether the function is a destructor.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.Parameters">
            <summary>
            Gets the parameters of the function as Block objects
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.Modifiers">
            <summary>
            Gets any modifiers of the function.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.ModifiersAsString">
            <summary>
            Gets the modifiers of the function as list of strings
            e.g. static, virtual, public, private etc
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.TypeParameters">
            <summary>
            Gets the list of valid types of the function
            in the case of generics, templates, etc.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.TypeParametersAsString">
            <summary>
            Gets the list of valid types of the function
            in string list format
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.ReturnType">
            <summary>
             Gets the AstSlice of return type of the function.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.ReturnTypeAsString">
            <summary>
             Gets the return type of the function as a string.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.ReturnTypes">
            <summary>
            The function return type blocks if the blocks exist
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.Signature">
            <summary>
            Gets the code from the beginning of the function
            to the beginning of the body field.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.Body">
            <summary>
            Gets the code of the function from the beginning of the body field
            to the end of the function
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.HeaderComment">
            <summary>
            Gets the comments above the function signature
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.HeaderCommentAsString">
            <summary>
             Gets the set of header comments of the function as a string.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockFunction.Attributes">
            <summary>
            Gets the attributes or decorators of the function
            as BlockAttributes
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockFunction"/> class with the specified AST node, symbol,
            and flags indicating whether the function is abstract, a constructor, or a destructor.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the function block.</param>
            <param name="symbol">The symbol representing the function.</param>
            <param name="isAbstract">A value indicating whether the function is abstract.</param>
            <param name="isConstructor">A value indicating whether the function is a constructor.</param>
            <param name="isDestructor">A value indicating whether the function is a destructor.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol,Astred.AstLib.AstSlice,Astred.AstLib.AstSlice,Astred.AstLib.AstSlice,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockFunction"/> class with the specified AST node, symbol,
            header code in the function, body code of the function, return type, and flags indicating whether
            the function is abstract, a constructor, or a destructor.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the function block.</param>
            <param name="symbol">The symbol representing the function.</param>
            <param name="signature">An AstSlice that points to the header code</param>
            <param name="body">An AstSlice that points to the body of the function code</param>
            <param name="return">The type of the function</param>
            <param name="isAbstract">A value indicating whether the function is abstract.</param>
            <param name="isConstructor">A value indicating whether the function is a constructor.</param>
            <param name="isDestructor">A value indicating whether the function is a destructor.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.AddParameters(System.Collections.Generic.IEnumerable{Astred.GraphLib.BlockVariable})">
            <summary>
            Adds AstSlice(s) that belongs to parameter(s) of the function
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.AddParameter(Astred.GraphLib.BlockVariable)">
            <summary>
            Adds a single BlockVariable to the block function
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.AddModifiers(System.Collections.Generic.IEnumerable{Astred.AstLib.AstSlice})">
            <summary>
            Adds the AstSlice(s) with the modifiers of the function
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.AddModifier(Astred.AstLib.AstSlice)">
            <summary>
            Adds the AstSlice with the modifier of the function
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.AddTypeParameter(Astred.AstLib.AstSlice)">
            <summary>
            Adds the type in case of generic, templates, etc.
            types from the function
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.AddTypeParameters(System.Collections.Generic.IEnumerable{Astred.AstLib.AstSlice})">
            <summary>
            Adds the type(s) in case of generic, templates, etc.
            types from the function
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.AddAttribute(Astred.GraphLib.BlockAttribute)">
            <summary>
            Adds a single BlockAttribute to the block function
            These nodes represent the annotations above the function
            e.g. Test, Data Annotations, etc.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.AddReturnType(Astred.AstLib.AstSymbol)">
            <summary>
            Adds the return type of the function
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:Astred.GraphLib.BlockFunction.OverrideAstDataFromBlock(Astred.GraphLib.Block)">
            <summary>
            Overrides the AST data from the specified block.
            This method copies the AST-related data from the given block to the current block.
            If the specified block is of type BlockFunction, it copies the modifiers, type parameters,
            attributes, parameters, signature, body, and return type.
            </summary>
            <param name="block">The block from which to override the AST data.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockField">
            <summary>
            Represents a field block, which corresponds to a field containing member variable declarations within a class,
            struct, or union in the source code.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockField.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockField"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the field block.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockVariable">
            <summary>
            Represents a variable block, which corresponds to a variable declaration in the source code. A variable
            block may represent a local variable, global variable, or parameter.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockVariable.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockVariable"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the variable block.</param>
            <param name="symbol">The symbol representing the variable.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockStatement">
            <summary>
            Represents a statement block, which corresponds to a statement in the source code. Statements are the
            basic building blocks of a program's execution flow and may include control flow constructs, assignments,
            and other actions.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockStatement.Condition">
            <summary>
            Gets the condition AST node associated with this block, if any.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockStatement.Control">
            <summary>
            Get the <see cref="T:Astred.GraphLib.ControlType"/> of this statement if it is a control flow statement.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockStatement.SymGraph">
            <summary>
            The symbolic graph <see cref="T:Astred.GraphLib.SymNode"/> for this statement (if any).
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockStatement.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstNodeBase,Astred.GraphLib.ControlType,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockStatement"/> class with the specified AST node,
            optional condition node, and control flow flag.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the statement block.</param>
            <param name="condition">The condition AST node associated with the statement block, if any.</param>
            <param name="control">A value indicating whether this statement controls flow through the statements of the function.</param>
            <param name="symbol">The symbol representing the statement.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockPreprocessor">
            <summary>
            Represents a preprocessor statement block, which corresponds to a preprpcoessor statement in the source code.
            Preprocesor statements control the compilation of a program. Preprocessor statements may may include
            conditional compilation, macro definitions, and file inclusion.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockPreprocessor.Condition">
            <summary>
            Gets the condition AST node associated with this block, if any.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockPreprocessor.Control">
            <summary>
            Get the <see cref="T:Astred.GraphLib.ControlType"/> of this statement if it is a control flow statement.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockPreprocessor.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstNodeBase,Astred.GraphLib.ControlType)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockPreprocessor"/> class with the specified AST node,
            optional condition node, and control flow flag.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the preprocessor statement block.</param>
            <param name="condition">The condition AST node associated with the preprocessor statement block, if any.</param>
            <param name="control">A value indicating whether this preprocessor statement controls compilation flow through the code.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockInvocation">
            <summary>
            Represents an invocation block, which corresponds to a function or method call or a goto a label in the source code.
            An invocation block is associated with the function being called or a got.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockInvocation.NoReturn">
            <summary>
            Tru if the invocation cannot return, like with a goto.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockInvocation.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockInvocation"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the invocation block.</param>
            <param name="symbol">The symbol representing the target function, method, or label.</param>
            <param name="noreturn">True if the invocation cannot return, like with a goto.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockDeclaration">
            <summary>
            Represents a declaration block, which corresponds to a declaration statement in the source code.
            Declaration blocks introduce new identifiers and may be associated with variables, functions,
            classes, and other named constructs.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.IsAbstract">
            <summary>
            Gets a value indicating whether the declaration is abstract.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.IsConstructor">
            <summary>
            Gets a value indicating whether the declaration is a constructor.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.IsDestructor">
            <summary>
            Gets a value indicating whether the declaration is a destructor.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.Parameters">
            <summary>
            Gets the parameters of the declaration as Block objects
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.Modifiers">
            <summary>
            Gets any modifiers of the declaration.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.ModifiersAsString">
            <summary>
            Gets the modifiers of the declaration as list of strings
            e.g. static, virtual, public, private etc
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.TypeParameters">
            <summary>
            Gets the list of valid types of the declaration
            in the case of generics, templates, etc.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.TypeParametersAsString">
            <summary>
            Gets the list of valid types of the declaration in string list format
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.ReturnType">
            <summary>
             Gets the AstSlice of return type of the declaration.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.ReturnTypeAsString">
            <summary>
             Gets the return type of the declaration as a string.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.Signature">
            <summary>
            Declaration signature.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockDeclaration.Attributes">
            <summary>
            Gets the attributes or decorators of the declaration
            as BlockAttributes
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockDeclaration.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockDeclaration"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the declaration block.</param>
            <param name="symbol">The symbol representing the declared entity.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockDeclaration.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol,Astred.AstLib.AstSlice,Astred.AstLib.AstSlice,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockDeclaration"/> class with the specified AST node, symbol,
            header code in the declaration, return type, and flags indicating whether
            the declaration is abstract, a constructor, or a destructor.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the declaration block.</param>
            <param name="symbol">The symbol representing the declaration.</param>
            <param name="signature">An AstSlice that points to the header code</param>
            <param name="return">The type of the declaration</param>
            <param name="isAbstract">A value indicating whether the declaration is abstract.</param>
            <param name="isConstructor">A value indicating whether the declaration is a constructor.</param>
            <param name="isDestructor">A value indicating whether the declaration is a destructor.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockDeclaration.AddParameters(System.Collections.Generic.IEnumerable{Astred.GraphLib.BlockVariable})">
            <summary>
            Adds AstSlice(s) that belongs to parameter(s) of the declaration
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockDeclaration.AddParameter(Astred.GraphLib.BlockVariable)">
            <summary>
            Adds a single BlockVariable to the block declaration
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockDeclaration.AddModifiers(System.Collections.Generic.IEnumerable{Astred.AstLib.AstSlice})">
            <summary>
            Adds the AstSlice(s) with the modifiers of the declaration
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockDeclaration.AddModifier(Astred.AstLib.AstSlice)">
            <summary>
            Adds the AstSlice with the modifier of the declaration
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockDeclaration.AddTypeParameters(System.Collections.Generic.IEnumerable{Astred.AstLib.AstSlice})">
            <summary>
            Adds the type(s) in case of generic, templates, etc.
            types from the declaration
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockDeclaration.AddTypeParameter(Astred.AstLib.AstSlice)">
            <summary>
            Adds the type in case of generic, templates, etc.
            types from the declaration
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockDeclaration.AddAttribute(Astred.GraphLib.BlockAttribute)">
            <summary>
            Adds a single BlockAttribute to the block declaration
            These nodes represent the annotations above the declaration
            e.g. Test, Data Annotations, etc.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.BlockMacro">
            <summary>
            Represents a macro block, which corresponds to a macro definition in the source code.
            Macros are preprocessor directives that define reusable code snippets or perform conditional compilation.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockMacro.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockMacro"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the macro block.</param>
            <param name="symbol">The symbol representing the macro.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockAttribute">
            <summary>
            Represents an attribute block, which corresponds to an attribute, annotation, or decorator applied
            to a language construct in the source code. Attributes may provide additional metadata or modify
            the behavior of the construct they are attached to.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockAttribute.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockAttribute"/> class with the specified AST node and symbol.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the attribute block.</param>
            <param name="symbol">The symbol representing the attribute.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockInstantiation">
            <summary>
            Represents an instantiation block, which corresponds to the instantiation of an object, generic or
            template in the source code. An instantiation block may be associated with the generic construct
            being instantiated and may contain other blocks representing the type arguments or parameters.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockInstantiation.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockInstantiation"/> class with the specified AST node and symbol.
            This block type is used to represent the instantiation of a generic type or method within the source code,
            capturing the specific type arguments or parameters used in the instantiation.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the instantiation block.</param>
            <param name="symbol">The symbol representing the instantiated entity.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockConcept">
            <summary>
            Represents a concept block, which corresponds to a C++-like concept definition. A concept is a set of
            constraints that a type must satisfy.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockConcept.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase,Astred.AstLib.AstSymbol)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockConcept"/> class with the specified AST node and symbol.
            This block type is used to represent the concept definition.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the instantiation block.</param>
            <param name="symbol">The symbol representing the instantiated entity.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockValue">
            <summary>
            Represents a value in the text.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockValue.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockValue"/> class with the specified AST node.
            This block type represents a value in a data key/value pair.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the redacted block.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockRedacted">
            <summary>
            Represents a redacted block of text, which corresponds to text that has been redacted or removed
            from the source code by a preprocessor or other tool. Redacted blocks may be used to represent
            code that is conditionally excluded from the final build.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockRedacted.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockRedacted"/> class with the specified AST node.
            This block type represents a redacted block, which corresponds to a block that has been redacted
            or removed from the source code by a preprocessor or other tool. Redacted blocks may be used to
            represent code that is conditionally excluded from the final build.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the redacted block.</param>
        </member>
        <member name="T:Astred.GraphLib.BlockError">
            <summary>
            Represents a error block, which corresponds to an error parsing the text.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockError.Message">
            <summary>
            Gets information mesage for this error, if any.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockError.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstNodeBase)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockError"/> class with the specified AST node.
            This block type represents an error in parsing.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="ast">The root AST node associated with the redacted block.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockError.#ctor(Astred.GraphLib.Block,Astred.AstLib.AstPoint,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.BlockError"/> class with the specified AST node.
            This block type represents an error in parsing.
            </summary>
            <param name="parent">The parent block of the new block.</param>
            <param name="rc">The <see cref="T:Astred.AstLib.AstPoint"/> location of the error in the file text.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockError.PrintAsError">
            <summary>
            Prints the error message to the console as an error.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockError.PrintAsWarning">
            <summary>
            Prints the error message to the console as a warning.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.BlockAssignment">
            <summary>
            Represents an assignment block, which corresponds to an assignment expression in the source code.
            As assignment block has two nodes that represents the left and the right of the assignment.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockAssignment.RightAst">
            <summary>
            The right side of the assignment
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphBuilder.Build(Astred.GraphLib.GraphProject)">
            <summary>
            Builds a new code graph from the builder state in three stages:
              1) Mapping the parsed AST nodes for each file in the workspace to N blocks.
                 Each such file is represented by N blocks that have a Block of type "File" as their root.
                 All such "File" blocks are children of the "Root" Block.
              2) Linking blocks together via (semantic) relations, e.g.:
                 callee -> caller, base type -> derived type, instantiated_by, etc.
              3) Building the Symbolic Graph.
            </summary>
            <param name="project">The project for which to build the code graph.</param>
            <returns>The code graph.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphBuilder.CollectDigest(Astred.GraphLib.GraphProject)">
            <summary>
            Parses the project enough to build a digest.
            </summary>
            <param name="project">The project for which to collect the digest.</param>
            <returns>True if the digest was collected.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphBuilder.BuildBlocks(Astred.GraphLib.Block,Astred.AstLib.AstNode)">
            <summary>
            Processes the specified AST node and returns the list of code graph blocks,
            which contains either the single AST node mapped into a block, if a block mapper
            was specified for the AST node type, or a list of any mapped child blocks, or
            an empty list, if no blocks were mapped.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphBuilder.FindMacroAt(Astred.GraphLib.Block,Astred.AstLib.AstPoint,System.Int32)">
            <summary>
            Returns the block nearest to being a leaf that uniquely contains the specified point.
            </summary>
            <param name="root">The root block from where to being search.</param>
            <param name="point">The point of interest.</param>
            <param name="depth">The depth of the search.</param>
            <returns></returns>
        </member>
        <member name="T:Astred.GraphLib.CodeGraphEdits">
            <summary>
            The CodeGraphEdits class is responsible for applying edits to a code graph and managing the differences between the expected and actual states.
            It provides methods to apply edits, calculate differences in AST and block structures, and handle block relations.
            The class also supports printing diffs and writing the edited file back to disk.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraphEdits.TextEditsApplied">
            <summary>
            Gets a value indicating whether the edits have been applied.
            Returns true if the actual block file is not null, indicating that edits have been applied.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraphEdits.IsAstDiffComputed">
            <summary>
            Gets a value indicating whether the AST differences have been computed.
            Returns true if the AST node differences and the shortest edit script are not null, indicating that the AST differences have been computed.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraphEdits.IsBlockDiffComputed">
            <summary>
            Gets a value indicating whether the block differences have been computed.
            Returns true if the block differences and the shortest edit script are not null, indicating that the block differences have been computed.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraphEdits.IsBlockRelationDiffComputed">
            <summary>
            Gets a value indicating whether the block relation differences have been computed.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraphEdits.AstShortestEditScript">
            <summary>
            Gets the shortest edit script for AST nodes.
            Returns a list of AST nodes representing the shortest sequence of edits required to transform the expected AST into the actual AST.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraphEdits.BlocksShortestEditScript">
            <summary>
            Gets the shortest edit script for blocks.
            Returns a list of blocks representing the shortest sequence of edits required to transform the expected block structure into the actual block structure.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraphEdits.BlockRelationsShortestEditScript">
            <summary>
            Gets the shortest edit script representing the differences in block relations, if computed; otherwise, returns null.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraphEdits.ParsingErrors">
            <summary>
            Flag indicating if there were parsing errors in the edited file.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.#ctor(Astred.GraphLib.CodeGraph,Astred.GraphLib.BlockFile,Astred.AstLib.AstFileEdits)">
            <summary>
            Initializes a new instance of the CodeGraphEdits class, which is responsible for applying edits to a code graph and managing the differences between the expected and actual states.
            </summary>
            <param name="graph">The CodeGraph object representing the code structure to be edited.</param>
            <param name="targetFile">File that is targeted to be applied</param>
            <param name="edits">The AstFileEdits object containing the edits to be applied to the code graph.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.#ctor(Astred.GraphLib.CodeGraph,Astred.GraphLib.BlockFile,Astred.AstLib.AstFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.GraphLib.CodeGraphEdits"/> class with a file modified in disk.
            </summary>
            <param name="graph">The code graph.</param>
            <param name="targetFile">The modified block file.</param>
            <param name="newFile">The modified AST file.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.ApplyEdits(System.Boolean,System.Boolean)">
            <summary>
            Applies the specified edits to the code graph.
            This method performs the following steps:
            1. Checks if the expected block file is available. If not, logs an error and returns false.
            2. Applies the edits to the AST file and updates the block structure.
            3. Computes the differences between the expected and actual AST and block structures.
            4. Optionally prints the differences if the printDiff parameter is true.
            5. Applies the computed edits to the code graph.
            6. Optionally writes the edited file to disk if the applyEdits parameter is true.
            </summary>
            <param name="printDiff">Indicates whether to print the differences after computing them.</param>
            <param name="applyEdits">Indicates whether to write the edited file to disk after applying the edits.</param>
            <returns>Returns true if the edits were successfully applied; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.ApplyEditsToAstFile">
            <summary>
            Applies edits to the Abstract Syntax Tree (AST) file and updates the block structure accordingly.
            This method checks if the edits have already been applied, and if not, it applies the edits to the AST file,
            parses the updated file, and creates a new block file representing the modified state.
            It also updates the context, binds symbols, and builds the block structure for the modified AST.
            </summary>
            <returns>The updated block file representing the modified state of the AST.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.GetEditsFromUpdatedFile(Astred.AstLib.AstFile)">
            <summary>
            Retrieves edits from the updated file by reading the latest content and parsing it.
            </summary>
            <returns>The updated <see cref="T:Astred.GraphLib.BlockFile"/> if successful; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.ParseEditedFile(Astred.AstLib.AstFile,Astred.AstLib.AstContext)">
            <summary>
            Parses the edited file and constructs the corresponding <see cref="T:Astred.GraphLib.BlockFile"/>.
            </summary>
            <param name="aftFile">The AST file after edits.</param>
            <param name="befContext">The AST context before edits.</param>
            <returns>The updated <see cref="T:Astred.GraphLib.BlockFile"/> if successful; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.ComputeAstDiff">
            <summary>
            Computes the differences between the expected and actual Abstract Syntax Tree (AST) and block structures.
            This method initializes the AST node differences and block differences, computes the edits required to transform
            the expected AST and block structures into the actual ones, and stores the results in the respective diff objects.
            </summary>
            <returns>Returns true if the differences were successfully computed; otherwise, false if they were already computed.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.ComputeBlockDiff">
            <summary>
            Computes the differences between the expected and actual block structures.
            If the differences have already been computed, it logs a message and returns true.
            Otherwise, it prepares the block difference instance and computes the edits.
            </summary>
            <returns>True if the block differences were successfully computed.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.ComputeBlockRelationDiff">
            <summary>
            Computes the differences between the expected and actual block relations.
            </summary>
            <returns>
            A dictionary where the key is a <see cref="T:Astred.GraphLib.Block"/> and the value is a list of <see cref="T:Astred.GraphLib.BlockRelationEdit"/> representing the differences in block relations.
            </returns>
            <remarks>
            This method initializes a new instance of <see cref="P:Astred.GraphLib.CodeGraphEdits.BlockRelationsDiff"/> with the expected blocks, actual blocks, and block map. It then calls <see cref="M:Astred.GraphLib.BlockRelationsDiff.CollectRelationsDiff"/> to compute and return the differences.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.ApplyEditsToCodeGraph">
            <summary>
            Applies the computed edits to the code graph.
            This method first checks if the AST differences have been computed. If not, it logs a message and returns false.
            If the differences have been computed, it prepares the tree for edits, applies the minimum edit script to the AST,
            overrides the expected AST file with the actual file, rewrites symbols, removes relations from deleted nodes,
            and connects relations for inserted blocks.
            </summary>
            <returns>Returns true if the edits were successfully applied; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.ApplyMinimumEditScriptToAST">
            <summary>
            Applies the minimum edit script to the Abstract Syntax Tree (AST).
            This method initializes a stack with the shortest edit script,
            pops the root node from the stack, removes all children from the root node,
            and then assembles the tree using the remaining nodes in the stack.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.PrepareTreeForEdits(System.Collections.Generic.List{Astred.AstLib.AstNodeBase},System.Collections.Generic.List{Astred.AstLib.AstNodeBase})">
            <summary>
            Prepares the Abstract Syntax Tree (AST) for edits by processing the shortest edit script.
            This method iterates through the edit script, removes children from nodes as necessary,
            and updates or deletes nodes based on the edit status. It also logs any token ID mismatches
            and updates the context and symbol map for nodes that are not deleted.
            </summary>
            <param name="bns">The list of base nodes in the AST.</param>
            <param name="ans">The list of nodes to be applied to the AST.</param>
            <returns>A tuple containing two lists: the nodes to be inserted and the nodes to be deleted.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.AssembleTree(Astred.AstLib.AstNodeBase,System.Collections.Generic.Stack{Astred.AstLib.AstNodeBase},Astred.GraphLib.Block)">
            <summary>
            Assembles the Abstract Syntax Tree (AST) by recursively processing nodes from the stack.
            This method pops nodes from the stack, inserts them as children if they are not marked for deletion,
            and handles nested scopes by calling itself recursively. It also updates the edit status of blocks
            and adds child blocks to the parent block as necessary.
            </summary>
            <param name="node">The current node being processed.</param>
            <param name="stack">The stack containing nodes to be processed.</param>
            <param name="parentBlock">The parent block to which child blocks will be added.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.RemoveRelationsFromDeletedNodes(System.Collections.Generic.List{Astred.AstLib.AstNodeBase})">
            <summary>
            Removes relations from the nodes marked for deletion.
            This method iterates through the list of deleted nodes, removes their related blocks,
            and updates the relation edit status to indicate that relations have changed.
            </summary>
            <param name="deletes">The list of nodes marked for deletion.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.ConnectRelationsForBlocks(System.Collections.Generic.List{Astred.AstLib.AstNodeBase})">
            <summary>
            Connects relations for blocks that are marked for insertion.
            This method iterates through the blocks marked for insertion, links them using the graph builder,
            and updates the relation edit status for both the blocks and their related blocks.
            </summary>
            <param name="inserts">The list of nodes marked for insertion.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.RewriteSymbols">
            <summary>
            Rewrites symbols in the Abstract Syntax Tree (AST) based on the symbol map.
            This method iterates through the shortest edit script, checks if each node is an AstNodeId,
            and updates its symbol and related symbols (TypeOf, FieldOf, Previous) if they exist in the symbol map.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.WriteEditedFile">
            <summary>
            Writes the edited AST file to disk, renaming the original file and saving the edited content.
            Finally, the method cleans up the edit flags in the Blocks and AST and recalculates the block placements.
            </summary>
            <returns>
            <c>true</c> if the edited file was successfully written; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.CleanUpEditsFlags(Astred.GraphLib.Block)">
            <summary>
            This method removes the original block from the graph and links the blocks together to recalculate their positions.
            It also resets the edit status of all blocks and AST nodes to None.
            Cleans up the edits by resetting the edit statuses and recalculating the block placements.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.TraverseCleanUp(Astred.AstLib.AstNodeBase)">
            <summary>
            Recursively resets the edit status of the given AST node and its children.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.ResetEdits">
            <summary>
            Resets the edits applied to the code graph by removing the edited block, relinking the blocks, and recalculating their positions.
            It also resets the edit status of all blocks and AST nodes to None.
            This deletes the progress of the edit and does not apply the changes to the file.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.PrintAstDiff(System.Boolean)">
            <summary>
            Prints the differences between the expected and actual AST nodes.
            </summary>
            <param name="printAll">If true, prints all differences; otherwise, prints the shortest edit script.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.PrintBlockDiff(System.Boolean)">
            <summary>
            Prints the differences between the expected and actual blocks.
            </summary>
            <param name="printAll">If true, prints all differences; otherwise, prints the shortest edit script.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.PrintBlockRelationDiff(System.Boolean)">
            <summary>
            Prints the differences between the expected and actual block relations.
            </summary>
            <param name="printAll">If true, prints all differences; otherwise, prints the shortest edit script.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.PrintEditErrors">
            <summary>
            Checks for errors in the edits applied to the code graph.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.Build(Astred.GraphLib.CodeGraph,Astred.AstLib.AstFileEdits)">
            <summary>
            Builds a CodeGraphEdits object from a CodeGraph and AstFileEdits.
            </summary>
            <param name="graph">The CodeGraph to be used.</param>
            <param name="edits">The AstFileEdits to be applied.</param>
            <returns>A new CodeGraphEdits object. Null if the path was not found.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraphEdits.Build(Astred.GraphLib.CodeGraph,Astred.GraphLib.BlockFile)">
            <summary>
            Builds a new instance of <see cref="T:Astred.GraphLib.CodeGraphEdits"/> for a given block file.
            </summary>
            <param name="graph">The code graph.</param>
            <param name="fileToModify">The block file to be checked </param>
            <returns>
            A new <see cref="T:Astred.GraphLib.CodeGraphEdits"/> instance if successful; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="T:Astred.GraphLib.DiffUtil`1">
            <summary>
            Provides utility methods for computing the differences between two lists of AST nodes,
            including calculating the cost matrix and generating the list of edits required to transform
            one list into the other.
            </summary>
            <typeparam name="T">Type of the sequence's elements</typeparam>
        </member>
        <member name="M:Astred.GraphLib.DiffUtil`1.PrintShortestEditScript(System.Boolean)">
            <summary>
            Prints the shortest edit script.
            </summary>
            <param name="printAll">If true, all the elements will be printed, if false, only the modified</param>
        </member>
        <member name="M:Astred.GraphLib.DiffUtil`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.GraphLib.DiffUtil`1"/> class.
            This constructor initializes the shortest edit script, expected list, and actual list.
            It then collects elements from the expected and actual inputs into their respective lists.
            </summary>
            <param name="expected">The expected input to be compared.</param>
            <param name="actual">The actual input to be compared.</param>
        </member>
        <member name="M:Astred.GraphLib.DiffUtil`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Astred.GraphLib.DiffUtil`1"/> class with the specified expected element.
            </summary>
            <param name="expected">The expected element.</param>
        </member>
        <member name="M:Astred.GraphLib.DiffUtil`1.#ctor">
            <summary>
            Initializes a new instance of the DiffUtil class with empty expected and actual lists.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.DiffUtil`1.ComputeEdits">
             <summary>
             Computes the shortest edit script (SES) between the expected and actual lists using Myers' diff algorithm.
             This method finds the minimal sequence of operations (insertions, deletions, substitutions) required to transform
             the expected list into the actual list and stores the result in the ShortestEditScript property.
             </summary>
             <remarks>
             Initialize the shortest edit script list and reverse the sequences
             to process them from the end.
             ExpectedList and ActualList are the sequences to compare.
             Variables:
             m = length of ExpectedList
             n = length of ActualList
             max = maximum possible edit distance (m + n)
             offset = used to handle negative indices in the algorithm
            
             Initialize an array 'v' to keep track of the furthest reach on each diagonal.
             'dp' is a list to store the state of 'v' at each step for backtracking.
             Loop over possible edit distances 'd' from 0 to max:
               For each edit distance 'd':
                 Loop over possible diagonals 'k' from -d to d in steps of 2:
                   Determine the next position (x, y) based on possible moves:
                     - If moving down (insertion) or right (deletion) is better.
                   While elements match (no edit needed), move diagonally:
                     - Increment x and y as long as ExpectedList[y] == ActualList[x].
                   Update 'v' with the new furthest reach for diagonal 'k'.
                   If the end of both sequences is reached (x >= n and y >= m):
                     - Save the current path for backtracking.
                     - Call BuildSES to reconstruct the shortest edit script.
                     - Reverse the ShortestEditScript to correct the order.
                     - Return from the method as the SES has been found.
                 Store a copy of 'v' in 'dp' for backtracking purposes.
             </remarks>
        </member>
        <member name="M:Astred.GraphLib.DiffUtil`1.BuildSES(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32[]},System.Int32,System.Int32)">
            <summary>
            Recursively builds the shortest edit script (SES) by backtracking through the computed paths.
            </summary>
            <param name="snake">The current depth level in the recursion, representing the number of edits made.</param>
            <param name="k">The current diagonal index in the diff grid.</param>
            <param name="dp">The list of arrays storing the furthest reaches on each diagonal at each depth.</param>
            <param name="offset">An offset to handle negative indices in the diagonal array.</param>
            <param name="d">The current edit distance.</param>
            <remarks>
            The BuildSES method is a recursive function that backtracks through the computed paths to reconstruct the shortest edit script
            A snake is a grouping of a change (insertion or deletion) and any number of diagonals (non edits). A sequence without edits would
            have a single diagonal snake.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.DiffUtil`1.ReplaceExpectedSequence(System.Collections.Generic.List{`0})">
            <summary>
            Replaces the current expected sequence with a new sequence.
            </summary>
            <param name="sequence">The new expected sequence.</param>
        </member>
        <member name="M:Astred.GraphLib.DiffUtil`1.ReplaceActualSequence(System.Collections.Generic.List{`0})">
            <summary>
            Replaces the current actual sequence with a new sequence.
            </summary>
            <param name="sequence">The new actual sequence.</param>
        </member>
        <member name="T:Astred.GraphLib.AstNodeDiff">
            <summary>
            Utility class for computing differences between AST nodes.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.AstNodeDiff.#ctor(Astred.AstLib.AstNodeBase,Astred.AstLib.AstNodeBase)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.GraphLib.AstNodeDiff.#ctor(Astred.AstLib.AstNodeBase)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.GraphLib.AstNodeDiff.CollectElements(Astred.AstLib.AstNodeBase,System.Collections.Generic.List{Astred.AstLib.AstNodeBase})">
            <summary>
            Recursively collects all AST nodes starting from the given node and adds them to the provided list.
            Each node's parent is set to the current node during the traversal.
            </summary>
            <param name="node">The starting AST node.</param>
            <param name="nodes">The list to collect the AST nodes into.</param>
        </member>
        <member name="M:Astred.GraphLib.AstNodeDiff.FlagElement(Astred.AstLib.AstNodeBase,Astred.GraphLib.DiffUtil{Astred.AstLib.AstNodeBase}.EditResult)">
            <summary>
            Flags the specified AST node element with the appropriate edit status based on the provided edit result.
            </summary>
            <param name="element">The AST node element to flag.</param>
            <param name="result">The result of the edit operation to apply to the AST node element.</param>
        </member>
        <member name="M:Astred.GraphLib.AstNodeDiff.Comparer(Astred.AstLib.AstNodeBase,Astred.AstLib.AstNodeBase)">
            <summary>
            Compares two AST nodes and returns the cost of transforming one into the other.
            </summary>
            <param name="expected">The expected AST node.</param>
            <param name="actual">The actual AST node.</param>
            <returns>The cost of transforming the expected node into the actual node.</returns>
        </member>
        <member name="M:Astred.GraphLib.AstNodeDiff.PrintEdits(Astred.AstLib.AstNodeBase,System.Collections.Generic.List{Astred.AstLib.AstNodeBase},System.Int32@,System.Int32)">
            <summary>
            Recursively prints nodes from an abstract syntax tree (AST) with indentation.
            Handles inserted nodes specially by printing them with increased indentation.
            Updates the editIndex as it processes each node.
            </summary>
            <param name="cn">The current AST node to print.</param>
            <param name="ses">The Shortest Edit Script list of nodes</param>
            <param name="editIndex">The current index in the list of nodes, passed by reference.</param>
            <param name="indent">The current level of indentation.</param>
        </member>
        <member name="M:Astred.GraphLib.AstNodeDiff.PrintShortestEditScript(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.GraphLib.BlockDiff">
            <summary>
            Provides methods for comparing and flagging differences between blocks in a graph structure.
            Inherits from <see cref="T:Astred.GraphLib.DiffUtil`1"/> to utilize generic diffing utilities for blocks.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockDiff.#ctor(Astred.GraphLib.Block,Astred.GraphLib.Block)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.GraphLib.BlockDiff.#ctor(Astred.GraphLib.Block)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.GraphLib.BlockDiff.CollectElements(Astred.GraphLib.Block,System.Collections.Generic.List{Astred.GraphLib.Block})">
            <summary>
            Recursively collects all blocks starting from the given block and adds them to the provided list.
            </summary>
            <param name="block">The starting block to collect from.</param>
            <param name="blocks">The list to which the collected blocks will be added.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockDiff.Comparer(Astred.GraphLib.Block,Astred.GraphLib.Block)">
            <summary>
            Compares two blocks to determine if they are equivalent based on their type, name, symbol, and the number of children.
            Returns a cost value indicating whether the blocks are considered identical or require replacement.
            </summary>
            <param name="expected">The expected block to compare.</param>
            <param name="actual">The actual block to compare.</param>
            <returns>
            An integer representing the comparison cost:
            <list type="bullet">
            <item><description><c>noEditCost</c> if the blocks are identical.</description></item>
            <item><description><c>replaceCost</c> if the blocks differ.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:Astred.GraphLib.BlockDiff.FlagElement(Astred.GraphLib.Block,Astred.GraphLib.DiffUtil{Astred.GraphLib.Block}.EditResult)">
            <summary>
            Flags the specified block element with the appropriate edit status based on the provided edit result.
            </summary>
            <param name="element">The block element to flag.</param>
            <param name="editResult">The result of the edit operation to apply to the block element.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockDiff.PrintShortestEditScript(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Astred.GraphLib.BlockRelationsDiff">
            <summary>
            The BlockRelationsDiff class is responsible for comparing the relations of blocks between two lists of expected and actual blocks.
            It provides methods to compare BlockRelationEdit objects, flag elements based on edit results, and collect the differences in block relations.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockRelationsDiff.BlockRelationsEditScript">
            <summary>
            Gets the edit script for block relations.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationsDiff.Comparer(Astred.GraphLib.BlockRelationEdit,Astred.GraphLib.BlockRelationEdit)">
            <summary>
            Compares two BlockRelationEdit objects and returns the cost of their differences.
            </summary>
            <param name="expected">The expected BlockRelationEdit object.</param>
            <param name="actual">The actual BlockRelationEdit object.</param>
            <returns>
            An integer representing the cost of the differences between the expected and actual BlockRelationEdit objects.
            Returns noEditCost if the blocks and their related blocks are equal and the relation types match.
            Returns replaceCost otherwise.
            </returns>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationsDiff.FlagElement(Astred.GraphLib.BlockRelationEdit,Astred.GraphLib.DiffUtil{Astred.GraphLib.BlockRelationEdit}.EditResult)">
            <summary>
            Flags a BlockRelationEdit element with a status based on the provided EditResult.
            </summary>
            <param name="element">The BlockRelationEdit element to be flagged.</param>
            <param name="result">The EditResult that determines the status to be set on the element.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationsDiff.CollectRelationsDiff">
            <summary>
            Collects the differences in block relations between the expected and actual relations.
            It compares the expected and actual BlockRelationEdit objects, updates the BlockEditStatus of the blocks,
            and organizes the differences into a dictionary where each key is a Block object and the value is a list of BlockRelationEdit objects.
            </summary>
            <returns>
            A dictionary where the key is a Block object and the value is a list of BlockRelationEdit objects representing the differences.
            </returns>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationsDiff.PrintShortestEditScript(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationsDiff.CollectExpectedRelations(Astred.GraphLib.Block)">
            <summary>
            Collects expected block relation edits starting from the given root block.
            </summary>
            <param name="rootBlock">The root block from which to collect expected relations.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationsDiff.CollectActualRelations(Astred.GraphLib.Block)">
            <summary>
            Collects actual block relation edits starting from the given root block.
            </summary>
            <param name="rootBlock">The root block from which to collect actual relations.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationsDiff.CollectElements(Astred.GraphLib.Block,System.Collections.Generic.List{Astred.GraphLib.BlockRelationEdit})">
            <summary>
            Recursively collects block relation edits from the given block and adds them to the list of elements.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationsDiff.CollectElements(Astred.GraphLib.BlockRelationEdit,System.Collections.Generic.List{Astred.GraphLib.BlockRelationEdit})">
            <summary>
            Collects block relation edits from the given relation edit and adds them to the list of elements.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.BlockRelationEditStatus">
            <summary>
            Enum representing the status of edits made to a block relation in the graph.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationEditStatus.None">
            <summary>
            No edits have been made.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationEditStatus.New">
            <summary>
            A new relation has been inserted.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.BlockRelationEditStatus.Delete">
            <summary>
            An existing relation has been deleted.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.BlockRelationEdit">
            <summary>
            Represents an edit operation on the relationship between two blocks in a graph.
            Implements <see cref="T:System.IComparable`1"/> to allow comparison of block relation edits.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockRelationEdit.Block">
            <summary>
            Gets the primary block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockRelationEdit.RelatedBlock">
            <summary>
            Gets the related block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockRelationEdit.RelationType">
            <summary>
            Gets the type of relation between the primary block and the related block.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.BlockRelationEdit.BlockRelationEditStatus">
            <summary>
            Property that holds the enum of th edits status of the block relation.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationEdit.#ctor(Astred.GraphLib.Block,Astred.GraphLib.Block,Astred.GraphLib.BlockRelationType,System.Boolean)">
            <summary>
            Initializes a new instance of the BlockRelationEdit class, which represents a relationship between two blocks.
            </summary>
            <param name="block">The primary Block object involved in the relationship.</param>
            <param name="relatedBlock">The related Block object involved in the relationship.</param>
            <param name="relationType">The type of relationship between the two blocks.</param>
            <param name="outsideFile">A boolean value indicating whether the related block is outside the current file. The default is false.</param>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationEdit.CompareTo(Astred.GraphLib.BlockRelationEdit)">
            <summary>
            Compares the current BlockRelationEdit object with another BlockRelationEdit object.
            </summary>
            <param name="other">The BlockRelationEdit object to compare with the current object.</param>
            <returns>
            An integer that indicates the relative order of the objects being compared.
            The return value has these meanings:
            - Less than zero: This object is less than the other parameter.
            - Zero: This object is equal to the other parameter.
            - Greater than zero: This object is greater than the other parameter.
            </returns>
        </member>
        <member name="M:Astred.GraphLib.BlockRelationEdit.ToString">
            <summary>
            Returns a string representation of the BlockRelationEdit object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Astred.GraphLib.IGraphApplication">
            <summary>
            All applications/transforms hosted by the graph service must implement this interface.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.IGraphApplication.Main(Astred.GraphLib.CodeGraph,System.String[])">
            <summary>
            Run the application/transform on the given code graph.
            </summary>
            <param name="graph">The code graph to run the application/transform on.</param>
            <param name="args">Arguments to the application/transform.</param>
            <returns>True if the application/transform was successful, false otherwise.</returns>
        </member>
        <member name="M:Astred.GraphLib.IGraphApplication.Summary">
            <summary>
            Get a one-line summary of what the application/transform does.
            </summary>
            <returns>Summary of the application/transform.</returns>
        </member>
        <member name="M:Astred.GraphLib.IGraphApplication.Usage">
            <summary>
            Get the usage information for the application/transform.
            </summary>
            <returns>Usage information for the application/transform.</returns>
        </member>
        <member name="T:Astred.GraphLib.CodeGraph">
            <summary>
            The code graph abstraction on top of an AST. The graph consists of
            blocks (each representing one or more AST nodes) that are linked to each
            other via (semantic) relations.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraph.Root">
            <summary>
            The root block of the code graph.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraph.SymRoot">
            <summary>
            The root block of the Symbolic Graph.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.CodeGraph.FileCache">
            <summary>
            The file cache for the code graph.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.CodeGraph.Project">
            <summary>
            The project associated with the code graph.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.#ctor(Astred.GraphLib.CodeGraphBuilder,Astred.GraphLib.BlockRoot)">
            <summary>
            Instantiates a new code graph with the specified root block.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.BuildFromPaths(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Builds a new code graph for the given files, using their extensions to determine the language.
            </summary>
            <param name="paths">List of files to be parsed.</param>
            <returns>CodeGraph created from the given files.</returns>
            <remarks>
            <see cref="M:Astred.AstLib.XAst.GetGraphLanguageForFile(System.String)">GetGraphLanguageForFile</see> is used to determine the language of the files.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.BuildWithLanguage(System.Collections.Generic.IEnumerable{System.String},Astred.GraphLib.GraphLanguage)">
            <summary>
            Builds a new code graph for the given files using the specified language.
            </summary>
            <param name="paths">List of files to be parsed.</param>
            <param name="language">The language of the files to be parsed.</param>
            <returns>CodeGraph created from the given files.</returns>
            <remarks>
            <see cref="M:Astred.AstLib.XAst.GetGraphLanguageForFile(System.String)">GetGraphLanguageForFile</see> can be used to find the best langauge for a given file extension.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.Build(Astred.GraphLib.GraphProject)">
            <summary>
            Builds a new code graph for the given project.
            </summary>
            <param name="project">The <see cref="T:Astred.GraphLib.GraphProject"/> project to parse and load.</param>
            <returns>CodeGraph created from the given project and its files.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.BuildSymbolicGraph">
            <summary>
            Builds the Symbolic Graph.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.CollectDigest(Astred.GraphLib.GraphProject)">
            <summary>
            Parses the project enough to build a digest.
            </summary>
            <param name="project">The project for which to collect the digest.</param>
            <returns>True if the digest was collected.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.BuildFromAst(Astred.AstLib.AstNodeRoot)">
            <summary>
            Builds a new code graph for the given AST node.
            </summary>
            <param name="root">The root AST node to build the code graph from.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.BuildFromDigest(System.String)">
            <summary>
            Builds a new code graph for the given digest zip file.
            The digest zip file is extracted at a temporary location and the project is recovered from it.
            If the digest includes header/system files then the project should be built with the extracted header/system files.
            The digest file gets extracted at the %TEMP% or tmp directory.
            The method the creates the project from the digest and builds the code graph.
            </summary>
            <param name="digestPath">The path to the digest zip file. Defaults to null, if null the method will look for .astred.digest.zip</param>
            <returns>CodeGraph created from the given digest.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.PrintGraph(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prints the code graph to the console.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.PrintSymbolicGraph">
            <summary>
            Prints the Symbolic Graph to the console.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.GetFileBlock(System.String)">
            <summary>
            Get the file block for the given path.
            </summary>
            <param name="path">The path to the file block.</param>
            <returns>The file block for the given path, or null if the file block does not exist.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.GetFileBlocks">
            <summary>
            Get the file blocks in the code graph.
            </summary>
            <returns>A set of file blocks in the code graph.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.FindTopBlocks(Astred.GraphLib.BlockType)">
            <summary>
            Get the top blocks in the code graph of a given type.
            </summary>
            <param name="blockType">The type of block to search for.</param>
            <returns>A set of top blocks of the given type.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.FindTopBlocks(Astred.GraphLib.BlockType,Astred.GraphLib.BlockType)">
            <summary>
            Get the top blocks in the code graph of the given types.
            </summary>
            <param name="blockType1">The first type of block to search for.</param>
            <param name="blockType2">The second type of block to search for.</param>
            <returns>A set of top blocks of the given types.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.FindTopBlocks(Astred.GraphLib.BlockType,Astred.GraphLib.BlockType,Astred.GraphLib.BlockType)">
            <summary>
            Get the top blocks in the code graph of the given types.
            </summary>
            <param name="blockType1">The first type of block to search for.</param>
            <param name="blockType2">The second type of block to search for.</param>
            <param name="blockType3">The third type of block to search for.</param>
            <returns>A set of top blocks of the given types.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.FindTopBlocks(Astred.GraphLib.BlockType,Astred.GraphLib.BlockType,Astred.GraphLib.BlockType,Astred.GraphLib.BlockType)">
            <summary>
            Get the top blocks in the code graph of the given types.
            </summary>
            <param name="blockType1">The first type of block to search for.</param>
            <param name="blockType2">The second type of block to search for.</param>
            <param name="blockType3">The third type of block to search for.</param>
            <param name="blockType4">The fourth type of block to search for.</param>
            <returns>A set of top blocks of the given types.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.WriteBlockSExpr(System.Text.StringBuilder,System.Int32)">
            <summary>
            Write the S-expression to the given string builder with the given indent.
            </summary>
            <param name="sb">The string builder to which to write the S-expression.</param>
            <param name="indent">The indent level for the S-expression.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.WriteSymGraphSExpr(System.Text.StringBuilder,System.Int32)">
            <summary>
            Write the S-expression to the given string builder with the given indent.
            </summary>
            <param name="sb">The string builder to which to write the S-expression.</param>
            <param name="indent">The indent level for the S-expression.</param>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.LoadProject(System.String)">
            <summary>
            Load the project configuration from a JSON file.
            </summary>
            <param name="path">Path to the JSON configuration file. If null, will search for ".astred.project.json"</param>
            <returns>An instance of <see cref="T:Astred.GraphLib.GraphProject"/> representing the parsed project, or null if parsing fails.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.LoadProject(Astred.GraphLib.AstredDigest,System.String)">
            <summary>
            Loads a GraphProject from a given AstredDigest and its path.
            This involves reading a JSON file specified in the digest, deserializing it into a GraphContexts object,
            normalizing paths, and creating a list of GraphFile objects from the sources in the project units.
            </summary>
            <param name="digest">The AstredDigest containing project metadata.</param>
            <param name="digestPath">The path to the directory containing the digest file.</param>
            <returns>A GraphProject object if successful; otherwise, null if an error occurs during deserialization or if the JSON is invalid.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.DeserializeUnits(System.String)">
            <summary>
            Deserializes a list of units from a JSON configuration file.
            If the file is found, it reads and deserializes the JSON content into a GraphContexts object.
            Handles various errors such as missing files and invalid JSON content, and logs appropriate error messages.
            </summary>
            <param name="path">The path to the JSON configuration file. If null, the method searches for the file in the current directory and its parents.</param>
            <returns>A list of GraphContext objects if successful; otherwise, null if an error occurs.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.CreateProjectFromPaths(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Create a project configuration from a list of file paths.
            </summary>
            <param name="paths">List for source file paths.</param>
            <param name="projectRoot">The root directory of the project neing parsed.</param>
            <returns>An instance of <see cref="T:Astred.GraphLib.GraphProject"/> representing the parsed project, or null if parsing fails.</returns>
            <remarks>
            <see cref="M:Astred.AstLib.XAst.GetGraphLanguageForFile(System.String)">GetGraphLanguageForFile</see> is used to determine the language of the files.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.CreateProjectWithLanguage(System.Collections.Generic.IEnumerable{System.String},Astred.GraphLib.GraphLanguage,System.String)">
            <summary>
            Create a project configuration from a list of file paths and a language.
            </summary>
            <param name="paths">List for source file paths.</param>
            <param name="language">The language to use when parsing the files.</param>
            <param name="projectRoot">The root directory of the project neing parsed.</param>
            <returns>An instance of <see cref="T:Astred.GraphLib.GraphProject"/> representing the parsed project, or null if parsing fails.</returns>
            <remarks>
            <see cref="M:Astred.AstLib.XAst.GetGraphLanguageForFile(System.String)">GetGraphLanguageForFile</see> can be used determine the default language for a file.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.FindSymNode(System.String)">
            <summary>
            Gets the corresponding <see cref="T:Astred.GraphLib.SymNode"/> from a symbolic path.
            </summary>
            <param name="path">The symbolic path.</param>
            <returns>The <see cref="T:Astred.GraphLib.SymNode"/> , if it exists; null otherwise.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.Update(System.Collections.Generic.List{Astred.AstLib.AstFileEdits},System.Boolean)">
            <summary>
            Updates the code graph with multiple AST file edits.
            </summary>
            <param name="edits">A list of <see cref="T:Astred.AstLib.AstFileEdits"/> to apply.</param>
            <param name="applyEdits">If set to <c>true</c>, the edits are written to disk.</param>
            <returns>A list of <see cref="T:Astred.GraphLib.CodeGraphEdits"/> reflecting the changes.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.Update(Astred.AstLib.AstFileEdits,System.Boolean)">
            <summary>
            Updates the code graph with a single AST file edit.
            </summary>
            <param name="edits">The <see cref="T:Astred.AstLib.AstFileEdits"/> to apply.</param>
            <param name="applyEdits">If set to <c>true</c>, the edits are written to disk.</param>
            <returns>A <see cref="T:Astred.GraphLib.CodeGraphEdits"/> object reflecting the changes.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.Update(System.Collections.Generic.IEnumerable{Astred.AstLib.AstFile})">
            <summary>
            Updates the code graph with a collection of AST files.
            </summary>
            <param name="files">A collection of AST files to update.</param>
            <returns>A list of <see cref="T:Astred.GraphLib.CodeGraphEdits"/> reflecting the changes.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.Update(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the code graph based on a list of file paths. The method will "reload" the
            files from disk into the graph and compute the differences between the old and new ASTs, blocks and relations.
            </summary>
            <param name="paths">A list of file paths to update.</param>
            <returns>A list of <see cref="T:Astred.GraphLib.CodeGraphEdits"/> reflecting the changes.</returns>
        </member>
        <member name="M:Astred.GraphLib.CodeGraph.Update">
            <summary>
            Updates the code graph based on the current state of the files in the graph.
            The method checks the <see cref="P:Astred.AstLib.AstFile.FileSystemStatus"/> of each file and updates the graph accordingly based on
            the files that have been changed in the filesystem
            </summary>
            <returns>A list of <see cref="T:Astred.GraphLib.CodeGraphEdits"/> containing the editions</returns>
        </member>
        <member name="T:Astred.GraphLib.GraphLanguageJsonConverter">
            <summary>
            Converts a <see cref="T:Astred.GraphLib.GraphLanguage"/> enum value to and from JSON.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.GraphLanguageJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads a JSON string and converts it to a <see cref="T:Astred.GraphLib.GraphLanguage"/> enum value.
            </summary>
            <param name="reader">The JSON reader.</param>
            <param name="typeToConvert">The type of the object to convert.</param>
            <param name="options">The serializer options.</param>
            <returns>The converted <see cref="T:Astred.GraphLib.GraphLanguage"/> enum value.</returns>
        </member>
        <member name="M:Astred.GraphLib.GraphLanguageJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Astred.GraphLib.GraphLanguage,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a <see cref="T:Astred.GraphLib.GraphLanguage"/> enum value as a JSON string.
            </summary>
            <param name="writer">The JSON writer.</param>
            <param name="language">The <see cref="T:Astred.GraphLib.GraphLanguage"/> enum value to write.</param>
            <param name="options">The serializer options.</param>
        </member>
        <member name="T:Astred.GraphLib.GraphLanguage">
            <summary>
            Defines the language to be used when parsing a file.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.None">
            <summary>
            None, no language specified.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.C">
            <summary>
            C.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.Cobol">
            <summary>
            COBOL.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.Cpp">
            <summary>
            C++.
            </summary>j
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.CSharp">
            <summary>
            C#.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.Go">
            <summary>
            Go.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.Ini">
            <summary>
            INI file format.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.Java">
            <summary>
            Java.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.ProtoBufs">
            <summary>
            Protocol Buffers IDL.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.Python">
            <summary>
            Python.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.Rust">
            <summary>
            Rust.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.TypeScript">
            <summary>
            TypeScript.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.JavaScript">
            <summary>
            JavaScript.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.Yaml">
            <summary>
            YAML.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.Xml">
            <summary>
            XML.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.GraphLanguage.Text">
            <summary>
            Raw text file.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.GraphProject">
            <summary>
            Represents a project configuration. Used for JSON deserialization.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphProject.ProjectPath">
            <summary>
            The path to the project configuration file.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphProject.Exceptions">
            <summary>
            A list of exceptions that occurred during the project creation.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphProject.IsCorpusTest">
            <summary>
            Indicates if the project is a corpus test.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphProject.ProjectRoot">
            <summary>
            The path for the project root.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphProject.Units">
            <summary>
            Compliation units include in this project.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphProject.Files">
            <summary>
            The files in the project.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.GraphProject.#ctor(System.String,Astred.Common.PathNormalizer)">
            <summary>
            Create a new instance of a GraphProject.
            </summary>
            <param name="projectPath">The path to the project configuration file.</param>
            <param name="pathNormalizer">The path normalizer to use for the project.</param>
            <returns>A new instance of a GraphProject.</returns>
        </member>
        <member name="M:Astred.GraphLib.GraphProject.#ctor(System.String,Astred.Common.PathNormalizer,System.Collections.Generic.List{Astred.GraphLib.GraphContext})">
            <summary>
            Create a new instance of a GraphProject.
            </summary>
            <param name="projectPath">The path to the project configuration file.</param>
            <param name="pathNormalizer">The path normalizer to use for the project.</param>
            <param name="units">A list of <see cref="T:Astred.GraphLib.GraphContext"/> project compilation units.</param>
            <returns>A new instance of a GraphProject.</returns>
        </member>
        <member name="M:Astred.GraphLib.GraphProject.#ctor(System.String,System.String,Astred.Common.PathNormalizer,System.Collections.Generic.List{Astred.GraphLib.GraphFile})">
            <summary>
            Create a new instance of a GraphProject.
            </summary>
            <param name="projectPath">The path to the project configuration file.</param>
            <param name="projectRoot">The root directory of the project neing parsed.</param>
            <param name="pathNormalizer">The path normalizer to use for the project.</param>
            <param name="files">A list of <see cref="T:Astred.GraphLib.GraphFile"/> objects representing the files in the project.</param>
            <returns>A new instance of a GraphProject.</returns>
        </member>
        <member name="M:Astred.GraphLib.GraphProject.ToString">
            <summary>
            Returns a string representation of the key file information formatted for debugging.
            </summary>
            <returns>A string representation of the file.</returns>
        </member>
        <member name="M:Astred.GraphLib.GraphProject.GenerateFileDigestZip(System.String)">
            <summary>
            Generate a zip file containing the digests of all files in the project.
            </summary>
            <param name="path">Path where to create the digest</param>
            <returns>Boolean indicating if the digest generation was successful</returns>
        </member>
        <member name="M:Astred.GraphLib.GraphProject.LoadProjectFromDigest(System.String,System.String)">
            <summary>
            Recovers a GraphProject from a digest file located at the specified path.
            The method extracts the digest zip file to a temporary directory, reads the digest file,
            and reconstructs the project either by loading the project file specified in the digest
            or by creating a new project from the paths listed in the digest.
            </summary>
            <param name="digestPath">The path to the digest zip file.</param>
            <param name="extractToPath">The path to extract the digest zip file to.</param>
            <returns>The recovered GraphProject, or null if the recovery fails.</returns>
        </member>
        <member name="M:Astred.GraphLib.GraphProject.LoadProjectFromDigest(System.String)">
            <summary>
            Recovers a GraphProject from a digest file located at the specified path.
            The method extracts the digest zip file to a temporary directory, reads the digest file,
            and reconstructs the project either by loading the project file specified in the digest
            or by creating a new project from the paths listed in the digest.
            </summary>
            <param name="digestPath">The path to the digest zip file.</param>
            <returns>The recovered GraphProject, or null if the recovery fails.</returns>
        </member>
        <member name="M:Astred.GraphLib.GraphProject.ExtractDigestFromZip(System.String,System.String)">
            <summary>
            Creates a temporary directory and extracts the digest zip file to it.
            </summary>
            <param name="digestPath">Path to the zip file</param>
            <param name="extractToPath">Path to extract the zip to</param>
            <returns>Path where the zip was extracted</returns>
        </member>
        <member name="T:Astred.GraphLib.GraphFile">
            <summary>
            Represents a file in a project.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphFile.Path">
            <summary>
            The path to the file.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphFile.Language">
            <summary>
            The language of the file.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphFile.Unit">
            <summary>
            The project unit the file belongs to.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.GraphFile.#ctor(System.String,Astred.GraphLib.GraphLanguage,Astred.GraphLib.GraphContext)">
            <summary>
            Create a new instance of a GraphFile.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="language">The language of the file.</param>
            <param name="unit">The project unit the file belongs to.</param>
        </member>
        <member name="M:Astred.GraphLib.GraphFile.ToString">
            <summary>
            Returns a string representation of the key file information formatted for debugging.
            </summary>
            <returns>A string representation of the file.</returns>
        </member>
        <member name="T:Astred.GraphLib.GraphProjectJson">
            <summary>
            Represents a project configuration.  Used for JSON deserialization.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphProjectJson.ProjectPath">
            <summary>
            The path to the project configuration file.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphProjectJson.Units">
            <summary>
            The list of project units.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphProjectJson.Exceptions">
            <summary>
            A list of exceptions that occurred during the project creation.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.GraphProjectJson.ToString">
            <summary>
            Returns a string representation of the key file information formatted for debugging.
            </summary>
            <returns>A string representation of the file.</returns>
        </member>
        <member name="T:Astred.GraphLib.GraphContext">
            <summary>
            Represents the compliation environment for a project unit.  Used for JSON deserialization.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.DisablePreprocessor">
            <summary>
            Specifies whether the preprocessor should be disabled.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.Language">
            <summary>
            The language to use when parsing the files in the project unit.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.Sources">
            <summary>
            The list of source files in the project unit.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.Packages">
            <summary>
            The list of defines to use when parsing the files in the project unit.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.Defines">
            <summary>
            The list of defines to use when parsing the files in the project unit.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.Includepaths">
            <summary>
            The list of include paths to use when parsing the files in the project unit.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.Forced">
            <summary>
            The list of forced includes to use when parsing the files in the project unit.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.Usings">
            <summary>
            The list of using directives to use when parsing the files in the project unit.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.Forceuse">
            <summary>
            The list of force using directives to use when parsing the files in the project unit.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.References">
            <summary>
            The list of reference assemblies to use when parsing the files in the project unit.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.GraphContext.Project">
            <summary>
            The project the unit belongs to.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.GraphContext.ToString">
            <summary>
            Returns a string representation of the key file information formatted for debugging.
            </summary>
            <returns>A string representation of the file.</returns>
        </member>
        <member name="T:Astred.GraphLib.AstredDigest">
            <summary>
            Class representing the serialization of the digest of the project.
            The class when serialized will contain the digest of all files in the project.
            When the class is constructed, it will also contain the versions of the Astred assemblies.
            Used for JSON serialization and deserialization.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.AstredDigest.Digest">
            <summary>
            Dictionary containing the digest of all files in the project.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.AstredDigest.FileHashes">
            <summary>
            Dictionary containing the digest of all files in the project.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.AstredDigest.Exceptions">
            <summary>
            List of exceptions that occurred during the project creation.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.AstredDigest.AstredAssemblies">
            <summary>
            Array containing the versions of the Astred assemblies used to process the project.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.AstredDigest.OS">
            <summary>
            The operating system description where the digest was generated.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.AstredDigest.ProjectFilePath">
            <summary>
            The path to the project file.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.AstredDigest.GitInfo">
            <summary>
            Struct containing the git information of the project.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.AstredDigest.DigestGitInfo">
            <summary>
            Struct containing the git information of the project.  Used for JSON serialization and deserialization.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.AstredDigest.DigestGitInfo.Branch">
            <summary>
            The current checked branch name.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.AstredDigest.DigestGitInfo.Commit">
            <summary>
            The current checked commit hash.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.AstredDigest.DigestGitInfo.Remotes">
            <summary>
            Array containing the URLs of the repository remotes.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.AstredDigest.#ctor">
            <summary>
            Constructor used for deserialization.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.AstredDigest.AssemblyVersionInfo(System.Reflection.Assembly)">
            <summary>
            Helper method to get the assembly version information of an assembly.
            </summary>
            <param name="assembly">Assembly from where to get the information</param>
            <returns>Formatted string containing the assembly info</returns>
        </member>
        <member name="M:Astred.GraphLib.AstredDigest.GetGitInfo(System.String)">
            <summary>
            Helper method to get the git information of the project.
            </summary>
            <param name="repoPath">Path of the repository</param>
        </member>
        <member name="M:Astred.GraphLib.AstredDigest.LoadDigestFileIdentifiersToCache(System.String)">
            <summary>
            Loads the files from the digest cache to the AstFile cache.
            The method looks for the last_written date of the file in the digest and loads the file from the cache. If not
            found it will stablish the last_written date to the current date.
            </summary>
            <param name="digestPath"></param>
        </member>
        <member name="M:Astred.GraphLib.AstredDigest.DigestZipPath(System.String,System.String,Astred.Common.PathNormalizer)">
            <summary>
            Generates a zip path for a given normalized and rationalized path, ensuring that the path does not escape the zip file directory.
            Replaces occurrences of ".." with ".dotdot" in the normalized path to prevent directory traversal issues.
            If the rationalized path is not recognized by the path normalizer, it adjusts the root of the path to ensure it is valid within the zip context.
            </summary>
            <param name="normalizedPath">The normalized path with potential directory traversal segments.</param>
            <param name="rationalizedPath">The full path to be rationalized and checked.</param>
            <param name="pathNormalizer">An instance of PathNormalizer to check if the path is recognized.</param>
            <returns>The adjusted zip path if successful; otherwise, null if the root pattern is unrecognized.</returns>
        </member>
        <member name="M:Astred.GraphLib.AstredDigest.DigestPathHelper(System.Collections.Generic.List{System.String},System.String,Astred.Common.PathNormalizer)">
            <summary>
            Processes a list of file paths by translating symbolic paths, normalizing them for inclusion in a zip file,
            and combining them with a base digest path.
            </summary>
            <param name="paths">The list of file paths to process.</param>
            <param name="digestPath">The base path to combine with each processed path.</param>
            <param name="pathNormalizer">An instance of <see cref="P:Astred.GraphLib.AstredDigest.PathNormalizer"/> used to translate symbolic paths.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeType">
            <summary>
            Represents the different types of nodes that can be part of the Symbolic Graph
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Unknown">
            <summary>
            Undefined node type.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Root">
            <summary>
            Represents the root of the Symbolic Graph.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Package">
            <summary>
            Represents a package node.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.File">
            <summary>
            Represents a file node, which may contain statements and file variables.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Namespace">
            <summary>
            Represents a namespace node, which corresponds to a namespace declaration in the source code.
            A namespace node may contain other nodes representing the constructs that are part of the namespace.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Class">
            <summary>
            Represents a class node, which corresponds to a class declaration in the source code. A class node
            may contain other nodes representing the members of the class, such as methods, properties, and fields.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Interface">
            <summary>
            Represents an interface node, which corresponds to an interface declaration in the source code. An
            interface node may contain other nodes representing methods or properties that are part of the interface
            contract.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Struct">
            <summary>
            Represents a struct node, which corresponds to a struct declaration in the source code.
            A struct node may contain other nodes representing the members of the struct, such as fields and methods.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Union">
            <summary>
            Represents a union node, which corresponds to a union declaration in the source code. A union node
            may contain other nodes representing the members of the union, which share the same memory location.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Enum">
            <summary>
            Represents an enum node, which corresponds to an enumeration declaration in the source code. An enum
            node may contain other nodes representing the individual enumeration constants.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Typedef">
            <summary>
            Represents a typedef node, which corresponds to a type definition or type alias in the source code.
            A typedef node provides an alternative name for an existing type.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Function">
            <summary>
            Represents a function node, which corresponds to a function or method declaration in the source code.
            A function node does not have any child nodes.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Field">
            <summary>
            Represents a field node, which corresponds to a field or member variable declaration within a class,
            struct, or union in the source code. A field node does not have any child nodes.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Variable">
            <summary>
            Represents a variable node, which corresponds to a global variable declartion.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Statement">
            <summary>
            Represents a declaration node. Used to represent statements that don't fall into any other node
            and are not inside a function.
            </summary>
        </member>
        <member name="F:Astred.GraphLib.SymNodeType.Macro">
            <summary>
            Represents a macro node.
            </summary>
        </member>
        <member name="T:Astred.GraphLib.SymNodeFilterAction">
            <summary>
            Defines the action for tree search comparison.
            This delegate is used as a filter function during tree traversal operations.
            It allos the caller to determine whether to include the current node in the result set,
            whethet to continue the recursion into the node's children, and whether to stop the traversal altogether.
            </summary>
            <param name="node">The current nod being visited during the traversal.</param>
            <param name="recurse">A reference to a boolean that the delegate can set to indicate whether to recurse into the node's children.</param>
            <param name="stop">A reference to a boolean that the delegate can set to indicate whether to stop the traversal immediately.</param>
            <returns>A boolean indicating whether the current node should be included in the result set.</returns>
        </member>
        <member name="T:Astred.GraphLib.SymNode">
            <summary>
            Represents a node in the Symbolic Graph.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNode.Name">
            <summary>
            The name of the node.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNode.NodePath">
            <summary>
            The full name of the node, including all namespaces.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNode.NodeType">
            <summary>
            The type of the node.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNode.Symbol">
            <summary>
            The symbol corresponding to this node.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNode.Children">
            <summary>
            The child nodes of this node.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNode.Parent">
            <summary>
            The parent node of this node.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNode.Placeit">
            <summary>
            Gets the placeit value, which is used for determining hierarchical relationships between nodes.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNode.Endit">
            <summary>
            Gets the endit value, which is used in conjunction with placeit to determine hierarchical relationships.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNode.Id">
            <summary>
            The id of the node.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNode.RelatedNodes">
            <summary>
            The dictionary containing all relations of this node.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNode.#ctor(System.String,System.String,Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNode"/> class.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="fullName">The full name (path) of the node.</param>
            <param name="nodeType">The node type.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="M:Astred.GraphLib.SymNode.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNode"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/>.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="nodeType">The node type.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="M:Astred.GraphLib.SymNode.ResetIdBase">
            <summary>
            Resets the static counter used for assigning unique IDs to nodes.
            Should be used *ONLY* for debugging and testing.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNode.AddChild(Astred.GraphLib.SymNode)">
            <summary>
            Adds a <see cref="T:Astred.GraphLib.SymNode"/> from to the Children of this node.
            </summary>
            <param name="child">The child node to add to this node.</param>
            <returns></returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.LinkSymbolicNodes">
            <summary>
            Adds relationships between nodes.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNode.AddFileAndStatementNodes(Astred.GraphLib.Block,System.Int32)">
            <summary>
            Adds node files and node statements from a given <see cref="T:Astred.GraphLib.Block"/> as children to this node.
            </summary>
            <param name="parent">The parent block to add statements from.</param>
            <param name="depth">The depth of the node.</param>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindOrAddFileNode(Astred.AstLib.AstSymbol)">
            <summary>
            Finds or add a file node corresponding with the file the symbol is from.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>The file node.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.CalculatePlaceIt(System.Int32)">
            <summary>
            Calculates the 'placeit' value for this node and all descendant nodes in the symbolic graph.
            The 'placeit' value is used to quickly determine if a node is a descendant of another node.
            </summary>
            <param name="placeit">The starting 'placeit' value. The default is 1.</param>
            <returns>The next 'placeit' value that can be used for subsequent blocks.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.IsDescendantOf(Astred.GraphLib.SymNode)">
            <summary>
            Determines whether the current node is a descendant of the specified node using the 'placeit'.
            </summary>
            <param name="other">The node to compare with the current node.</param>
            <returns>True if the current node is a descendant of the specified node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.IsAncestorOf(Astred.GraphLib.SymNode)">
            <summary>
            Determines whether the current node is an ancestor of the specified noed using the 'placeit'.
            </summary>
            <param name="other">The node to compare with the current node.</param>
            <returns>True if the current node is an ancestor of the specified node; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.IsSiblingOf(Astred.GraphLib.SymNode)">
            <summary>
            Determines whether the current node and the specified node are siblings (have the same parent node).
            </summary>
            <param name="other">The other node.</param>
            <returns>True if the nodes are siblings; otherwise, false.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindDescendants">
            <summary>
            Returns the descendant nodes (recursively) of the current node.
            </summary>
            <returns>An enumberable collection of all descendant nodes.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindDescendants``1">
            <summary>
            Finds all descendant nodes of a specific type within the hierarchy of this node.
            </summary>
            <typeparam name="T">The type of descendant node to find.</typeparam>
            <returns>An enumerable collection of descendant nodes of the specified type.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindDescendants(Astred.GraphLib.SymNodeType)">
            <summary>
            Returns the descendant nodes (recursively) of the current node with the given <see cref="T:Astred.GraphLib.SymNodeType"/>.
            </summary>
            <param name="nodeType">The <see cref="T:Astred.GraphLib.SymNodeType"/> of descendant nodes to find.</param>
            <returns>An enumberable collection of all the selected descendant nodes.</returns>\
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindDescendants(Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType)">
            <summary>
            Returns the descendant nodes (recursively) of the current node with the given <see cref="T:Astred.GraphLib.SymNodeType"/>.
            </summary>
            <param name="nodeType1">A <see cref="T:Astred.GraphLib.SymNodeType"/> of descendant nodes to find.</param>
            <param name="nodeType2">A <see cref="T:Astred.GraphLib.SymNodeType"/> of descendant nodes to find.</param>
            <returns>An enumberable collection of all the selected descendant nodes.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindDescendants(Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType)">
            <summary>
            Returns the descendant nodes (recursively) of the current node with the given <see cref="T:Astred.GraphLib.SymNodeType"/>.
            </summary>
            <param name="nodeType1">A <see cref="T:Astred.GraphLib.SymNodeType"/> of descendant nodes to find.</param>
            <param name="nodeType2">A <see cref="T:Astred.GraphLib.SymNodeType"/> of descendant nodes to find.</param>
            <param name="nodeType3">A <see cref="T:Astred.GraphLib.SymNodeType"/> of descendant nodes to find.</param>
            <returns>An enumberable collection of all the selected descendant nodes.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindDescendants(Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType)">
            <summary>
            Returns the descendant nodes (recursively) of the current node with the given <see cref="T:Astred.GraphLib.SymNodeType"/>.
            </summary>
            <param name="nodeType1">A <see cref="T:Astred.GraphLib.SymNodeType"/> of descendant nodes to find.</param>
            <param name="nodeType2">A <see cref="T:Astred.GraphLib.SymNodeType"/> of descendant nodes to find.</param>
            <param name="nodeType3">A <see cref="T:Astred.GraphLib.SymNodeType"/> of descendant nodes to find.</param>
            <param name="nodeType4">A <see cref="T:Astred.GraphLib.SymNodeType"/> of descendant nodes to find.</param>
            <returns>An enumberable collection of all the selected descendant nodes.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindDescendants(Astred.GraphLib.SymNodeFilterAction)">
            <summary>
            Find descendant nodes that match a given filter action.
            </summary>
            <param name="filter">The filter action to apply during the traversal.</param>
            <returns>An enumerable collection of descendant nodes that match the filter action.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindDescendants(System.Collections.Generic.List{Astred.GraphLib.SymNodeFilterAction})">
            <summary>
            Finds descendant nodes that match all given filter actions.
            </summary>
            <param name="filters">List of filter actions to apply.</param>
            <returns>An enumerable collection of nodes that match all given filter actions.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindNodeAndDescendants">
            <summary>
            Finds the node and all its descendant nodes in the graph.
            </summary>
            <returns>An enumberable collection of the node and its descendant nodes.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindNodeAndDescendants(Astred.GraphLib.SymNodeFilterAction)">
            <summary>
            Finds current node and descendant nodes that match a given filter action.
            </summary>
            <param name="filter">The filter action to apply during the traversal.</param>
            <returns>An enumerable collection containing the node and descendant nodes that match the filter action.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindNodeAndDescendants(System.Collections.Generic.List{Astred.GraphLib.SymNodeFilterAction})">
            <summary>
            Finds current node and descendant nodes that match all given filter actions.
            </summary>
            <param name="filters">List of filter actions to apply.</param>
            <returns>The list of nodes that match all given filter actions.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindTopDescendants``1">
            <summary>
            Finds the top descendant nodes of a specific type within the hierarchy of  this node.
            </summary>
            <typeparam name="T">The type of the top descendant nodes to find.</typeparam>
            <returns>An enumerable collection of the top descendant nodes of the specified type.</returns>
            <remarks>
            Only returns nodes that are of the specified type <typeparamref name="T"/> and are not themselves
            descendants of another node of the same type.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindTopDescendants(Astred.GraphLib.SymNodeType)">
            <summary>
            Finds the top descendant nodes of a specific type within the hierarchy of  this node.
            </summary>
            <param name="nodeType">The type of node to find.</param>
            <returns>An enumerable collection of the top descendant nodes of the specified type.</returns>
            <remarks>
            Only returns nodes that match the specified <paramref name="nodeType"/> and are not themselves
            descendants of another node of the same type.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindTopDescendants(Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType)">
            <summary>
            Finds the top descendant nodes of specific types within the hierarchy of  this node.
            </summary>
            <param name="nodeType">A type of node to find.</param>
            <param name="nodeType2">A type of node to find.</param>
            <returns>An enumerable collection of the top descendant nodes of the specified type.</returns>
            <remarks>
            Only returns nodes that match either <paramref name="nodeType"/> or <paramref name="nodeType2"/>,
            and are not themselves descendants of another node of the same type.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindTopDescendants(Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType)">
            <summary>
            Finds the top descendant nodes of specific types within the hierarchy of  this node.
            </summary>
            <param name="nodeType">A type of node to find.</param>
            <param name="nodeType2">A type of node to find.</param>
            <param name="nodeType3">A type of node to find.</param>
            <returns>An enumerable collection of the top descendant nodes of the specified type.</returns>
            <remarks>
            Only returns nodes that match either <paramref name="nodeType"/>, <paramref name="nodeType2"/>
            or <paramref name="nodeType3"/>, and are not themselves descendants of another node of the same type.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindTopDescendants(Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType,Astred.GraphLib.SymNodeType)">
            <summary>
            Finds the top descendant nodes of specific types within the hierarchy of  this node.
            </summary>
            <param name="nodeType">A type of node to find.</param>
            <param name="nodeType2">A type of node to find.</param>
            <param name="nodeType3">A type of node to find.</param>
            <param name="nodeType4">A type of node to find.</param>
            <returns>An enumerable collection of the top descendant nodes of the specified type.</returns>
            <remarks>
            Only returns nodes that match either <paramref name="nodeType"/>, <paramref name="nodeType2"/>,
            <paramref name="nodeType3"/> or <paramref name="nodeType4"/>, and are not themselves descendants of another node of the same type.
            </remarks>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindFromPath(System.String,System.String[],System.Int32)">
            <summary>
            Looks for a symbolic node matching the provided path.
            </summary>
            <param name="path">The current path being looked for.</param>
            <param name="parts">All parts of the path, in an array.</param>
            <param name="position">The current position of the array we are checking.</param>
            <returns>The <see cref="T:Astred.GraphLib.SymNode"/>, if it exists; null otherwise.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindUsedByThis">
            <summary>
            Returns all nodes that this node uses in any form.
            </summary>
            <returns>An enumerable collection of nodes used by this node.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.FindUsingThis">
            <summary>
            Returns all nodes that use this node in any form.
            </summary>
            <returns>An enumberable collection of nodes that use this node.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.ToString">
            <summary>
            Formatted string.
            </summary>
            <returns>A string representing the node.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.PrintNode(System.Int32,System.Boolean)">
            <summary>
            Prints the current node and its full namespace to the console.
            </summary>
            <param name="depth">The depth of the node tree, used for indentation. The default is 0.</param>
            <param name="showRelations">Whether to show the relations of the node. The default is true.</param>
            <returns>The number of nodes printed.</returns>
        </member>
        <member name="M:Astred.GraphLib.SymNode.PrintTree(System.Int32,System.Boolean)">
            <summary>
            Prints the entire tree structure of the symbolic graph to the console, starting from the current node.
            </summary>
            <param name="depth">The starting depth for indentation. The default is 0.</param>
            <param name="showRelations">Whether to show the relations of the node. The default is true.</param>
            <returns>The number of nodes printed.</returns>
        </member>
        <member name="T:Astred.GraphLib.SymNodeRoot">
            <summary>
            Represents the root of the Symbolic Graph.
            May contain global statement and variable nodes.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNodeRoot.Block">
            <summary>
            The corresponding root block of this node.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeRoot.#ctor(Astred.GraphLib.BlockRoot)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeRoot"/> class from a <see cref="T:Astred.GraphLib.BlockRoot"/> .
            </summary>
            <param name="block">The block associated with the root.</param>
        </member>
        <member name="M:Astred.GraphLib.SymNodeRoot.FindOrAddPackageNode(System.String,Astred.AstLib.AstContext,System.Int32)">
            <summary>
            Returns the package node that a path belongs to, given an <see cref="T:Astred.AstLib.AstContext"/>.
            </summary>
            <param name="path">The path.</param>
            <param name="context">The context.</param>
            <param name="depth">The depth of the node.</param>
            <returns>The package node.</returns>
        </member>
        <member name="T:Astred.GraphLib.SymNodePackage">
            <summary>
            Represents a package node.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNodePackage.Path">
            <summary>
            The path of the package.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodePackage.#ctor(System.String,System.String,Astred.GraphLib.SymNodeRoot)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodePackage"/> class from a package name.
            </summary>
            <param name="name">The package name.</param>
            <param name="path">The package path.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeFile">
            <summary>
            Represents a file in the Symbolic Graph.
            Used to group statements.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNodeFile.Block">
            <summary>
            The corresponding file block of this node.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeFile.#ctor(Astred.GraphLib.BlockFile,Astred.GraphLib.SymNodePackage)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeFile"/> class from a <see cref="T:Astred.GraphLib.BlockFile"/> .
            </summary>
            <param name="block">The file block.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeNamespace">
            <summary>
            Represents a namespace node, which corresponds to a namespace declaration in the source code.
            A namespace node may contain other nodes representing the constructs that are part of the namespace.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeNamespace.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeNamespace"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeClass">
            <summary>
            Represents a class node, which corresponds to a class declaration in the source code. A class node
            may contain other nodes representing the members of the class, such as methods, properties, and fields.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeClass.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeClass"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeInterface">
            <summary>
            Represents an interface node, which corresponds to an interface declaration in the source code. An
            interface node may contain other nodes representing methods or properties that are part of the interface
            contract.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeInterface.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeInterface"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeStruct">
            <summary>
            Represents a struct node, which corresponds to a struct declaration in the source code.
            A struct node may contain other nodes representing the members of the struct, such as fields and methods.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeStruct.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeStruct"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeUnion">
            <summary>
            Represents a union node, which corresponds to a union declaration in the source code. A union node
            may contain other nodes representing the members of the union, which share the same memory location.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeUnion.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeUnion"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeEnum">
            <summary>
            Represents an enum node, which corresponds to an enumeration declaration in the source code. An enum
            node may contain other nodes representing the individual enumeration constants.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeEnum.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeEnum"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeTypedef">
            <summary>
            Represents a typedef node, which corresponds to a type definition or type alias in the source code.
            A typedef node provides an alternative name for an existing type.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeTypedef.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeTypedef"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeFunction">
            <summary>
            Represents a function node, which corresponds to a function or method declaration in the source code.
            A function node does not have any child nodes.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeFunction.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeFunction"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeField">
            <summary>
            Represents a field node, which corresponds to a field or member variable declaration within a class,
            struct, or union in the source code. A field node does not have any child nodes.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeField.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeField"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeVariable">
            <summary>
            Represents a variable node, which corresponds to a global variable declartion.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeVariable.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeVariable"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeStatement">
            <summary>
            Represents a declaration node. Used to represent statements that don't fall into any other node
            and are not inside a function.
            </summary>
        </member>
        <member name="P:Astred.GraphLib.SymNodeStatement.Block">
            <summary>
            The corresponding block of this node.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeStatement.#ctor(Astred.GraphLib.BlockStatement,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeStatement"/> class from a <see cref="T:Astred.GraphLib.BlockStatement"/> .
            </summary>
            <param name="block">The statement block associated with the statement.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="M:Astred.GraphLib.SymNodeStatement.#ctor(Astred.GraphLib.BlockImport,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeStatement"/> class from a <see cref="T:Astred.GraphLib.BlockImport"/> .
            </summary>
            <param name="block">The import block associated with the statement.</param>
            <param name="parent">The parent node.</param>
        </member>
        <member name="T:Astred.GraphLib.SymNodeMacro">
            <summary>
            Represents a macro node.
            </summary>
        </member>
        <member name="M:Astred.GraphLib.SymNodeMacro.#ctor(Astred.AstLib.AstSymbol,Astred.GraphLib.SymNode)">
            <summary>
            Creates a new instance of the <see cref="T:Astred.GraphLib.SymNodeMacro"/> class from a <see cref="T:Astred.AstLib.AstSymbol"/> .
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parent">The parent node.</param>
        </member>
    </members>
</doc>
